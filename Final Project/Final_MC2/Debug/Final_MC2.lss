
Final_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000294c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000294c  000029e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800068  00800068  000029e8  2**0
                  ALLOC
  3 .stab         00002b2c  00000000  00000000  000029e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001145  00000000  00000000  00005514  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006659  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006799  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006909  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008552  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000943d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a1ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a34c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a5d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ada7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__vector_3>
      10:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__vector_6>
      1c:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <__vector_7>
      20:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__vector_8>
      24:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a9 37       	cpi	r26, 0x79	; 121
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e4       	ldi	r30, 0x4C	; 76
      78:	f9 e2       	ldi	r31, 0x29	; 41
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 95 14 	jmp	0x292a	; 0x292a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 95 14 	jmp	0x292a	; 0x292a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 95 14 	jmp	0x292a	; 0x292a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 95 14 	jmp	0x292a	; 0x292a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 95 14 	jmp	0x292a	; 0x292a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "external_eeprom.h"
#include "twi.h"
#include "password.h"
#include <util/delay.h>
#include "motor.h"
int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6e 97       	sbiw	r28, 0x1e	; 30
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 val = 0;
     b5a:	1e 8e       	std	Y+30, r1	; 0x1e

	/* Initialize the TWI/I2C Driver */
	TWI_init();
     b5c:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <TWI_init>
	uint8 key_num;
	Buzz_Init();
     b60:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <Buzz_Init>
	motor_init();
     b64:	0e 94 96 0a 	call	0x152c	; 0x152c <motor_init>

	EEPROM_writeByte(0x0000, 255); /* Write 255 in the external EEPROM to know there is no password set yet */
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	6f ef       	ldi	r22, 0xFF	; 255
     b6e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <EEPROM_writeByte>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e2       	ldi	r26, 0x20	; 32
     b78:	b1 e4       	ldi	r27, 0x41	; 65
     b7a:	89 8f       	std	Y+25, r24	; 0x19
     b7c:	9a 8f       	std	Y+26, r25	; 0x1a
     b7e:	ab 8f       	std	Y+27, r26	; 0x1b
     b80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b82:	69 8d       	ldd	r22, Y+25	; 0x19
     b84:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b86:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b88:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a e7       	ldi	r20, 0x7A	; 122
     b90:	53 e4       	ldi	r21, 0x43	; 67
     b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	8d 8b       	std	Y+21, r24	; 0x15
     b9c:	9e 8b       	std	Y+22, r25	; 0x16
     b9e:	af 8b       	std	Y+23, r26	; 0x17
     ba0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ba2:	6d 89       	ldd	r22, Y+21	; 0x15
     ba4:	7e 89       	ldd	r23, Y+22	; 0x16
     ba6:	8f 89       	ldd	r24, Y+23	; 0x17
     ba8:	98 8d       	ldd	r25, Y+24	; 0x18
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e8       	ldi	r20, 0x80	; 128
     bb0:	5f e3       	ldi	r21, 0x3F	; 63
     bb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bb6:	88 23       	and	r24, r24
     bb8:	2c f4       	brge	.+10     	; 0xbc4 <main+0x7e>
		__ticks = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	9c 8b       	std	Y+20, r25	; 0x14
     bc0:	8b 8b       	std	Y+19, r24	; 0x13
     bc2:	3f c0       	rjmp	.+126    	; 0xc42 <main+0xfc>
	else if (__tmp > 65535)
     bc4:	6d 89       	ldd	r22, Y+21	; 0x15
     bc6:	7e 89       	ldd	r23, Y+22	; 0x16
     bc8:	8f 89       	ldd	r24, Y+23	; 0x17
     bca:	98 8d       	ldd	r25, Y+24	; 0x18
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	3f ef       	ldi	r19, 0xFF	; 255
     bd0:	4f e7       	ldi	r20, 0x7F	; 127
     bd2:	57 e4       	ldi	r21, 0x47	; 71
     bd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bd8:	18 16       	cp	r1, r24
     bda:	4c f5       	brge	.+82     	; 0xc2e <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bdc:	69 8d       	ldd	r22, Y+25	; 0x19
     bde:	7a 8d       	ldd	r23, Y+26	; 0x1a
     be0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     be2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e2       	ldi	r20, 0x20	; 32
     bea:	51 e4       	ldi	r21, 0x41	; 65
     bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9c 8b       	std	Y+20, r25	; 0x14
     c02:	8b 8b       	std	Y+19, r24	; 0x13
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <main+0xde>
     c06:	89 e1       	ldi	r24, 0x19	; 25
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9a 8b       	std	Y+18, r25	; 0x12
     c0c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0e:	89 89       	ldd	r24, Y+17	; 0x11
     c10:	9a 89       	ldd	r25, Y+18	; 0x12
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <main+0xcc>
     c16:	9a 8b       	std	Y+18, r25	; 0x12
     c18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	8b 89       	ldd	r24, Y+19	; 0x13
     c1c:	9c 89       	ldd	r25, Y+20	; 0x14
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9c 8b       	std	Y+20, r25	; 0x14
     c22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	8b 89       	ldd	r24, Y+19	; 0x13
     c26:	9c 89       	ldd	r25, Y+20	; 0x14
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	69 f7       	brne	.-38     	; 0xc06 <main+0xc0>
     c2c:	14 c0       	rjmp	.+40     	; 0xc56 <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	6d 89       	ldd	r22, Y+21	; 0x15
     c30:	7e 89       	ldd	r23, Y+22	; 0x16
     c32:	8f 89       	ldd	r24, Y+23	; 0x17
     c34:	98 8d       	ldd	r25, Y+24	; 0x18
     c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9c 8b       	std	Y+20, r25	; 0x14
     c40:	8b 8b       	std	Y+19, r24	; 0x13
     c42:	8b 89       	ldd	r24, Y+19	; 0x13
     c44:	9c 89       	ldd	r25, Y+20	; 0x14
     c46:	98 8b       	std	Y+16, r25	; 0x10
     c48:	8f 87       	std	Y+15, r24	; 0x0f
     c4a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c4c:	98 89       	ldd	r25, Y+16	; 0x10
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <main+0x108>
     c52:	98 8b       	std	Y+16, r25	; 0x10
     c54:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	EEPROM_readByte(0x0000, &val);  /* Read 0x0F from the external EEPROM */
     c56:	9e 01       	movw	r18, r28
     c58:	22 5e       	subi	r18, 0xE2	; 226
     c5a:	3f 4f       	sbci	r19, 0xFF	; 255
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	b9 01       	movw	r22, r18
     c62:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <EEPROM_readByte>
	/* Configure all pins in PORTC as output pins */

	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(9600);
     c66:	60 e8       	ldi	r22, 0x80	; 128
     c68:	75 e2       	ldi	r23, 0x25	; 37
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 6d 13 	call	0x26da	; 0x26da <UART_init>
	key_num = UART_recieveByte();
     c72:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <UART_recieveByte>
     c76:	8d 8f       	std	Y+29, r24	; 0x1d
	/* If key is 255 "So it will check if there's a stored password" */
	if(key_num == 255)	UART_sendByte(255);
     c78:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c7a:	8f 3f       	cpi	r24, 0xFF	; 255
     c7c:	19 f4       	brne	.+6      	; 0xc84 <main+0x13e>
     c7e:	8f ef       	ldi	r24, 0xFF	; 255
     c80:	0e 94 b9 13 	call	0x2772	; 0x2772 <UART_sendByte>
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	a0 e2       	ldi	r26, 0x20	; 32
     c8a:	b1 e4       	ldi	r27, 0x41	; 65
     c8c:	8b 87       	std	Y+11, r24	; 0x0b
     c8e:	9c 87       	std	Y+12, r25	; 0x0c
     c90:	ad 87       	std	Y+13, r26	; 0x0d
     c92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c94:	6b 85       	ldd	r22, Y+11	; 0x0b
     c96:	7c 85       	ldd	r23, Y+12	; 0x0c
     c98:	8d 85       	ldd	r24, Y+13	; 0x0d
     c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	4a e7       	ldi	r20, 0x7A	; 122
     ca2:	53 e4       	ldi	r21, 0x43	; 67
     ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	8f 83       	std	Y+7, r24	; 0x07
     cae:	98 87       	std	Y+8, r25	; 0x08
     cb0:	a9 87       	std	Y+9, r26	; 0x09
     cb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cb4:	6f 81       	ldd	r22, Y+7	; 0x07
     cb6:	78 85       	ldd	r23, Y+8	; 0x08
     cb8:	89 85       	ldd	r24, Y+9	; 0x09
     cba:	9a 85       	ldd	r25, Y+10	; 0x0a
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 e8       	ldi	r20, 0x80	; 128
     cc2:	5f e3       	ldi	r21, 0x3F	; 63
     cc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cc8:	88 23       	and	r24, r24
     cca:	2c f4       	brge	.+10     	; 0xcd6 <main+0x190>
		__ticks = 1;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	9e 83       	std	Y+6, r25	; 0x06
     cd2:	8d 83       	std	Y+5, r24	; 0x05
     cd4:	3f c0       	rjmp	.+126    	; 0xd54 <main+0x20e>
	else if (__tmp > 65535)
     cd6:	6f 81       	ldd	r22, Y+7	; 0x07
     cd8:	78 85       	ldd	r23, Y+8	; 0x08
     cda:	89 85       	ldd	r24, Y+9	; 0x09
     cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	3f ef       	ldi	r19, 0xFF	; 255
     ce2:	4f e7       	ldi	r20, 0x7F	; 127
     ce4:	57 e4       	ldi	r21, 0x47	; 71
     ce6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cea:	18 16       	cp	r1, r24
     cec:	4c f5       	brge	.+82     	; 0xd40 <main+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cee:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e2       	ldi	r20, 0x20	; 32
     cfc:	51 e4       	ldi	r21, 0x41	; 65
     cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	bc 01       	movw	r22, r24
     d08:	cd 01       	movw	r24, r26
     d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	9e 83       	std	Y+6, r25	; 0x06
     d14:	8d 83       	std	Y+5, r24	; 0x05
     d16:	0f c0       	rjmp	.+30     	; 0xd36 <main+0x1f0>
     d18:	89 e1       	ldi	r24, 0x19	; 25
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	9c 83       	std	Y+4, r25	; 0x04
     d1e:	8b 83       	std	Y+3, r24	; 0x03
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	9c 81       	ldd	r25, Y+4	; 0x04
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	f1 f7       	brne	.-4      	; 0xd24 <main+0x1de>
     d28:	9c 83       	std	Y+4, r25	; 0x04
     d2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2c:	8d 81       	ldd	r24, Y+5	; 0x05
     d2e:	9e 81       	ldd	r25, Y+6	; 0x06
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	9e 83       	std	Y+6, r25	; 0x06
     d34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d36:	8d 81       	ldd	r24, Y+5	; 0x05
     d38:	9e 81       	ldd	r25, Y+6	; 0x06
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	69 f7       	brne	.-38     	; 0xd18 <main+0x1d2>
     d3e:	14 c0       	rjmp	.+40     	; 0xd68 <main+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d40:	6f 81       	ldd	r22, Y+7	; 0x07
     d42:	78 85       	ldd	r23, Y+8	; 0x08
     d44:	89 85       	ldd	r24, Y+9	; 0x09
     d46:	9a 85       	ldd	r25, Y+10	; 0x0a
     d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	9e 83       	std	Y+6, r25	; 0x06
     d52:	8d 83       	std	Y+5, r24	; 0x05
     d54:	8d 81       	ldd	r24, Y+5	; 0x05
     d56:	9e 81       	ldd	r25, Y+6	; 0x06
     d58:	9a 83       	std	Y+2, r25	; 0x02
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	9a 81       	ldd	r25, Y+2	; 0x02
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	f1 f7       	brne	.-4      	; 0xd60 <main+0x21a>
     d64:	9a 83       	std	Y+2, r25	; 0x02
     d66:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
    while(1){
    	step1();
     d68:	0e 94 06 0b 	call	0x160c	; 0x160c <step1>
     d6c:	fd cf       	rjmp	.-6      	; 0xd68 <main+0x222>

00000d6e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <EEPROM_writeByte+0x6>
     d74:	00 d0       	rcall	.+0      	; 0xd76 <EEPROM_writeByte+0x8>
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	9a 83       	std	Y+2, r25	; 0x02
     d7c:	89 83       	std	Y+1, r24	; 0x01
     d7e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     d80:	0e 94 06 13 	call	0x260c	; 0x260c <TWI_start>
    if (TWI_getStatus() != TWI_START)
     d84:	0e 94 5e 13 	call	0x26bc	; 0x26bc <TWI_getStatus>
     d88:	88 30       	cpi	r24, 0x08	; 8
     d8a:	11 f0       	breq	.+4      	; 0xd90 <EEPROM_writeByte+0x22>
        return ERROR;
     d8c:	1c 82       	std	Y+4, r1	; 0x04
     d8e:	28 c0       	rjmp	.+80     	; 0xde0 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	80 70       	andi	r24, 0x00	; 0
     d96:	97 70       	andi	r25, 0x07	; 7
     d98:	88 0f       	add	r24, r24
     d9a:	89 2f       	mov	r24, r25
     d9c:	88 1f       	adc	r24, r24
     d9e:	99 0b       	sbc	r25, r25
     da0:	91 95       	neg	r25
     da2:	80 6a       	ori	r24, 0xA0	; 160
     da4:	0e 94 21 13 	call	0x2642	; 0x2642 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     da8:	0e 94 5e 13 	call	0x26bc	; 0x26bc <TWI_getStatus>
     dac:	88 31       	cpi	r24, 0x18	; 24
     dae:	11 f0       	breq	.+4      	; 0xdb4 <EEPROM_writeByte+0x46>
        return ERROR; 
     db0:	1c 82       	std	Y+4, r1	; 0x04
     db2:	16 c0       	rjmp	.+44     	; 0xde0 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	0e 94 21 13 	call	0x2642	; 0x2642 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     dba:	0e 94 5e 13 	call	0x26bc	; 0x26bc <TWI_getStatus>
     dbe:	88 32       	cpi	r24, 0x28	; 40
     dc0:	11 f0       	breq	.+4      	; 0xdc6 <EEPROM_writeByte+0x58>
        return ERROR;
     dc2:	1c 82       	std	Y+4, r1	; 0x04
     dc4:	0d c0       	rjmp	.+26     	; 0xde0 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	0e 94 21 13 	call	0x2642	; 0x2642 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     dcc:	0e 94 5e 13 	call	0x26bc	; 0x26bc <TWI_getStatus>
     dd0:	88 32       	cpi	r24, 0x28	; 40
     dd2:	11 f0       	breq	.+4      	; 0xdd8 <EEPROM_writeByte+0x6a>
        return ERROR;
     dd4:	1c 82       	std	Y+4, r1	; 0x04
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     dd8:	0e 94 16 13 	call	0x262c	; 0x262c <TWI_stop>
	
    return SUCCESS;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	8c 83       	std	Y+4, r24	; 0x04
     de0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <EEPROM_readByte+0x6>
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <EEPROM_readByte+0x8>
     df8:	0f 92       	push	r0
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	9a 83       	std	Y+2, r25	; 0x02
     e00:	89 83       	std	Y+1, r24	; 0x01
     e02:	7c 83       	std	Y+4, r23	; 0x04
     e04:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     e06:	0e 94 06 13 	call	0x260c	; 0x260c <TWI_start>
    if (TWI_getStatus() != TWI_START)
     e0a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <TWI_getStatus>
     e0e:	88 30       	cpi	r24, 0x08	; 8
     e10:	11 f0       	breq	.+4      	; 0xe16 <EEPROM_readByte+0x26>
        return ERROR;
     e12:	1d 82       	std	Y+5, r1	; 0x05
     e14:	44 c0       	rjmp	.+136    	; 0xe9e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	80 70       	andi	r24, 0x00	; 0
     e1c:	97 70       	andi	r25, 0x07	; 7
     e1e:	88 0f       	add	r24, r24
     e20:	89 2f       	mov	r24, r25
     e22:	88 1f       	adc	r24, r24
     e24:	99 0b       	sbc	r25, r25
     e26:	91 95       	neg	r25
     e28:	80 6a       	ori	r24, 0xA0	; 160
     e2a:	0e 94 21 13 	call	0x2642	; 0x2642 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     e2e:	0e 94 5e 13 	call	0x26bc	; 0x26bc <TWI_getStatus>
     e32:	88 31       	cpi	r24, 0x18	; 24
     e34:	11 f0       	breq	.+4      	; 0xe3a <EEPROM_readByte+0x4a>
        return ERROR;
     e36:	1d 82       	std	Y+5, r1	; 0x05
     e38:	32 c0       	rjmp	.+100    	; 0xe9e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	0e 94 21 13 	call	0x2642	; 0x2642 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     e40:	0e 94 5e 13 	call	0x26bc	; 0x26bc <TWI_getStatus>
     e44:	88 32       	cpi	r24, 0x28	; 40
     e46:	11 f0       	breq	.+4      	; 0xe4c <EEPROM_readByte+0x5c>
        return ERROR;
     e48:	1d 82       	std	Y+5, r1	; 0x05
     e4a:	29 c0       	rjmp	.+82     	; 0xe9e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     e4c:	0e 94 06 13 	call	0x260c	; 0x260c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     e50:	0e 94 5e 13 	call	0x26bc	; 0x26bc <TWI_getStatus>
     e54:	80 31       	cpi	r24, 0x10	; 16
     e56:	11 f0       	breq	.+4      	; 0xe5c <EEPROM_readByte+0x6c>
        return ERROR;
     e58:	1d 82       	std	Y+5, r1	; 0x05
     e5a:	21 c0       	rjmp	.+66     	; 0xe9e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	9a 81       	ldd	r25, Y+2	; 0x02
     e60:	80 70       	andi	r24, 0x00	; 0
     e62:	97 70       	andi	r25, 0x07	; 7
     e64:	88 0f       	add	r24, r24
     e66:	89 2f       	mov	r24, r25
     e68:	88 1f       	adc	r24, r24
     e6a:	99 0b       	sbc	r25, r25
     e6c:	91 95       	neg	r25
     e6e:	81 6a       	ori	r24, 0xA1	; 161
     e70:	0e 94 21 13 	call	0x2642	; 0x2642 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     e74:	0e 94 5e 13 	call	0x26bc	; 0x26bc <TWI_getStatus>
     e78:	80 34       	cpi	r24, 0x40	; 64
     e7a:	11 f0       	breq	.+4      	; 0xe80 <EEPROM_readByte+0x90>
        return ERROR;
     e7c:	1d 82       	std	Y+5, r1	; 0x05
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     e80:	0e 94 4b 13 	call	0x2696	; 0x2696 <TWI_readByteWithNACK>
     e84:	eb 81       	ldd	r30, Y+3	; 0x03
     e86:	fc 81       	ldd	r31, Y+4	; 0x04
     e88:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     e8a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <TWI_getStatus>
     e8e:	88 35       	cpi	r24, 0x58	; 88
     e90:	11 f0       	breq	.+4      	; 0xe96 <EEPROM_readByte+0xa6>
        return ERROR;
     e92:	1d 82       	std	Y+5, r1	; 0x05
     e94:	04 c0       	rjmp	.+8      	; 0xe9e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     e96:	0e 94 16 13 	call	0x262c	; 0x262c <TWI_stop>

    return SUCCESS;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	8d 83       	std	Y+5, r24	; 0x05
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <GPIO_setupPinDirection+0x6>
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <GPIO_setupPinDirection+0x8>
     eb8:	0f 92       	push	r0
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	6a 83       	std	Y+2, r22	; 0x02
     ec2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	88 30       	cpi	r24, 0x08	; 8
     ec8:	08 f0       	brcs	.+2      	; 0xecc <GPIO_setupPinDirection+0x1c>
     eca:	d5 c0       	rjmp	.+426    	; 0x1076 <GPIO_setupPinDirection+0x1c6>
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	08 f0       	brcs	.+2      	; 0xed4 <GPIO_setupPinDirection+0x24>
     ed2:	d1 c0       	rjmp	.+418    	; 0x1076 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	3d 83       	std	Y+5, r19	; 0x05
     edc:	2c 83       	std	Y+4, r18	; 0x04
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	9d 81       	ldd	r25, Y+5	; 0x05
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	91 05       	cpc	r25, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <GPIO_setupPinDirection+0x3a>
     ee8:	43 c0       	rjmp	.+134    	; 0xf70 <GPIO_setupPinDirection+0xc0>
     eea:	2c 81       	ldd	r18, Y+4	; 0x04
     eec:	3d 81       	ldd	r19, Y+5	; 0x05
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	2c f4       	brge	.+10     	; 0xefe <GPIO_setupPinDirection+0x4e>
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	9d 81       	ldd	r25, Y+5	; 0x05
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	71 f0       	breq	.+28     	; 0xf18 <GPIO_setupPinDirection+0x68>
     efc:	bc c0       	rjmp	.+376    	; 0x1076 <GPIO_setupPinDirection+0x1c6>
     efe:	2c 81       	ldd	r18, Y+4	; 0x04
     f00:	3d 81       	ldd	r19, Y+5	; 0x05
     f02:	22 30       	cpi	r18, 0x02	; 2
     f04:	31 05       	cpc	r19, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <GPIO_setupPinDirection+0x5a>
     f08:	5f c0       	rjmp	.+190    	; 0xfc8 <GPIO_setupPinDirection+0x118>
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	9d 81       	ldd	r25, Y+5	; 0x05
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	91 05       	cpc	r25, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <GPIO_setupPinDirection+0x66>
     f14:	85 c0       	rjmp	.+266    	; 0x1020 <GPIO_setupPinDirection+0x170>
     f16:	af c0       	rjmp	.+350    	; 0x1076 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	a1 f4       	brne	.+40     	; 0xf46 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f1e:	aa e3       	ldi	r26, 0x3A	; 58
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ea e3       	ldi	r30, 0x3A	; 58
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <GPIO_setupPinDirection+0x8c>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <GPIO_setupPinDirection+0x88>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	98 c0       	rjmp	.+304    	; 0x1076 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f46:	aa e3       	ldi	r26, 0x3A	; 58
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ea e3       	ldi	r30, 0x3A	; 58
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <GPIO_setupPinDirection+0xb4>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <GPIO_setupPinDirection+0xb0>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	83 c0       	rjmp	.+262    	; 0x1076 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	a1 f4       	brne	.+40     	; 0xf9e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f76:	a7 e3       	ldi	r26, 0x37	; 55
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e7 e3       	ldi	r30, 0x37	; 55
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <GPIO_setupPinDirection+0xe4>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <GPIO_setupPinDirection+0xe0>
     f98:	84 2b       	or	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	6c c0       	rjmp	.+216    	; 0x1076 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f9e:	a7 e3       	ldi	r26, 0x37	; 55
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e7 e3       	ldi	r30, 0x37	; 55
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <GPIO_setupPinDirection+0x10c>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <GPIO_setupPinDirection+0x108>
     fc0:	80 95       	com	r24
     fc2:	84 23       	and	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	57 c0       	rjmp	.+174    	; 0x1076 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	a1 f4       	brne	.+40     	; 0xff6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     fce:	a4 e3       	ldi	r26, 0x34	; 52
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e4 e3       	ldi	r30, 0x34	; 52
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <GPIO_setupPinDirection+0x13c>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <GPIO_setupPinDirection+0x138>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	40 c0       	rjmp	.+128    	; 0x1076 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     ff6:	a4 e3       	ldi	r26, 0x34	; 52
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e4 e3       	ldi	r30, 0x34	; 52
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <GPIO_setupPinDirection+0x164>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <GPIO_setupPinDirection+0x160>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	2b c0       	rjmp	.+86     	; 0x1076 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	a1 f4       	brne	.+40     	; 0x104e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1026:	a1 e3       	ldi	r26, 0x31	; 49
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e1 e3       	ldi	r30, 0x31	; 49
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <GPIO_setupPinDirection+0x194>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <GPIO_setupPinDirection+0x190>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	14 c0       	rjmp	.+40     	; 0x1076 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    104e:	a1 e3       	ldi	r26, 0x31	; 49
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e1 e3       	ldi	r30, 0x31	; 49
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_setupPinDirection+0x1bc>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <GPIO_setupPinDirection+0x1b8>
    1070:	80 95       	com	r24
    1072:	84 23       	and	r24, r20
    1074:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	00 d0       	rcall	.+0      	; 0x108c <GPIO_writePin+0x6>
    108c:	00 d0       	rcall	.+0      	; 0x108e <GPIO_writePin+0x8>
    108e:	0f 92       	push	r0
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	6a 83       	std	Y+2, r22	; 0x02
    1098:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	88 30       	cpi	r24, 0x08	; 8
    109e:	08 f0       	brcs	.+2      	; 0x10a2 <GPIO_writePin+0x1c>
    10a0:	d5 c0       	rjmp	.+426    	; 0x124c <GPIO_writePin+0x1c6>
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	84 30       	cpi	r24, 0x04	; 4
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <GPIO_writePin+0x24>
    10a8:	d1 c0       	rjmp	.+418    	; 0x124c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	3d 83       	std	Y+5, r19	; 0x05
    10b2:	2c 83       	std	Y+4, r18	; 0x04
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	9d 81       	ldd	r25, Y+5	; 0x05
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	91 05       	cpc	r25, r1
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <GPIO_writePin+0x3a>
    10be:	43 c0       	rjmp	.+134    	; 0x1146 <GPIO_writePin+0xc0>
    10c0:	2c 81       	ldd	r18, Y+4	; 0x04
    10c2:	3d 81       	ldd	r19, Y+5	; 0x05
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	31 05       	cpc	r19, r1
    10c8:	2c f4       	brge	.+10     	; 0x10d4 <GPIO_writePin+0x4e>
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	9d 81       	ldd	r25, Y+5	; 0x05
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	71 f0       	breq	.+28     	; 0x10ee <GPIO_writePin+0x68>
    10d2:	bc c0       	rjmp	.+376    	; 0x124c <GPIO_writePin+0x1c6>
    10d4:	2c 81       	ldd	r18, Y+4	; 0x04
    10d6:	3d 81       	ldd	r19, Y+5	; 0x05
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <GPIO_writePin+0x5a>
    10de:	5f c0       	rjmp	.+190    	; 0x119e <GPIO_writePin+0x118>
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	9d 81       	ldd	r25, Y+5	; 0x05
    10e4:	83 30       	cpi	r24, 0x03	; 3
    10e6:	91 05       	cpc	r25, r1
    10e8:	09 f4       	brne	.+2      	; 0x10ec <GPIO_writePin+0x66>
    10ea:	85 c0       	rjmp	.+266    	; 0x11f6 <GPIO_writePin+0x170>
    10ec:	af c0       	rjmp	.+350    	; 0x124c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	a1 f4       	brne	.+40     	; 0x111c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10f4:	ab e3       	ldi	r26, 0x3B	; 59
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	eb e3       	ldi	r30, 0x3B	; 59
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <GPIO_writePin+0x8c>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <GPIO_writePin+0x88>
    1116:	84 2b       	or	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	98 c0       	rjmp	.+304    	; 0x124c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    111c:	ab e3       	ldi	r26, 0x3B	; 59
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	eb e3       	ldi	r30, 0x3B	; 59
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <GPIO_writePin+0xb4>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <GPIO_writePin+0xb0>
    113e:	80 95       	com	r24
    1140:	84 23       	and	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	83 c0       	rjmp	.+262    	; 0x124c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	a1 f4       	brne	.+40     	; 0x1174 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    114c:	a8 e3       	ldi	r26, 0x38	; 56
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e8 e3       	ldi	r30, 0x38	; 56
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	02 2e       	mov	r0, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <GPIO_writePin+0xe4>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	0a 94       	dec	r0
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <GPIO_writePin+0xe0>
    116e:	84 2b       	or	r24, r20
    1170:	8c 93       	st	X, r24
    1172:	6c c0       	rjmp	.+216    	; 0x124c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1174:	a8 e3       	ldi	r26, 0x38	; 56
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e8 e3       	ldi	r30, 0x38	; 56
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <GPIO_writePin+0x10c>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <GPIO_writePin+0x108>
    1196:	80 95       	com	r24
    1198:	84 23       	and	r24, r20
    119a:	8c 93       	st	X, r24
    119c:	57 c0       	rjmp	.+174    	; 0x124c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	a1 f4       	brne	.+40     	; 0x11cc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    11a4:	a5 e3       	ldi	r26, 0x35	; 53
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e5 e3       	ldi	r30, 0x35	; 53
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <GPIO_writePin+0x13c>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <GPIO_writePin+0x138>
    11c6:	84 2b       	or	r24, r20
    11c8:	8c 93       	st	X, r24
    11ca:	40 c0       	rjmp	.+128    	; 0x124c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    11cc:	a5 e3       	ldi	r26, 0x35	; 53
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e5 e3       	ldi	r30, 0x35	; 53
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <GPIO_writePin+0x164>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <GPIO_writePin+0x160>
    11ee:	80 95       	com	r24
    11f0:	84 23       	and	r24, r20
    11f2:	8c 93       	st	X, r24
    11f4:	2b c0       	rjmp	.+86     	; 0x124c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	a1 f4       	brne	.+40     	; 0x1224 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11fc:	a2 e3       	ldi	r26, 0x32	; 50
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e2 e3       	ldi	r30, 0x32	; 50
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <GPIO_writePin+0x194>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <GPIO_writePin+0x190>
    121e:	84 2b       	or	r24, r20
    1220:	8c 93       	st	X, r24
    1222:	14 c0       	rjmp	.+40     	; 0x124c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1224:	a2 e3       	ldi	r26, 0x32	; 50
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e2 e3       	ldi	r30, 0x32	; 50
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <GPIO_writePin+0x1bc>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <GPIO_writePin+0x1b8>
    1246:	80 95       	com	r24
    1248:	84 23       	and	r24, r20
    124a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	00 d0       	rcall	.+0      	; 0x1262 <GPIO_readPin+0x6>
    1262:	00 d0       	rcall	.+0      	; 0x1264 <GPIO_readPin+0x8>
    1264:	0f 92       	push	r0
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	8a 83       	std	Y+2, r24	; 0x02
    126c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    126e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	88 30       	cpi	r24, 0x08	; 8
    1274:	08 f0       	brcs	.+2      	; 0x1278 <GPIO_readPin+0x1c>
    1276:	84 c0       	rjmp	.+264    	; 0x1380 <GPIO_readPin+0x124>
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	84 30       	cpi	r24, 0x04	; 4
    127c:	08 f0       	brcs	.+2      	; 0x1280 <GPIO_readPin+0x24>
    127e:	80 c0       	rjmp	.+256    	; 0x1380 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	3d 83       	std	Y+5, r19	; 0x05
    1288:	2c 83       	std	Y+4, r18	; 0x04
    128a:	4c 81       	ldd	r20, Y+4	; 0x04
    128c:	5d 81       	ldd	r21, Y+5	; 0x05
    128e:	41 30       	cpi	r20, 0x01	; 1
    1290:	51 05       	cpc	r21, r1
    1292:	79 f1       	breq	.+94     	; 0x12f2 <GPIO_readPin+0x96>
    1294:	8c 81       	ldd	r24, Y+4	; 0x04
    1296:	9d 81       	ldd	r25, Y+5	; 0x05
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	91 05       	cpc	r25, r1
    129c:	34 f4       	brge	.+12     	; 0x12aa <GPIO_readPin+0x4e>
    129e:	2c 81       	ldd	r18, Y+4	; 0x04
    12a0:	3d 81       	ldd	r19, Y+5	; 0x05
    12a2:	21 15       	cp	r18, r1
    12a4:	31 05       	cpc	r19, r1
    12a6:	69 f0       	breq	.+26     	; 0x12c2 <GPIO_readPin+0x66>
    12a8:	6b c0       	rjmp	.+214    	; 0x1380 <GPIO_readPin+0x124>
    12aa:	4c 81       	ldd	r20, Y+4	; 0x04
    12ac:	5d 81       	ldd	r21, Y+5	; 0x05
    12ae:	42 30       	cpi	r20, 0x02	; 2
    12b0:	51 05       	cpc	r21, r1
    12b2:	b9 f1       	breq	.+110    	; 0x1322 <GPIO_readPin+0xc6>
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	91 05       	cpc	r25, r1
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <GPIO_readPin+0x64>
    12be:	49 c0       	rjmp	.+146    	; 0x1352 <GPIO_readPin+0xf6>
    12c0:	5f c0       	rjmp	.+190    	; 0x1380 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    12c2:	e9 e3       	ldi	r30, 0x39	; 57
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a9 01       	movw	r20, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <GPIO_readPin+0x7e>
    12d6:	55 95       	asr	r21
    12d8:	47 95       	ror	r20
    12da:	8a 95       	dec	r24
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <GPIO_readPin+0x7a>
    12de:	ca 01       	movw	r24, r20
    12e0:	81 70       	andi	r24, 0x01	; 1
    12e2:	90 70       	andi	r25, 0x00	; 0
    12e4:	88 23       	and	r24, r24
    12e6:	19 f0       	breq	.+6      	; 0x12ee <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	49 c0       	rjmp	.+146    	; 0x1380 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12ee:	19 82       	std	Y+1, r1	; 0x01
    12f0:	47 c0       	rjmp	.+142    	; 0x1380 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12f2:	e6 e3       	ldi	r30, 0x36	; 54
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	88 2f       	mov	r24, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a9 01       	movw	r20, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <GPIO_readPin+0xae>
    1306:	55 95       	asr	r21
    1308:	47 95       	ror	r20
    130a:	8a 95       	dec	r24
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <GPIO_readPin+0xaa>
    130e:	ca 01       	movw	r24, r20
    1310:	81 70       	andi	r24, 0x01	; 1
    1312:	90 70       	andi	r25, 0x00	; 0
    1314:	88 23       	and	r24, r24
    1316:	19 f0       	breq	.+6      	; 0x131e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	31 c0       	rjmp	.+98     	; 0x1380 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    131e:	19 82       	std	Y+1, r1	; 0x01
    1320:	2f c0       	rjmp	.+94     	; 0x1380 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1322:	e3 e3       	ldi	r30, 0x33	; 51
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a9 01       	movw	r20, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <GPIO_readPin+0xde>
    1336:	55 95       	asr	r21
    1338:	47 95       	ror	r20
    133a:	8a 95       	dec	r24
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <GPIO_readPin+0xda>
    133e:	ca 01       	movw	r24, r20
    1340:	81 70       	andi	r24, 0x01	; 1
    1342:	90 70       	andi	r25, 0x00	; 0
    1344:	88 23       	and	r24, r24
    1346:	19 f0       	breq	.+6      	; 0x134e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	19 c0       	rjmp	.+50     	; 0x1380 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    134e:	19 82       	std	Y+1, r1	; 0x01
    1350:	17 c0       	rjmp	.+46     	; 0x1380 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1352:	e0 e3       	ldi	r30, 0x30	; 48
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	88 2f       	mov	r24, r24
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	a9 01       	movw	r20, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <GPIO_readPin+0x10e>
    1366:	55 95       	asr	r21
    1368:	47 95       	ror	r20
    136a:	8a 95       	dec	r24
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <GPIO_readPin+0x10a>
    136e:	ca 01       	movw	r24, r20
    1370:	81 70       	andi	r24, 0x01	; 1
    1372:	90 70       	andi	r25, 0x00	; 0
    1374:	88 23       	and	r24, r24
    1376:	19 f0       	breq	.+6      	; 0x137e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    137e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1380:	89 81       	ldd	r24, Y+1	; 0x01
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <GPIO_setupPortDirection+0x6>
    1398:	00 d0       	rcall	.+0      	; 0x139a <GPIO_setupPortDirection+0x8>
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	84 30       	cpi	r24, 0x04	; 4
    13a6:	90 f5       	brcc	.+100    	; 0x140c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	3c 83       	std	Y+4, r19	; 0x04
    13b0:	2b 83       	std	Y+3, r18	; 0x03
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	91 05       	cpc	r25, r1
    13ba:	d1 f0       	breq	.+52     	; 0x13f0 <GPIO_setupPortDirection+0x5e>
    13bc:	2b 81       	ldd	r18, Y+3	; 0x03
    13be:	3c 81       	ldd	r19, Y+4	; 0x04
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	31 05       	cpc	r19, r1
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <GPIO_setupPortDirection+0x3e>
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	61 f0       	breq	.+24     	; 0x13e6 <GPIO_setupPortDirection+0x54>
    13ce:	1e c0       	rjmp	.+60     	; 0x140c <GPIO_setupPortDirection+0x7a>
    13d0:	2b 81       	ldd	r18, Y+3	; 0x03
    13d2:	3c 81       	ldd	r19, Y+4	; 0x04
    13d4:	22 30       	cpi	r18, 0x02	; 2
    13d6:	31 05       	cpc	r19, r1
    13d8:	81 f0       	breq	.+32     	; 0x13fa <GPIO_setupPortDirection+0x68>
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	83 30       	cpi	r24, 0x03	; 3
    13e0:	91 05       	cpc	r25, r1
    13e2:	81 f0       	breq	.+32     	; 0x1404 <GPIO_setupPortDirection+0x72>
    13e4:	13 c0       	rjmp	.+38     	; 0x140c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13e6:	ea e3       	ldi	r30, 0x3A	; 58
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	80 83       	st	Z, r24
    13ee:	0e c0       	rjmp	.+28     	; 0x140c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13f0:	e7 e3       	ldi	r30, 0x37	; 55
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	80 83       	st	Z, r24
    13f8:	09 c0       	rjmp	.+18     	; 0x140c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13fa:	e4 e3       	ldi	r30, 0x34	; 52
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	80 83       	st	Z, r24
    1402:	04 c0       	rjmp	.+8      	; 0x140c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1404:	e1 e3       	ldi	r30, 0x31	; 49
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	80 83       	st	Z, r24
			break;
		}
	}
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <GPIO_writePort+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <GPIO_writePort+0x8>
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	84 30       	cpi	r24, 0x04	; 4
    142e:	90 f5       	brcc	.+100    	; 0x1494 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	3c 83       	std	Y+4, r19	; 0x04
    1438:	2b 83       	std	Y+3, r18	; 0x03
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	91 05       	cpc	r25, r1
    1442:	d1 f0       	breq	.+52     	; 0x1478 <GPIO_writePort+0x5e>
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	2c f4       	brge	.+10     	; 0x1458 <GPIO_writePort+0x3e>
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	61 f0       	breq	.+24     	; 0x146e <GPIO_writePort+0x54>
    1456:	1e c0       	rjmp	.+60     	; 0x1494 <GPIO_writePort+0x7a>
    1458:	2b 81       	ldd	r18, Y+3	; 0x03
    145a:	3c 81       	ldd	r19, Y+4	; 0x04
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	31 05       	cpc	r19, r1
    1460:	81 f0       	breq	.+32     	; 0x1482 <GPIO_writePort+0x68>
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	83 30       	cpi	r24, 0x03	; 3
    1468:	91 05       	cpc	r25, r1
    146a:	81 f0       	breq	.+32     	; 0x148c <GPIO_writePort+0x72>
    146c:	13 c0       	rjmp	.+38     	; 0x1494 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    146e:	eb e3       	ldi	r30, 0x3B	; 59
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	80 83       	st	Z, r24
    1476:	0e c0       	rjmp	.+28     	; 0x1494 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1478:	e8 e3       	ldi	r30, 0x38	; 56
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	80 83       	st	Z, r24
    1480:	09 c0       	rjmp	.+18     	; 0x1494 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1482:	e5 e3       	ldi	r30, 0x35	; 53
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	80 83       	st	Z, r24
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    148c:	e2 e3       	ldi	r30, 0x32	; 50
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	80 83       	st	Z, r24
			break;
		}
	}
}
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <GPIO_readPort+0x6>
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <GPIO_readPort+0x8>
    14aa:	cd b7       	in	r28, 0x3d	; 61
    14ac:	de b7       	in	r29, 0x3e	; 62
    14ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    14b0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	84 30       	cpi	r24, 0x04	; 4
    14b6:	90 f5       	brcc	.+100    	; 0x151c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	3c 83       	std	Y+4, r19	; 0x04
    14c0:	2b 83       	std	Y+3, r18	; 0x03
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	91 05       	cpc	r25, r1
    14ca:	d1 f0       	breq	.+52     	; 0x1500 <GPIO_readPort+0x5e>
    14cc:	2b 81       	ldd	r18, Y+3	; 0x03
    14ce:	3c 81       	ldd	r19, Y+4	; 0x04
    14d0:	22 30       	cpi	r18, 0x02	; 2
    14d2:	31 05       	cpc	r19, r1
    14d4:	2c f4       	brge	.+10     	; 0x14e0 <GPIO_readPort+0x3e>
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	61 f0       	breq	.+24     	; 0x14f6 <GPIO_readPort+0x54>
    14de:	1e c0       	rjmp	.+60     	; 0x151c <GPIO_readPort+0x7a>
    14e0:	2b 81       	ldd	r18, Y+3	; 0x03
    14e2:	3c 81       	ldd	r19, Y+4	; 0x04
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	81 f0       	breq	.+32     	; 0x150a <GPIO_readPort+0x68>
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	83 30       	cpi	r24, 0x03	; 3
    14f0:	91 05       	cpc	r25, r1
    14f2:	81 f0       	breq	.+32     	; 0x1514 <GPIO_readPort+0x72>
    14f4:	13 c0       	rjmp	.+38     	; 0x151c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    14f6:	e9 e3       	ldi	r30, 0x39	; 57
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	0e c0       	rjmp	.+28     	; 0x151c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1500:	e6 e3       	ldi	r30, 0x36	; 54
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	09 c0       	rjmp	.+18     	; 0x151c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    150a:	e3 e3       	ldi	r30, 0x33	; 51
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	04 c0       	rjmp	.+8      	; 0x151c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1514:	e0 e3       	ldi	r30, 0x30	; 48
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    151c:	89 81       	ldd	r24, Y+1	; 0x01
}
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <motor_init>:
 */

#include "motor.h"


void motor_init(){
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRB,1);
    1534:	a7 e3       	ldi	r26, 0x37	; 55
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e7 e3       	ldi	r30, 0x37	; 55
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	82 60       	ori	r24, 0x02	; 2
    1540:	8c 93       	st	X, r24
	SET_BIT(DDRB,2);
    1542:	a7 e3       	ldi	r26, 0x37	; 55
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e7 e3       	ldi	r30, 0x37	; 55
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	84 60       	ori	r24, 0x04	; 4
    154e:	8c 93       	st	X, r24
	SET_BIT(DDRB,3);
    1550:	a7 e3       	ldi	r26, 0x37	; 55
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e7 e3       	ldi	r30, 0x37	; 55
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	88 60       	ori	r24, 0x08	; 8
    155c:	8c 93       	st	X, r24

	CLEAR_BIT(PORTB,1);
    155e:	a8 e3       	ldi	r26, 0x38	; 56
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e8 e3       	ldi	r30, 0x38	; 56
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	8d 7f       	andi	r24, 0xFD	; 253
    156a:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,2);
    156c:	a8 e3       	ldi	r26, 0x38	; 56
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e8 e3       	ldi	r30, 0x38	; 56
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	8b 7f       	andi	r24, 0xFB	; 251
    1578:	8c 93       	st	X, r24
	SET_BIT(PORTB,3);
    157a:	a8 e3       	ldi	r26, 0x38	; 56
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e8 e3       	ldi	r30, 0x38	; 56
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	88 60       	ori	r24, 0x08	; 8
    1586:	8c 93       	st	X, r24
}
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <motor_CW>:

void motor_CW(){
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTB,1);
    1596:	a8 e3       	ldi	r26, 0x38	; 56
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e8 e3       	ldi	r30, 0x38	; 56
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	82 60       	ori	r24, 0x02	; 2
    15a2:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,2);
    15a4:	a8 e3       	ldi	r26, 0x38	; 56
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e8 e3       	ldi	r30, 0x38	; 56
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	8b 7f       	andi	r24, 0xFB	; 251
    15b0:	8c 93       	st	X, r24
}
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <motor_ACW>:
void motor_ACW()
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(PORTB,1);
    15c0:	a8 e3       	ldi	r26, 0x38	; 56
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e8 e3       	ldi	r30, 0x38	; 56
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8d 7f       	andi	r24, 0xFD	; 253
    15cc:	8c 93       	st	X, r24
	SET_BIT(PORTB,2);
    15ce:	a8 e3       	ldi	r26, 0x38	; 56
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e8 e3       	ldi	r30, 0x38	; 56
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	84 60       	ori	r24, 0x04	; 4
    15da:	8c 93       	st	X, r24
}
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <motor_stop>:
void motor_stop(){
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(PORTB,1);
    15ea:	a8 e3       	ldi	r26, 0x38	; 56
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e8 e3       	ldi	r30, 0x38	; 56
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	8d 7f       	andi	r24, 0xFD	; 253
    15f6:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,2);
    15f8:	a8 e3       	ldi	r26, 0x38	; 56
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e8 e3       	ldi	r30, 0x38	; 56
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8b 7f       	andi	r24, 0xFB	; 251
    1604:	8c 93       	st	X, r24
}
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <step1>:
uint8 password[5];
uint8 password2[5];
uint8 Wrong_count=0;


void step1(void){
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	6d 97       	sbiw	r28, 0x1d	; 29
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(STEP1);
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	0e 94 b9 13 	call	0x2772	; 0x2772 <UART_sendByte>
	uint8 flag=0;
    162a:	1d 8e       	std	Y+29, r1	; 0x1d
	for(uint8 i = 0 ; i < 5 ; i++){
    162c:	1c 8e       	std	Y+28, r1	; 0x1c
    162e:	0c c0       	rjmp	.+24     	; 0x1648 <step1+0x3c>
	   password[i] = UART_recieveByte();
    1630:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1632:	08 2f       	mov	r16, r24
    1634:	10 e0       	ldi	r17, 0x00	; 0
    1636:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <UART_recieveByte>
    163a:	f8 01       	movw	r30, r16
    163c:	e1 59       	subi	r30, 0x91	; 145
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	80 83       	st	Z, r24


void step1(void){
	UART_sendByte(STEP1);
	uint8 flag=0;
	for(uint8 i = 0 ; i < 5 ; i++){
    1642:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1644:	8f 5f       	subi	r24, 0xFF	; 255
    1646:	8c 8f       	std	Y+28, r24	; 0x1c
    1648:	8c 8d       	ldd	r24, Y+28	; 0x1c
    164a:	85 30       	cpi	r24, 0x05	; 5
    164c:	88 f3       	brcs	.-30     	; 0x1630 <step1+0x24>
	   password[i] = UART_recieveByte();
	}
	for(uint8 i = 0 ; i < 5 ; i++){
    164e:	1b 8e       	std	Y+27, r1	; 0x1b
    1650:	0c c0       	rjmp	.+24     	; 0x166a <step1+0x5e>
		password2[i] = UART_recieveByte();
    1652:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1654:	08 2f       	mov	r16, r24
    1656:	10 e0       	ldi	r17, 0x00	; 0
    1658:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <UART_recieveByte>
    165c:	f8 01       	movw	r30, r16
    165e:	ec 58       	subi	r30, 0x8C	; 140
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	80 83       	st	Z, r24
	UART_sendByte(STEP1);
	uint8 flag=0;
	for(uint8 i = 0 ; i < 5 ; i++){
	   password[i] = UART_recieveByte();
	}
	for(uint8 i = 0 ; i < 5 ; i++){
    1664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1666:	8f 5f       	subi	r24, 0xFF	; 255
    1668:	8b 8f       	std	Y+27, r24	; 0x1b
    166a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    166c:	85 30       	cpi	r24, 0x05	; 5
    166e:	88 f3       	brcs	.-30     	; 0x1652 <step1+0x46>
		password2[i] = UART_recieveByte();
    }
	for(uint32 i=0x00,j=0;i<=64;i+=16,j++){
    1670:	1f 8a       	std	Y+23, r1	; 0x17
    1672:	18 8e       	std	Y+24, r1	; 0x18
    1674:	19 8e       	std	Y+25, r1	; 0x19
    1676:	1a 8e       	std	Y+26, r1	; 0x1a
    1678:	1b 8a       	std	Y+19, r1	; 0x13
    167a:	1c 8a       	std	Y+20, r1	; 0x14
    167c:	1d 8a       	std	Y+21, r1	; 0x15
    167e:	1e 8a       	std	Y+22, r1	; 0x16
    1680:	2a c0       	rjmp	.+84     	; 0x16d6 <step1+0xca>
		if(password[i] != password2[i]){
    1682:	8f 89       	ldd	r24, Y+23	; 0x17
    1684:	98 8d       	ldd	r25, Y+24	; 0x18
    1686:	a9 8d       	ldd	r26, Y+25	; 0x19
    1688:	ba 8d       	ldd	r27, Y+26	; 0x1a
    168a:	fc 01       	movw	r30, r24
    168c:	e1 59       	subi	r30, 0x91	; 145
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	20 81       	ld	r18, Z
    1692:	8f 89       	ldd	r24, Y+23	; 0x17
    1694:	98 8d       	ldd	r25, Y+24	; 0x18
    1696:	a9 8d       	ldd	r26, Y+25	; 0x19
    1698:	ba 8d       	ldd	r27, Y+26	; 0x1a
    169a:	fc 01       	movw	r30, r24
    169c:	ec 58       	subi	r30, 0x8C	; 140
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	80 81       	ld	r24, Z
    16a2:	28 17       	cp	r18, r24
    16a4:	11 f0       	breq	.+4      	; 0x16aa <step1+0x9e>
			flag=1;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	8d 8f       	std	Y+29, r24	; 0x1d
	   password[i] = UART_recieveByte();
	}
	for(uint8 i = 0 ; i < 5 ; i++){
		password2[i] = UART_recieveByte();
    }
	for(uint32 i=0x00,j=0;i<=64;i+=16,j++){
    16aa:	8f 89       	ldd	r24, Y+23	; 0x17
    16ac:	98 8d       	ldd	r25, Y+24	; 0x18
    16ae:	a9 8d       	ldd	r26, Y+25	; 0x19
    16b0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    16b2:	40 96       	adiw	r24, 0x10	; 16
    16b4:	a1 1d       	adc	r26, r1
    16b6:	b1 1d       	adc	r27, r1
    16b8:	8f 8b       	std	Y+23, r24	; 0x17
    16ba:	98 8f       	std	Y+24, r25	; 0x18
    16bc:	a9 8f       	std	Y+25, r26	; 0x19
    16be:	ba 8f       	std	Y+26, r27	; 0x1a
    16c0:	8b 89       	ldd	r24, Y+19	; 0x13
    16c2:	9c 89       	ldd	r25, Y+20	; 0x14
    16c4:	ad 89       	ldd	r26, Y+21	; 0x15
    16c6:	be 89       	ldd	r27, Y+22	; 0x16
    16c8:	01 96       	adiw	r24, 0x01	; 1
    16ca:	a1 1d       	adc	r26, r1
    16cc:	b1 1d       	adc	r27, r1
    16ce:	8b 8b       	std	Y+19, r24	; 0x13
    16d0:	9c 8b       	std	Y+20, r25	; 0x14
    16d2:	ad 8b       	std	Y+21, r26	; 0x15
    16d4:	be 8b       	std	Y+22, r27	; 0x16
    16d6:	8f 89       	ldd	r24, Y+23	; 0x17
    16d8:	98 8d       	ldd	r25, Y+24	; 0x18
    16da:	a9 8d       	ldd	r26, Y+25	; 0x19
    16dc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    16de:	81 34       	cpi	r24, 0x41	; 65
    16e0:	91 05       	cpc	r25, r1
    16e2:	a1 05       	cpc	r26, r1
    16e4:	b1 05       	cpc	r27, r1
    16e6:	68 f2       	brcs	.-102    	; 0x1682 <step1+0x76>
		if(password[i] != password2[i]){
			flag=1;
		}
	}
	if(flag==0){
    16e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ea:	88 23       	and	r24, r24
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <step1+0xe4>
    16ee:	9c c0       	rjmp	.+312    	; 0x1828 <step1+0x21c>
    16f0:	8e c0       	rjmp	.+284    	; 0x180e <step1+0x202>
		for(uint32 i=i;i<5;i++){
			EEPROM_writeByte(0x000A+i, password[i]);
    16f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f4:	98 89       	ldd	r25, Y+16	; 0x10
    16f6:	9c 01       	movw	r18, r24
    16f8:	26 5f       	subi	r18, 0xF6	; 246
    16fa:	3f 4f       	sbci	r19, 0xFF	; 255
    16fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    16fe:	98 89       	ldd	r25, Y+16	; 0x10
    1700:	a9 89       	ldd	r26, Y+17	; 0x11
    1702:	ba 89       	ldd	r27, Y+18	; 0x12
    1704:	fc 01       	movw	r30, r24
    1706:	e1 59       	subi	r30, 0x91	; 145
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	40 81       	ld	r20, Z
    170c:	c9 01       	movw	r24, r18
    170e:	64 2f       	mov	r22, r20
    1710:	0e 94 b7 06 	call	0xd6e	; 0xd6e <EEPROM_writeByte>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a0 e2       	ldi	r26, 0x20	; 32
    171a:	b1 e4       	ldi	r27, 0x41	; 65
    171c:	8b 87       	std	Y+11, r24	; 0x0b
    171e:	9c 87       	std	Y+12, r25	; 0x0c
    1720:	ad 87       	std	Y+13, r26	; 0x0d
    1722:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1724:	6b 85       	ldd	r22, Y+11	; 0x0b
    1726:	7c 85       	ldd	r23, Y+12	; 0x0c
    1728:	8d 85       	ldd	r24, Y+13	; 0x0d
    172a:	9e 85       	ldd	r25, Y+14	; 0x0e
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	4a ef       	ldi	r20, 0xFA	; 250
    1732:	54 e4       	ldi	r21, 0x44	; 68
    1734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	8f 83       	std	Y+7, r24	; 0x07
    173e:	98 87       	std	Y+8, r25	; 0x08
    1740:	a9 87       	std	Y+9, r26	; 0x09
    1742:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1744:	6f 81       	ldd	r22, Y+7	; 0x07
    1746:	78 85       	ldd	r23, Y+8	; 0x08
    1748:	89 85       	ldd	r24, Y+9	; 0x09
    174a:	9a 85       	ldd	r25, Y+10	; 0x0a
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e8       	ldi	r20, 0x80	; 128
    1752:	5f e3       	ldi	r21, 0x3F	; 63
    1754:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1758:	88 23       	and	r24, r24
    175a:	2c f4       	brge	.+10     	; 0x1766 <step1+0x15a>
		__ticks = 1;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
    1764:	3f c0       	rjmp	.+126    	; 0x17e4 <step1+0x1d8>
	else if (__tmp > 65535)
    1766:	6f 81       	ldd	r22, Y+7	; 0x07
    1768:	78 85       	ldd	r23, Y+8	; 0x08
    176a:	89 85       	ldd	r24, Y+9	; 0x09
    176c:	9a 85       	ldd	r25, Y+10	; 0x0a
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	3f ef       	ldi	r19, 0xFF	; 255
    1772:	4f e7       	ldi	r20, 0x7F	; 127
    1774:	57 e4       	ldi	r21, 0x47	; 71
    1776:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    177a:	18 16       	cp	r1, r24
    177c:	4c f5       	brge	.+82     	; 0x17d0 <step1+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1780:	7c 85       	ldd	r23, Y+12	; 0x0c
    1782:	8d 85       	ldd	r24, Y+13	; 0x0d
    1784:	9e 85       	ldd	r25, Y+14	; 0x0e
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e2       	ldi	r20, 0x20	; 32
    178c:	51 e4       	ldi	r21, 0x41	; 65
    178e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	8d 83       	std	Y+5, r24	; 0x05
    17a6:	0f c0       	rjmp	.+30     	; 0x17c6 <step1+0x1ba>
    17a8:	88 ec       	ldi	r24, 0xC8	; 200
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9c 83       	std	Y+4, r25	; 0x04
    17ae:	8b 83       	std	Y+3, r24	; 0x03
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <step1+0x1a8>
    17b8:	9c 83       	std	Y+4, r25	; 0x04
    17ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	9e 83       	std	Y+6, r25	; 0x06
    17c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c6:	8d 81       	ldd	r24, Y+5	; 0x05
    17c8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	69 f7       	brne	.-38     	; 0x17a8 <step1+0x19c>
    17ce:	14 c0       	rjmp	.+40     	; 0x17f8 <step1+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d0:	6f 81       	ldd	r22, Y+7	; 0x07
    17d2:	78 85       	ldd	r23, Y+8	; 0x08
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9e 83       	std	Y+6, r25	; 0x06
    17e2:	8d 83       	std	Y+5, r24	; 0x05
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	9a 83       	std	Y+2, r25	; 0x02
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <step1+0x1e4>
    17f4:	9a 83       	std	Y+2, r25	; 0x02
    17f6:	89 83       	std	Y+1, r24	; 0x01
		if(password[i] != password2[i]){
			flag=1;
		}
	}
	if(flag==0){
		for(uint32 i=i;i<5;i++){
    17f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17fa:	98 89       	ldd	r25, Y+16	; 0x10
    17fc:	a9 89       	ldd	r26, Y+17	; 0x11
    17fe:	ba 89       	ldd	r27, Y+18	; 0x12
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	a1 1d       	adc	r26, r1
    1804:	b1 1d       	adc	r27, r1
    1806:	8f 87       	std	Y+15, r24	; 0x0f
    1808:	98 8b       	std	Y+16, r25	; 0x10
    180a:	a9 8b       	std	Y+17, r26	; 0x11
    180c:	ba 8b       	std	Y+18, r27	; 0x12
    180e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1810:	98 89       	ldd	r25, Y+16	; 0x10
    1812:	a9 89       	ldd	r26, Y+17	; 0x11
    1814:	ba 89       	ldd	r27, Y+18	; 0x12
    1816:	85 30       	cpi	r24, 0x05	; 5
    1818:	91 05       	cpc	r25, r1
    181a:	a1 05       	cpc	r26, r1
    181c:	b1 05       	cpc	r27, r1
    181e:	08 f4       	brcc	.+2      	; 0x1822 <step1+0x216>
    1820:	68 cf       	rjmp	.-304    	; 0x16f2 <step1+0xe6>
			EEPROM_writeByte(0x000A+i, password[i]);
			_delay_ms(10);
		}
		step2();
    1822:	0e 94 21 0c 	call	0x1842	; 0x1842 <step2>
    1826:	02 c0       	rjmp	.+4      	; 0x182c <step1+0x220>
	}else{
		step1();
    1828:	0e 94 06 0b 	call	0x160c	; 0x160c <step1>
	}
}
    182c:	6d 96       	adiw	r28, 0x1d	; 29
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	08 95       	ret

00001842 <step2>:
void step2(void){
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	0f 92       	push	r0
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(STEP2);
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	0e 94 b9 13 	call	0x2772	; 0x2772 <UART_sendByte>
	uint8 key=UART_recieveByte();
    1852:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <UART_recieveByte>
    1856:	89 83       	std	Y+1, r24	; 0x01
	if(key == '+'){
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	8b 32       	cpi	r24, 0x2B	; 43
    185c:	19 f4       	brne	.+6      	; 0x1864 <step2+0x22>
		step3();
    185e:	0e 94 3e 0c 	call	0x187c	; 0x187c <step3>
    1862:	08 c0       	rjmp	.+16     	; 0x1874 <step2+0x32>
	}else if(key == '-'){
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	8d 32       	cpi	r24, 0x2D	; 45
    1868:	19 f4       	brne	.+6      	; 0x1870 <step2+0x2e>
		step4();
    186a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <step4>
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <step2+0x32>
	}else{
		step2();
    1870:	0e 94 21 0c 	call	0x1842	; 0x1842 <step2>
	}
}
    1874:	0f 90       	pop	r0
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <step3>:
void step3(void){
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	ef 97       	sbiw	r28, 0x3f	; 63
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(STEP3);
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	0e 94 b9 13 	call	0x2772	; 0x2772 <UART_sendByte>
	uint8 flag=0,val=0;
    1896:	1e ae       	std	Y+62, r1	; 0x3e
    1898:	1f ae       	std	Y+63, r1	; 0x3f
    189a:	1d c0       	rjmp	.+58     	; 0x18d6 <step3+0x5a>
	for(uint32 i=i;i<5;i++){
		EEPROM_readByte(0x000A+i, &val);
    189c:	8a ad       	ldd	r24, Y+58	; 0x3a
    189e:	9b ad       	ldd	r25, Y+59	; 0x3b
    18a0:	0a 96       	adiw	r24, 0x0a	; 10
    18a2:	9e 01       	movw	r18, r28
    18a4:	21 5c       	subi	r18, 0xC1	; 193
    18a6:	3f 4f       	sbci	r19, 0xFF	; 255
    18a8:	b9 01       	movw	r22, r18
    18aa:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <EEPROM_readByte>
		password[i]=val;
    18ae:	8a ad       	ldd	r24, Y+58	; 0x3a
    18b0:	9b ad       	ldd	r25, Y+59	; 0x3b
    18b2:	ac ad       	ldd	r26, Y+60	; 0x3c
    18b4:	bd ad       	ldd	r27, Y+61	; 0x3d
    18b6:	2f ad       	ldd	r18, Y+63	; 0x3f
    18b8:	fc 01       	movw	r30, r24
    18ba:	e1 59       	subi	r30, 0x91	; 145
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	20 83       	st	Z, r18
	}
}
void step3(void){
	UART_sendByte(STEP3);
	uint8 flag=0,val=0;
	for(uint32 i=i;i<5;i++){
    18c0:	8a ad       	ldd	r24, Y+58	; 0x3a
    18c2:	9b ad       	ldd	r25, Y+59	; 0x3b
    18c4:	ac ad       	ldd	r26, Y+60	; 0x3c
    18c6:	bd ad       	ldd	r27, Y+61	; 0x3d
    18c8:	01 96       	adiw	r24, 0x01	; 1
    18ca:	a1 1d       	adc	r26, r1
    18cc:	b1 1d       	adc	r27, r1
    18ce:	8a af       	std	Y+58, r24	; 0x3a
    18d0:	9b af       	std	Y+59, r25	; 0x3b
    18d2:	ac af       	std	Y+60, r26	; 0x3c
    18d4:	bd af       	std	Y+61, r27	; 0x3d
    18d6:	8a ad       	ldd	r24, Y+58	; 0x3a
    18d8:	9b ad       	ldd	r25, Y+59	; 0x3b
    18da:	ac ad       	ldd	r26, Y+60	; 0x3c
    18dc:	bd ad       	ldd	r27, Y+61	; 0x3d
    18de:	85 30       	cpi	r24, 0x05	; 5
    18e0:	91 05       	cpc	r25, r1
    18e2:	a1 05       	cpc	r26, r1
    18e4:	b1 05       	cpc	r27, r1
    18e6:	d0 f2       	brcs	.-76     	; 0x189c <step3+0x20>
		EEPROM_readByte(0x000A+i, &val);
		password[i]=val;
	}
	for(uint8 i=0;i<5;i++){
    18e8:	19 ae       	std	Y+57, r1	; 0x39
    18ea:	12 c0       	rjmp	.+36     	; 0x1910 <step3+0x94>
		val = UART_recieveByte();
    18ec:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <UART_recieveByte>
    18f0:	8f af       	std	Y+63, r24	; 0x3f
		if(val != password[i]){
    18f2:	89 ad       	ldd	r24, Y+57	; 0x39
    18f4:	88 2f       	mov	r24, r24
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	fc 01       	movw	r30, r24
    18fa:	e1 59       	subi	r30, 0x91	; 145
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	90 81       	ld	r25, Z
    1900:	8f ad       	ldd	r24, Y+63	; 0x3f
    1902:	98 17       	cp	r25, r24
    1904:	11 f0       	breq	.+4      	; 0x190a <step3+0x8e>
			flag=1;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	8e af       	std	Y+62, r24	; 0x3e
	uint8 flag=0,val=0;
	for(uint32 i=i;i<5;i++){
		EEPROM_readByte(0x000A+i, &val);
		password[i]=val;
	}
	for(uint8 i=0;i<5;i++){
    190a:	89 ad       	ldd	r24, Y+57	; 0x39
    190c:	8f 5f       	subi	r24, 0xFF	; 255
    190e:	89 af       	std	Y+57, r24	; 0x39
    1910:	89 ad       	ldd	r24, Y+57	; 0x39
    1912:	85 30       	cpi	r24, 0x05	; 5
    1914:	58 f3       	brcs	.-42     	; 0x18ec <step3+0x70>
		val = UART_recieveByte();
		if(val != password[i]){
			flag=1;
		}
	}
	if(flag==1){
    1916:	8e ad       	ldd	r24, Y+62	; 0x3e
    1918:	81 30       	cpi	r24, 0x01	; 1
    191a:	71 f4       	brne	.+28     	; 0x1938 <step3+0xbc>
		Wrong_count++;
    191c:	80 91 68 00 	lds	r24, 0x0068
    1920:	8f 5f       	subi	r24, 0xFF	; 255
    1922:	80 93 68 00 	sts	0x0068, r24
		if(Wrong_count==3)	step5();
    1926:	80 91 68 00 	lds	r24, 0x0068
    192a:	83 30       	cpi	r24, 0x03	; 3
    192c:	11 f4       	brne	.+4      	; 0x1932 <step3+0xb6>
    192e:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <step5>
		step3();
    1932:	0e 94 3e 0c 	call	0x187c	; 0x187c <step3>
    1936:	d2 c1       	rjmp	.+932    	; 0x1cdc <step3+0x460>
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a0 e2       	ldi	r26, 0x20	; 32
    193e:	b1 e4       	ldi	r27, 0x41	; 65
    1940:	8d ab       	std	Y+53, r24	; 0x35
    1942:	9e ab       	std	Y+54, r25	; 0x36
    1944:	af ab       	std	Y+55, r26	; 0x37
    1946:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1948:	6d a9       	ldd	r22, Y+53	; 0x35
    194a:	7e a9       	ldd	r23, Y+54	; 0x36
    194c:	8f a9       	ldd	r24, Y+55	; 0x37
    194e:	98 ad       	ldd	r25, Y+56	; 0x38
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	4a ef       	ldi	r20, 0xFA	; 250
    1956:	54 e4       	ldi	r21, 0x44	; 68
    1958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	89 ab       	std	Y+49, r24	; 0x31
    1962:	9a ab       	std	Y+50, r25	; 0x32
    1964:	ab ab       	std	Y+51, r26	; 0x33
    1966:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1968:	69 a9       	ldd	r22, Y+49	; 0x31
    196a:	7a a9       	ldd	r23, Y+50	; 0x32
    196c:	8b a9       	ldd	r24, Y+51	; 0x33
    196e:	9c a9       	ldd	r25, Y+52	; 0x34
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e8       	ldi	r20, 0x80	; 128
    1976:	5f e3       	ldi	r21, 0x3F	; 63
    1978:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    197c:	88 23       	and	r24, r24
    197e:	2c f4       	brge	.+10     	; 0x198a <step3+0x10e>
		__ticks = 1;
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	98 ab       	std	Y+48, r25	; 0x30
    1986:	8f a7       	std	Y+47, r24	; 0x2f
    1988:	3f c0       	rjmp	.+126    	; 0x1a08 <step3+0x18c>
	else if (__tmp > 65535)
    198a:	69 a9       	ldd	r22, Y+49	; 0x31
    198c:	7a a9       	ldd	r23, Y+50	; 0x32
    198e:	8b a9       	ldd	r24, Y+51	; 0x33
    1990:	9c a9       	ldd	r25, Y+52	; 0x34
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	3f ef       	ldi	r19, 0xFF	; 255
    1996:	4f e7       	ldi	r20, 0x7F	; 127
    1998:	57 e4       	ldi	r21, 0x47	; 71
    199a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    199e:	18 16       	cp	r1, r24
    19a0:	4c f5       	brge	.+82     	; 0x19f4 <step3+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a2:	6d a9       	ldd	r22, Y+53	; 0x35
    19a4:	7e a9       	ldd	r23, Y+54	; 0x36
    19a6:	8f a9       	ldd	r24, Y+55	; 0x37
    19a8:	98 ad       	ldd	r25, Y+56	; 0x38
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e2       	ldi	r20, 0x20	; 32
    19b0:	51 e4       	ldi	r21, 0x41	; 65
    19b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	bc 01       	movw	r22, r24
    19bc:	cd 01       	movw	r24, r26
    19be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	98 ab       	std	Y+48, r25	; 0x30
    19c8:	8f a7       	std	Y+47, r24	; 0x2f
    19ca:	0f c0       	rjmp	.+30     	; 0x19ea <step3+0x16e>
    19cc:	88 ec       	ldi	r24, 0xC8	; 200
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	9e a7       	std	Y+46, r25	; 0x2e
    19d2:	8d a7       	std	Y+45, r24	; 0x2d
    19d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    19d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <step3+0x15c>
    19dc:	9e a7       	std	Y+46, r25	; 0x2e
    19de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19e2:	98 a9       	ldd	r25, Y+48	; 0x30
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	98 ab       	std	Y+48, r25	; 0x30
    19e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ec:	98 a9       	ldd	r25, Y+48	; 0x30
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	69 f7       	brne	.-38     	; 0x19cc <step3+0x150>
    19f2:	14 c0       	rjmp	.+40     	; 0x1a1c <step3+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f4:	69 a9       	ldd	r22, Y+49	; 0x31
    19f6:	7a a9       	ldd	r23, Y+50	; 0x32
    19f8:	8b a9       	ldd	r24, Y+51	; 0x33
    19fa:	9c a9       	ldd	r25, Y+52	; 0x34
    19fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	98 ab       	std	Y+48, r25	; 0x30
    1a06:	8f a7       	std	Y+47, r24	; 0x2f
    1a08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a0c:	9c a7       	std	Y+44, r25	; 0x2c
    1a0e:	8b a7       	std	Y+43, r24	; 0x2b
    1a10:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a12:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <step3+0x198>
    1a18:	9c a7       	std	Y+44, r25	; 0x2c
    1a1a:	8b a7       	std	Y+43, r24	; 0x2b
	}else{
		//success
		_delay_ms(10);
		motor_CW();
    1a1c:	0e 94 c7 0a 	call	0x158e	; 0x158e <motor_CW>
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e6       	ldi	r25, 0x60	; 96
    1a24:	aa e6       	ldi	r26, 0x6A	; 106
    1a26:	b6 e4       	ldi	r27, 0x46	; 70
    1a28:	8f a3       	std	Y+39, r24	; 0x27
    1a2a:	98 a7       	std	Y+40, r25	; 0x28
    1a2c:	a9 a7       	std	Y+41, r26	; 0x29
    1a2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a30:	6f a1       	ldd	r22, Y+39	; 0x27
    1a32:	78 a5       	ldd	r23, Y+40	; 0x28
    1a34:	89 a5       	ldd	r24, Y+41	; 0x29
    1a36:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	4a ef       	ldi	r20, 0xFA	; 250
    1a3e:	54 e4       	ldi	r21, 0x44	; 68
    1a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	8b a3       	std	Y+35, r24	; 0x23
    1a4a:	9c a3       	std	Y+36, r25	; 0x24
    1a4c:	ad a3       	std	Y+37, r26	; 0x25
    1a4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a50:	6b a1       	ldd	r22, Y+35	; 0x23
    1a52:	7c a1       	ldd	r23, Y+36	; 0x24
    1a54:	8d a1       	ldd	r24, Y+37	; 0x25
    1a56:	9e a1       	ldd	r25, Y+38	; 0x26
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e8       	ldi	r20, 0x80	; 128
    1a5e:	5f e3       	ldi	r21, 0x3F	; 63
    1a60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a64:	88 23       	and	r24, r24
    1a66:	2c f4       	brge	.+10     	; 0x1a72 <step3+0x1f6>
		__ticks = 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9a a3       	std	Y+34, r25	; 0x22
    1a6e:	89 a3       	std	Y+33, r24	; 0x21
    1a70:	3f c0       	rjmp	.+126    	; 0x1af0 <step3+0x274>
	else if (__tmp > 65535)
    1a72:	6b a1       	ldd	r22, Y+35	; 0x23
    1a74:	7c a1       	ldd	r23, Y+36	; 0x24
    1a76:	8d a1       	ldd	r24, Y+37	; 0x25
    1a78:	9e a1       	ldd	r25, Y+38	; 0x26
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	4f e7       	ldi	r20, 0x7F	; 127
    1a80:	57 e4       	ldi	r21, 0x47	; 71
    1a82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	4c f5       	brge	.+82     	; 0x1adc <step3+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a8c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a8e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a90:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e2       	ldi	r20, 0x20	; 32
    1a98:	51 e4       	ldi	r21, 0x41	; 65
    1a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	cd 01       	movw	r24, r26
    1aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	9a a3       	std	Y+34, r25	; 0x22
    1ab0:	89 a3       	std	Y+33, r24	; 0x21
    1ab2:	0f c0       	rjmp	.+30     	; 0x1ad2 <step3+0x256>
    1ab4:	88 ec       	ldi	r24, 0xC8	; 200
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	98 a3       	std	Y+32, r25	; 0x20
    1aba:	8f 8f       	std	Y+31, r24	; 0x1f
    1abc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1abe:	98 a1       	ldd	r25, Y+32	; 0x20
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <step3+0x244>
    1ac4:	98 a3       	std	Y+32, r25	; 0x20
    1ac6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aca:	9a a1       	ldd	r25, Y+34	; 0x22
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	9a a3       	std	Y+34, r25	; 0x22
    1ad0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	69 f7       	brne	.-38     	; 0x1ab4 <step3+0x238>
    1ada:	14 c0       	rjmp	.+40     	; 0x1b04 <step3+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1adc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ade:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	9a a3       	std	Y+34, r25	; 0x22
    1aee:	89 a3       	std	Y+33, r24	; 0x21
    1af0:	89 a1       	ldd	r24, Y+33	; 0x21
    1af2:	9a a1       	ldd	r25, Y+34	; 0x22
    1af4:	9e 8f       	std	Y+30, r25	; 0x1e
    1af6:	8d 8f       	std	Y+29, r24	; 0x1d
    1af8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1afa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <step3+0x280>
    1b00:	9e 8f       	std	Y+30, r25	; 0x1e
    1b02:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(15000);
		motor_stop();
    1b04:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <motor_stop>
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	aa ef       	ldi	r26, 0xFA	; 250
    1b0e:	b4 e4       	ldi	r27, 0x44	; 68
    1b10:	89 8f       	std	Y+25, r24	; 0x19
    1b12:	9a 8f       	std	Y+26, r25	; 0x1a
    1b14:	ab 8f       	std	Y+27, r26	; 0x1b
    1b16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	69 8d       	ldd	r22, Y+25	; 0x19
    1b1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a ef       	ldi	r20, 0xFA	; 250
    1b26:	54 e4       	ldi	r21, 0x44	; 68
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	8d 8b       	std	Y+21, r24	; 0x15
    1b32:	9e 8b       	std	Y+22, r25	; 0x16
    1b34:	af 8b       	std	Y+23, r26	; 0x17
    1b36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b38:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <step3+0x2de>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9c 8b       	std	Y+20, r25	; 0x14
    1b56:	8b 8b       	std	Y+19, r24	; 0x13
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <step3+0x35c>
	else if (__tmp > 65535)
    1b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b60:	98 8d       	ldd	r25, Y+24	; 0x18
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	4c f5       	brge	.+82     	; 0x1bc4 <step3+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	69 8d       	ldd	r22, Y+25	; 0x19
    1b74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9c 8b       	std	Y+20, r25	; 0x14
    1b98:	8b 8b       	std	Y+19, r24	; 0x13
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <step3+0x33e>
    1b9c:	88 ec       	ldi	r24, 0xC8	; 200
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9a 8b       	std	Y+18, r25	; 0x12
    1ba2:	89 8b       	std	Y+17, r24	; 0x11
    1ba4:	89 89       	ldd	r24, Y+17	; 0x11
    1ba6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <step3+0x32c>
    1bac:	9a 8b       	std	Y+18, r25	; 0x12
    1bae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	9c 8b       	std	Y+20, r25	; 0x14
    1bb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <step3+0x320>
    1bc2:	14 c0       	rjmp	.+40     	; 0x1bec <step3+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bca:	98 8d       	ldd	r25, Y+24	; 0x18
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9c 8b       	std	Y+20, r25	; 0x14
    1bd6:	8b 8b       	std	Y+19, r24	; 0x13
    1bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bda:	9c 89       	ldd	r25, Y+20	; 0x14
    1bdc:	98 8b       	std	Y+16, r25	; 0x10
    1bde:	8f 87       	std	Y+15, r24	; 0x0f
    1be0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be2:	98 89       	ldd	r25, Y+16	; 0x10
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <step3+0x368>
    1be8:	98 8b       	std	Y+16, r25	; 0x10
    1bea:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
		motor_ACW();
    1bec:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <motor_ACW>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e6       	ldi	r25, 0x60	; 96
    1bf4:	aa e6       	ldi	r26, 0x6A	; 106
    1bf6:	b6 e4       	ldi	r27, 0x46	; 70
    1bf8:	8b 87       	std	Y+11, r24	; 0x0b
    1bfa:	9c 87       	std	Y+12, r25	; 0x0c
    1bfc:	ad 87       	std	Y+13, r26	; 0x0d
    1bfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	4a ef       	ldi	r20, 0xFA	; 250
    1c0e:	54 e4       	ldi	r21, 0x44	; 68
    1c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	8f 83       	std	Y+7, r24	; 0x07
    1c1a:	98 87       	std	Y+8, r25	; 0x08
    1c1c:	a9 87       	std	Y+9, r26	; 0x09
    1c1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c20:	6f 81       	ldd	r22, Y+7	; 0x07
    1c22:	78 85       	ldd	r23, Y+8	; 0x08
    1c24:	89 85       	ldd	r24, Y+9	; 0x09
    1c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e8       	ldi	r20, 0x80	; 128
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c34:	88 23       	and	r24, r24
    1c36:	2c f4       	brge	.+10     	; 0x1c42 <step3+0x3c6>
		__ticks = 1;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9e 83       	std	Y+6, r25	; 0x06
    1c3e:	8d 83       	std	Y+5, r24	; 0x05
    1c40:	3f c0       	rjmp	.+126    	; 0x1cc0 <step3+0x444>
	else if (__tmp > 65535)
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	3f ef       	ldi	r19, 0xFF	; 255
    1c4e:	4f e7       	ldi	r20, 0x7F	; 127
    1c50:	57 e4       	ldi	r21, 0x47	; 71
    1c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c56:	18 16       	cp	r1, r24
    1c58:	4c f5       	brge	.+82     	; 0x1cac <step3+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e2       	ldi	r20, 0x20	; 32
    1c68:	51 e4       	ldi	r21, 0x41	; 65
    1c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	9e 83       	std	Y+6, r25	; 0x06
    1c80:	8d 83       	std	Y+5, r24	; 0x05
    1c82:	0f c0       	rjmp	.+30     	; 0x1ca2 <step3+0x426>
    1c84:	88 ec       	ldi	r24, 0xC8	; 200
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9c 83       	std	Y+4, r25	; 0x04
    1c8a:	8b 83       	std	Y+3, r24	; 0x03
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <step3+0x414>
    1c94:	9c 83       	std	Y+4, r25	; 0x04
    1c96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	69 f7       	brne	.-38     	; 0x1c84 <step3+0x408>
    1caa:	14 c0       	rjmp	.+40     	; 0x1cd4 <step3+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cac:	6f 81       	ldd	r22, Y+7	; 0x07
    1cae:	78 85       	ldd	r23, Y+8	; 0x08
    1cb0:	89 85       	ldd	r24, Y+9	; 0x09
    1cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	9e 83       	std	Y+6, r25	; 0x06
    1cbe:	8d 83       	std	Y+5, r24	; 0x05
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <step3+0x450>
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(15000);
		motor_stop();
    1cd4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <motor_stop>
		step2();
    1cd8:	0e 94 21 0c 	call	0x1842	; 0x1842 <step2>
	}
}
    1cdc:	ef 96       	adiw	r28, 0x3f	; 63
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <step4>:
void step4(void){
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <step4+0xa>
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <step4+0xc>
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62

	UART_sendByte(STEP4);
    1cfe:	84 e0       	ldi	r24, 0x04	; 4
    1d00:	0e 94 b9 13 	call	0x2772	; 0x2772 <UART_sendByte>
		uint8 flag=0;
    1d04:	1c 82       	std	Y+4, r1	; 0x04
		for(uint8 i = 0 ; i < 5 ; i++){
    1d06:	1b 82       	std	Y+3, r1	; 0x03
    1d08:	0c c0       	rjmp	.+24     	; 0x1d22 <step4+0x34>
		   password[i] = UART_recieveByte();
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	08 2f       	mov	r16, r24
    1d0e:	10 e0       	ldi	r17, 0x00	; 0
    1d10:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <UART_recieveByte>
    1d14:	f8 01       	movw	r30, r16
    1d16:	e1 59       	subi	r30, 0x91	; 145
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	80 83       	st	Z, r24
}
void step4(void){

	UART_sendByte(STEP4);
		uint8 flag=0;
		for(uint8 i = 0 ; i < 5 ; i++){
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	8f 5f       	subi	r24, 0xFF	; 255
    1d20:	8b 83       	std	Y+3, r24	; 0x03
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	85 30       	cpi	r24, 0x05	; 5
    1d26:	88 f3       	brcs	.-30     	; 0x1d0a <step4+0x1c>
		   password[i] = UART_recieveByte();
		}
		for(uint8 i = 0 ; i < 5 ; i++){
    1d28:	1a 82       	std	Y+2, r1	; 0x02
    1d2a:	0c c0       	rjmp	.+24     	; 0x1d44 <step4+0x56>
			password2[i] = UART_recieveByte();
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	08 2f       	mov	r16, r24
    1d30:	10 e0       	ldi	r17, 0x00	; 0
    1d32:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <UART_recieveByte>
    1d36:	f8 01       	movw	r30, r16
    1d38:	ec 58       	subi	r30, 0x8C	; 140
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 83       	st	Z, r24
	UART_sendByte(STEP4);
		uint8 flag=0;
		for(uint8 i = 0 ; i < 5 ; i++){
		   password[i] = UART_recieveByte();
		}
		for(uint8 i = 0 ; i < 5 ; i++){
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	8f 5f       	subi	r24, 0xFF	; 255
    1d42:	8a 83       	std	Y+2, r24	; 0x02
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	85 30       	cpi	r24, 0x05	; 5
    1d48:	88 f3       	brcs	.-30     	; 0x1d2c <step4+0x3e>
			password2[i] = UART_recieveByte();
	    }
		for(uint8 i = 0 ; i < 5 ; i++){
    1d4a:	19 82       	std	Y+1, r1	; 0x01
    1d4c:	15 c0       	rjmp	.+42     	; 0x1d78 <step4+0x8a>
			if(password[i] != password2[i]){
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	88 2f       	mov	r24, r24
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	fc 01       	movw	r30, r24
    1d56:	e1 59       	subi	r30, 0x91	; 145
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	20 81       	ld	r18, Z
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	88 2f       	mov	r24, r24
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	fc 01       	movw	r30, r24
    1d64:	ec 58       	subi	r30, 0x8C	; 140
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 81       	ld	r24, Z
    1d6a:	28 17       	cp	r18, r24
    1d6c:	11 f0       	breq	.+4      	; 0x1d72 <step4+0x84>
				flag=1;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	8c 83       	std	Y+4, r24	; 0x04
		   password[i] = UART_recieveByte();
		}
		for(uint8 i = 0 ; i < 5 ; i++){
			password2[i] = UART_recieveByte();
	    }
		for(uint8 i = 0 ; i < 5 ; i++){
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	8f 5f       	subi	r24, 0xFF	; 255
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	85 30       	cpi	r24, 0x05	; 5
    1d7c:	40 f3       	brcs	.-48     	; 0x1d4e <step4+0x60>
			if(password[i] != password2[i]){
				flag=1;
			}
		}
		if(flag==1){
    1d7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d80:	81 30       	cpi	r24, 0x01	; 1
    1d82:	19 f4       	brne	.+6      	; 0x1d8a <step4+0x9c>
			step1();
    1d84:	0e 94 06 0b 	call	0x160c	; 0x160c <step1>
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <step4+0xa0>
		}else{
			step2();
    1d8a:	0e 94 21 0c 	call	0x1842	; 0x1842 <step2>
		}
}
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	1f 91       	pop	r17
    1d9c:	0f 91       	pop	r16
    1d9e:	08 95       	ret

00001da0 <step5>:
void step5(void){
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	2e 97       	sbiw	r28, 0x0e	; 14
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(STEP5);
    1db4:	85 e0       	ldi	r24, 0x05	; 5
    1db6:	0e 94 b9 13 	call	0x2772	; 0x2772 <UART_sendByte>
	Buzz_On();
    1dba:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <Buzz_On>
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	9c e7       	ldi	r25, 0x7C	; 124
    1dc2:	a2 e1       	ldi	r26, 0x12	; 18
    1dc4:	b9 e4       	ldi	r27, 0x49	; 73
    1dc6:	8b 87       	std	Y+11, r24	; 0x0b
    1dc8:	9c 87       	std	Y+12, r25	; 0x0c
    1dca:	ad 87       	std	Y+13, r26	; 0x0d
    1dcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4a ef       	ldi	r20, 0xFA	; 250
    1ddc:	54 e4       	ldi	r21, 0x44	; 68
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	8f 83       	std	Y+7, r24	; 0x07
    1de8:	98 87       	std	Y+8, r25	; 0x08
    1dea:	a9 87       	std	Y+9, r26	; 0x09
    1dec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dee:	6f 81       	ldd	r22, Y+7	; 0x07
    1df0:	78 85       	ldd	r23, Y+8	; 0x08
    1df2:	89 85       	ldd	r24, Y+9	; 0x09
    1df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	2c f4       	brge	.+10     	; 0x1e10 <step5+0x70>
		__ticks = 1;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
    1e0e:	3f c0       	rjmp	.+126    	; 0x1e8e <step5+0xee>
	else if (__tmp > 65535)
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	4f e7       	ldi	r20, 0x7F	; 127
    1e1e:	57 e4       	ldi	r21, 0x47	; 71
    1e20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e24:	18 16       	cp	r1, r24
    1e26:	4c f5       	brge	.+82     	; 0x1e7a <step5+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e2       	ldi	r20, 0x20	; 32
    1e36:	51 e4       	ldi	r21, 0x41	; 65
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9e 83       	std	Y+6, r25	; 0x06
    1e4e:	8d 83       	std	Y+5, r24	; 0x05
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <step5+0xd0>
    1e52:	88 ec       	ldi	r24, 0xC8	; 200
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9c 83       	std	Y+4, r25	; 0x04
    1e58:	8b 83       	std	Y+3, r24	; 0x03
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <step5+0xbe>
    1e62:	9c 83       	std	Y+4, r25	; 0x04
    1e64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	69 f7       	brne	.-38     	; 0x1e52 <step5+0xb2>
    1e78:	14 c0       	rjmp	.+40     	; 0x1ea2 <step5+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7c:	78 85       	ldd	r23, Y+8	; 0x08
    1e7e:	89 85       	ldd	r24, Y+9	; 0x09
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	9e 83       	std	Y+6, r25	; 0x06
    1e8c:	8d 83       	std	Y+5, r24	; 0x05
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	9a 83       	std	Y+2, r25	; 0x02
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <step5+0xfa>
    1e9e:	9a 83       	std	Y+2, r25	; 0x02
    1ea0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(600000);
	Buzz_Off();
    1ea2:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <Buzz_Off>
	Wrong_count=0;
    1ea6:	10 92 68 00 	sts	0x0068, r1
	step2();
    1eaa:	0e 94 21 0c 	call	0x1842	; 0x1842 <step2>
}
    1eae:	2e 96       	adiw	r28, 0x0e	; 14
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <Buzz_Init>:

void Buzz_Init(){
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTC_ID,PIN2_ID,PIN_OUTPUT);
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	62 e0       	ldi	r22, 0x02	; 2
    1ecc:	41 e0       	ldi	r20, 0x01	; 1
    1ece:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_setupPinDirection>
}
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <Buzz_On>:

void Buzz_On(){
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_HIGH);
    1ee0:	82 e0       	ldi	r24, 0x02	; 2
    1ee2:	62 e0       	ldi	r22, 0x02	; 2
    1ee4:	41 e0       	ldi	r20, 0x01	; 1
    1ee6:	0e 94 43 08 	call	0x1086	; 0x1086 <GPIO_writePin>
}
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <Buzz_Off>:

void Buzz_Off(){
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_LOW);
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	62 e0       	ldi	r22, 0x02	; 2
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 43 08 	call	0x1086	; 0x1086 <GPIO_writePin>
}
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1f08:	1f 92       	push	r1
    1f0a:	0f 92       	push	r0
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	0f 92       	push	r0
    1f10:	11 24       	eor	r1, r1
    1f12:	2f 93       	push	r18
    1f14:	3f 93       	push	r19
    1f16:	4f 93       	push	r20
    1f18:	5f 93       	push	r21
    1f1a:	6f 93       	push	r22
    1f1c:	7f 93       	push	r23
    1f1e:	8f 93       	push	r24
    1f20:	9f 93       	push	r25
    1f22:	af 93       	push	r26
    1f24:	bf 93       	push	r27
    1f26:	ef 93       	push	r30
    1f28:	ff 93       	push	r31
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    1f32:	80 91 69 00 	lds	r24, 0x0069
    1f36:	90 91 6a 00 	lds	r25, 0x006A
    1f3a:	00 97       	sbiw	r24, 0x00	; 0
    1f3c:	29 f0       	breq	.+10     	; 0x1f48 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    1f3e:	e0 91 69 00 	lds	r30, 0x0069
    1f42:	f0 91 6a 00 	lds	r31, 0x006A
    1f46:	09 95       	icall
	}
}
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	ff 91       	pop	r31
    1f4e:	ef 91       	pop	r30
    1f50:	bf 91       	pop	r27
    1f52:	af 91       	pop	r26
    1f54:	9f 91       	pop	r25
    1f56:	8f 91       	pop	r24
    1f58:	7f 91       	pop	r23
    1f5a:	6f 91       	pop	r22
    1f5c:	5f 91       	pop	r21
    1f5e:	4f 91       	pop	r20
    1f60:	3f 91       	pop	r19
    1f62:	2f 91       	pop	r18
    1f64:	0f 90       	pop	r0
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	0f 90       	pop	r0
    1f6a:	1f 90       	pop	r1
    1f6c:	18 95       	reti

00001f6e <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    1f6e:	1f 92       	push	r1
    1f70:	0f 92       	push	r0
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	0f 92       	push	r0
    1f76:	11 24       	eor	r1, r1
    1f78:	2f 93       	push	r18
    1f7a:	3f 93       	push	r19
    1f7c:	4f 93       	push	r20
    1f7e:	5f 93       	push	r21
    1f80:	6f 93       	push	r22
    1f82:	7f 93       	push	r23
    1f84:	8f 93       	push	r24
    1f86:	9f 93       	push	r25
    1f88:	af 93       	push	r26
    1f8a:	bf 93       	push	r27
    1f8c:	ef 93       	push	r30
    1f8e:	ff 93       	push	r31
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    1f98:	80 91 69 00 	lds	r24, 0x0069
    1f9c:	90 91 6a 00 	lds	r25, 0x006A
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	29 f0       	breq	.+10     	; 0x1fae <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    1fa4:	e0 91 69 00 	lds	r30, 0x0069
    1fa8:	f0 91 6a 00 	lds	r31, 0x006A
    1fac:	09 95       	icall
	}
}
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	ff 91       	pop	r31
    1fb4:	ef 91       	pop	r30
    1fb6:	bf 91       	pop	r27
    1fb8:	af 91       	pop	r26
    1fba:	9f 91       	pop	r25
    1fbc:	8f 91       	pop	r24
    1fbe:	7f 91       	pop	r23
    1fc0:	6f 91       	pop	r22
    1fc2:	5f 91       	pop	r21
    1fc4:	4f 91       	pop	r20
    1fc6:	3f 91       	pop	r19
    1fc8:	2f 91       	pop	r18
    1fca:	0f 90       	pop	r0
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	0f 90       	pop	r0
    1fd0:	1f 90       	pop	r1
    1fd2:	18 95       	reti

00001fd4 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    1fd4:	1f 92       	push	r1
    1fd6:	0f 92       	push	r0
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	0f 92       	push	r0
    1fdc:	11 24       	eor	r1, r1
    1fde:	2f 93       	push	r18
    1fe0:	3f 93       	push	r19
    1fe2:	4f 93       	push	r20
    1fe4:	5f 93       	push	r21
    1fe6:	6f 93       	push	r22
    1fe8:	7f 93       	push	r23
    1fea:	8f 93       	push	r24
    1fec:	9f 93       	push	r25
    1fee:	af 93       	push	r26
    1ff0:	bf 93       	push	r27
    1ff2:	ef 93       	push	r30
    1ff4:	ff 93       	push	r31
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    1ffe:	80 91 6b 00 	lds	r24, 0x006B
    2002:	90 91 6c 00 	lds	r25, 0x006C
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	29 f0       	breq	.+10     	; 0x2014 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    200a:	e0 91 6b 00 	lds	r30, 0x006B
    200e:	f0 91 6c 00 	lds	r31, 0x006C
    2012:	09 95       	icall
	}
}
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	ff 91       	pop	r31
    201a:	ef 91       	pop	r30
    201c:	bf 91       	pop	r27
    201e:	af 91       	pop	r26
    2020:	9f 91       	pop	r25
    2022:	8f 91       	pop	r24
    2024:	7f 91       	pop	r23
    2026:	6f 91       	pop	r22
    2028:	5f 91       	pop	r21
    202a:	4f 91       	pop	r20
    202c:	3f 91       	pop	r19
    202e:	2f 91       	pop	r18
    2030:	0f 90       	pop	r0
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	0f 90       	pop	r0
    2036:	1f 90       	pop	r1
    2038:	18 95       	reti

0000203a <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    203a:	1f 92       	push	r1
    203c:	0f 92       	push	r0
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	0f 92       	push	r0
    2042:	11 24       	eor	r1, r1
    2044:	2f 93       	push	r18
    2046:	3f 93       	push	r19
    2048:	4f 93       	push	r20
    204a:	5f 93       	push	r21
    204c:	6f 93       	push	r22
    204e:	7f 93       	push	r23
    2050:	8f 93       	push	r24
    2052:	9f 93       	push	r25
    2054:	af 93       	push	r26
    2056:	bf 93       	push	r27
    2058:	ef 93       	push	r30
    205a:	ff 93       	push	r31
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    2064:	80 91 6b 00 	lds	r24, 0x006B
    2068:	90 91 6c 00 	lds	r25, 0x006C
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	29 f0       	breq	.+10     	; 0x207a <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    2070:	e0 91 6b 00 	lds	r30, 0x006B
    2074:	f0 91 6c 00 	lds	r31, 0x006C
    2078:	09 95       	icall
	}
}
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	ff 91       	pop	r31
    2080:	ef 91       	pop	r30
    2082:	bf 91       	pop	r27
    2084:	af 91       	pop	r26
    2086:	9f 91       	pop	r25
    2088:	8f 91       	pop	r24
    208a:	7f 91       	pop	r23
    208c:	6f 91       	pop	r22
    208e:	5f 91       	pop	r21
    2090:	4f 91       	pop	r20
    2092:	3f 91       	pop	r19
    2094:	2f 91       	pop	r18
    2096:	0f 90       	pop	r0
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	0f 90       	pop	r0
    209c:	1f 90       	pop	r1
    209e:	18 95       	reti

000020a0 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    20a0:	1f 92       	push	r1
    20a2:	0f 92       	push	r0
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	0f 92       	push	r0
    20a8:	11 24       	eor	r1, r1
    20aa:	2f 93       	push	r18
    20ac:	3f 93       	push	r19
    20ae:	4f 93       	push	r20
    20b0:	5f 93       	push	r21
    20b2:	6f 93       	push	r22
    20b4:	7f 93       	push	r23
    20b6:	8f 93       	push	r24
    20b8:	9f 93       	push	r25
    20ba:	af 93       	push	r26
    20bc:	bf 93       	push	r27
    20be:	ef 93       	push	r30
    20c0:	ff 93       	push	r31
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    20ca:	80 91 6b 00 	lds	r24, 0x006B
    20ce:	90 91 6c 00 	lds	r25, 0x006C
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	29 f0       	breq	.+10     	; 0x20e0 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    20d6:	e0 91 6b 00 	lds	r30, 0x006B
    20da:	f0 91 6c 00 	lds	r31, 0x006C
    20de:	09 95       	icall
	}
}
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	ff 91       	pop	r31
    20e6:	ef 91       	pop	r30
    20e8:	bf 91       	pop	r27
    20ea:	af 91       	pop	r26
    20ec:	9f 91       	pop	r25
    20ee:	8f 91       	pop	r24
    20f0:	7f 91       	pop	r23
    20f2:	6f 91       	pop	r22
    20f4:	5f 91       	pop	r21
    20f6:	4f 91       	pop	r20
    20f8:	3f 91       	pop	r19
    20fa:	2f 91       	pop	r18
    20fc:	0f 90       	pop	r0
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	0f 90       	pop	r0
    2102:	1f 90       	pop	r1
    2104:	18 95       	reti

00002106 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    2106:	1f 92       	push	r1
    2108:	0f 92       	push	r0
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	0f 92       	push	r0
    210e:	11 24       	eor	r1, r1
    2110:	2f 93       	push	r18
    2112:	3f 93       	push	r19
    2114:	4f 93       	push	r20
    2116:	5f 93       	push	r21
    2118:	6f 93       	push	r22
    211a:	7f 93       	push	r23
    211c:	8f 93       	push	r24
    211e:	9f 93       	push	r25
    2120:	af 93       	push	r26
    2122:	bf 93       	push	r27
    2124:	ef 93       	push	r30
    2126:	ff 93       	push	r31
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    2130:	80 91 6d 00 	lds	r24, 0x006D
    2134:	90 91 6e 00 	lds	r25, 0x006E
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	29 f0       	breq	.+10     	; 0x2146 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    213c:	e0 91 6d 00 	lds	r30, 0x006D
    2140:	f0 91 6e 00 	lds	r31, 0x006E
    2144:	09 95       	icall
	}
}
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	ff 91       	pop	r31
    214c:	ef 91       	pop	r30
    214e:	bf 91       	pop	r27
    2150:	af 91       	pop	r26
    2152:	9f 91       	pop	r25
    2154:	8f 91       	pop	r24
    2156:	7f 91       	pop	r23
    2158:	6f 91       	pop	r22
    215a:	5f 91       	pop	r21
    215c:	4f 91       	pop	r20
    215e:	3f 91       	pop	r19
    2160:	2f 91       	pop	r18
    2162:	0f 90       	pop	r0
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	0f 90       	pop	r0
    2168:	1f 90       	pop	r1
    216a:	18 95       	reti

0000216c <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    216c:	1f 92       	push	r1
    216e:	0f 92       	push	r0
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	0f 92       	push	r0
    2174:	11 24       	eor	r1, r1
    2176:	2f 93       	push	r18
    2178:	3f 93       	push	r19
    217a:	4f 93       	push	r20
    217c:	5f 93       	push	r21
    217e:	6f 93       	push	r22
    2180:	7f 93       	push	r23
    2182:	8f 93       	push	r24
    2184:	9f 93       	push	r25
    2186:	af 93       	push	r26
    2188:	bf 93       	push	r27
    218a:	ef 93       	push	r30
    218c:	ff 93       	push	r31
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    2196:	80 91 6d 00 	lds	r24, 0x006D
    219a:	90 91 6e 00 	lds	r25, 0x006E
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	29 f0       	breq	.+10     	; 0x21ac <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    21a2:	e0 91 6d 00 	lds	r30, 0x006D
    21a6:	f0 91 6e 00 	lds	r31, 0x006E
    21aa:	09 95       	icall
	}
}
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	ff 91       	pop	r31
    21b2:	ef 91       	pop	r30
    21b4:	bf 91       	pop	r27
    21b6:	af 91       	pop	r26
    21b8:	9f 91       	pop	r25
    21ba:	8f 91       	pop	r24
    21bc:	7f 91       	pop	r23
    21be:	6f 91       	pop	r22
    21c0:	5f 91       	pop	r21
    21c2:	4f 91       	pop	r20
    21c4:	3f 91       	pop	r19
    21c6:	2f 91       	pop	r18
    21c8:	0f 90       	pop	r0
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	0f 90       	pop	r0
    21ce:	1f 90       	pop	r1
    21d0:	18 95       	reti

000021d2 <TIMER0_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TIMER0_init(const Timer_ConfigType * Config_Ptr)
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <TIMER0_init+0x6>
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	9a 83       	std	Y+2, r25	; 0x02
    21de:	89 83       	std	Y+1, r24	; 0x01
	/*TCCR0 &= 0x00;
	TCNT0 &= 0x00;
	OCR0  &= 0x00;
*/
	/* non PWM Mode */
	TCCR0 = (1<<FOC0);
    21e0:	e3 e5       	ldi	r30, 0x53	; 83
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 e8       	ldi	r24, 0x80	; 128
    21e6:	80 83       	st	Z, r24
	/*set initial value */
	TCNT0 = Config_Ptr->initial;
    21e8:	a2 e5       	ldi	r26, 0x52	; 82
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e9 81       	ldd	r30, Y+1	; 0x01
    21ee:	fa 81       	ldd	r31, Y+2	; 0x02
    21f0:	84 81       	ldd	r24, Z+4	; 0x04
    21f2:	95 81       	ldd	r25, Z+5	; 0x05
    21f4:	8c 93       	st	X, r24
	/*set compare value for compare mode*/
	OCR0 = Config_Ptr->compare_value;
    21f6:	ac e5       	ldi	r26, 0x5C	; 92
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	e9 81       	ldd	r30, Y+1	; 0x01
    21fc:	fa 81       	ldd	r31, Y+2	; 0x02
    21fe:	86 81       	ldd	r24, Z+6	; 0x06
    2200:	97 81       	ldd	r25, Z+7	; 0x07
    2202:	8c 93       	st	X, r24


	if((Config_Ptr->OutputPin) == OC0){
    2204:	e9 81       	ldd	r30, Y+1	; 0x01
    2206:	fa 81       	ldd	r31, Y+2	; 0x02
    2208:	83 81       	ldd	r24, Z+3	; 0x03
    220a:	83 30       	cpi	r24, 0x03	; 3
    220c:	39 f4       	brne	.+14     	; 0x221c <TIMER0_init+0x4a>
		// configure the output pin PB3 in compare mode
		DDRB |= (1 << OC0);
    220e:	a7 e3       	ldi	r26, 0x37	; 55
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e7 e3       	ldi	r30, 0x37	; 55
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	88 60       	ori	r24, 0x08	; 8
    221a:	8c 93       	st	X, r24
	}

	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    221c:	e9 81       	ldd	r30, Y+1	; 0x01
    221e:	fa 81       	ldd	r31, Y+2	; 0x02
    2220:	81 81       	ldd	r24, Z+1	; 0x01
    2222:	88 23       	and	r24, r24
    2224:	41 f4       	brne	.+16     	; 0x2236 <TIMER0_init+0x64>
		/*Enable interrupt for overflow mode*/
		TIMSK |= (1 << TOIE0);
    2226:	a9 e5       	ldi	r26, 0x59	; 89
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e9 e5       	ldi	r30, 0x59	; 89
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	81 60       	ori	r24, 0x01	; 1
    2232:	8c 93       	st	X, r24
    2234:	0c c0       	rjmp	.+24     	; 0x224e <TIMER0_init+0x7c>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    2236:	e9 81       	ldd	r30, Y+1	; 0x01
    2238:	fa 81       	ldd	r31, Y+2	; 0x02
    223a:	81 81       	ldd	r24, Z+1	; 0x01
    223c:	81 30       	cpi	r24, 0x01	; 1
    223e:	39 f4       	brne	.+14     	; 0x224e <TIMER0_init+0x7c>
		/*Enable interrupt for compare mode*/
		TIMSK |= (1 << OCIE0);
    2240:	a9 e5       	ldi	r26, 0x59	; 89
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e9 e5       	ldi	r30, 0x59	; 89
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	82 60       	ori	r24, 0x02	; 2
    224c:	8c 93       	st	X, r24
	}

	/*configure the mode of the timer*/
	TCCR0 =  (TCCR0 & ~(0x48) ) | ( ( (Config_Ptr->mode) << WGM00) & 0x48 ) ;
    224e:	a3 e5       	ldi	r26, 0x53	; 83
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e3 e5       	ldi	r30, 0x53	; 83
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	28 2f       	mov	r18, r24
    225a:	27 7b       	andi	r18, 0xB7	; 183
    225c:	e9 81       	ldd	r30, Y+1	; 0x01
    225e:	fa 81       	ldd	r31, Y+2	; 0x02
    2260:	81 81       	ldd	r24, Z+1	; 0x01
    2262:	88 2f       	mov	r24, r24
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	00 24       	eor	r0, r0
    2268:	96 95       	lsr	r25
    226a:	87 95       	ror	r24
    226c:	07 94       	ror	r0
    226e:	96 95       	lsr	r25
    2270:	87 95       	ror	r24
    2272:	07 94       	ror	r0
    2274:	98 2f       	mov	r25, r24
    2276:	80 2d       	mov	r24, r0
    2278:	88 74       	andi	r24, 0x48	; 72
    227a:	82 2b       	or	r24, r18
    227c:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR0 = (TCCR0 & 0XCF) | ( ( (Config_Ptr->compare_output) & 0X03) << COM00 );
    227e:	a3 e5       	ldi	r26, 0x53	; 83
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	e3 e5       	ldi	r30, 0x53	; 83
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	28 2f       	mov	r18, r24
    228a:	2f 7c       	andi	r18, 0xCF	; 207
    228c:	e9 81       	ldd	r30, Y+1	; 0x01
    228e:	fa 81       	ldd	r31, Y+2	; 0x02
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	83 70       	andi	r24, 0x03	; 3
    2298:	90 70       	andi	r25, 0x00	; 0
    229a:	82 95       	swap	r24
    229c:	92 95       	swap	r25
    229e:	90 7f       	andi	r25, 0xF0	; 240
    22a0:	98 27       	eor	r25, r24
    22a2:	80 7f       	andi	r24, 0xF0	; 240
    22a4:	98 27       	eor	r25, r24
    22a6:	82 2b       	or	r24, r18
    22a8:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->clock & 0X07);
    22aa:	a3 e5       	ldi	r26, 0x53	; 83
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	e3 e5       	ldi	r30, 0x53	; 83
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	98 2f       	mov	r25, r24
    22b6:	98 7f       	andi	r25, 0xF8	; 248
    22b8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ba:	fa 81       	ldd	r31, Y+2	; 0x02
    22bc:	80 81       	ld	r24, Z
    22be:	87 70       	andi	r24, 0x07	; 7
    22c0:	89 2b       	or	r24, r25
    22c2:	8c 93       	st	X, r24
}
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <TIMER1_init>:

void TIMER1_init(const Timer_ConfigType * Config_Ptr)
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <TIMER1_init+0x6>
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	9a 83       	std	Y+2, r25	; 0x02
    22da:	89 83       	std	Y+1, r24	; 0x01
/*			TCNT1  = 0;
			OCR1A  = 0;
			OCR1B  = 0;
*/
	/*set the initial value*/
	TCNT1 = ( (Config_Ptr -> initial) );
    22dc:	ac e4       	ldi	r26, 0x4C	; 76
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e9 81       	ldd	r30, Y+1	; 0x01
    22e2:	fa 81       	ldd	r31, Y+2	; 0x02
    22e4:	84 81       	ldd	r24, Z+4	; 0x04
    22e6:	95 81       	ldd	r25, Z+5	; 0x05
    22e8:	11 96       	adiw	r26, 0x01	; 1
    22ea:	9c 93       	st	X, r25
    22ec:	8e 93       	st	-X, r24
	/*  Non PWM Mode */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    22ee:	ef e4       	ldi	r30, 0x4F	; 79
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	8c e0       	ldi	r24, 0x0C	; 12
    22f4:	80 83       	st	Z, r24
	if((Config_Ptr -> OutputPin) == OC1A){
    22f6:	e9 81       	ldd	r30, Y+1	; 0x01
    22f8:	fa 81       	ldd	r31, Y+2	; 0x02
    22fa:	83 81       	ldd	r24, Z+3	; 0x03
    22fc:	85 30       	cpi	r24, 0x05	; 5
    22fe:	41 f4       	brne	.+16     	; 0x2310 <TIMER1_init+0x42>
	// configure the output pin PD5 in compare mode
		DDRD |= (1 << OC1A);
    2300:	a1 e3       	ldi	r26, 0x31	; 49
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e1 e3       	ldi	r30, 0x31	; 49
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	80 62       	ori	r24, 0x20	; 32
    230c:	8c 93       	st	X, r24
    230e:	0c c0       	rjmp	.+24     	; 0x2328 <TIMER1_init+0x5a>
	}

	/* Check for OC1B */
	else if ((Config_Ptr -> OutputPin) == OC1B){
    2310:	e9 81       	ldd	r30, Y+1	; 0x01
    2312:	fa 81       	ldd	r31, Y+2	; 0x02
    2314:	83 81       	ldd	r24, Z+3	; 0x03
    2316:	84 30       	cpi	r24, 0x04	; 4
    2318:	39 f4       	brne	.+14     	; 0x2328 <TIMER1_init+0x5a>
		// configure the output pin PD4 in compare mode
		DDRD |= (1 << OC1B);
    231a:	a1 e3       	ldi	r26, 0x31	; 49
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e1 e3       	ldi	r30, 0x31	; 49
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	80 61       	ori	r24, 0x10	; 16
    2326:	8c 93       	st	X, r24
	}
	if( (Config_Ptr->mode ) == NORMAL_MODE)
    2328:	e9 81       	ldd	r30, Y+1	; 0x01
    232a:	fa 81       	ldd	r31, Y+2	; 0x02
    232c:	81 81       	ldd	r24, Z+1	; 0x01
    232e:	88 23       	and	r24, r24
    2330:	41 f4       	brne	.+16     	; 0x2342 <TIMER1_init+0x74>
	{
		/* Enable interrupt FOR normal mode */
		TIMSK |= (1 << TOIE1);
    2332:	a9 e5       	ldi	r26, 0x59	; 89
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e9 e5       	ldi	r30, 0x59	; 89
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	84 60       	ori	r24, 0x04	; 4
    233e:	8c 93       	st	X, r24
    2340:	56 c0       	rjmp	.+172    	; 0x23ee <TIMER1_init+0x120>
	}
	else if ((Config_Ptr->mode) == CTC_MODE_CHANNEL_A)
    2342:	e9 81       	ldd	r30, Y+1	; 0x01
    2344:	fa 81       	ldd	r31, Y+2	; 0x02
    2346:	81 81       	ldd	r24, Z+1	; 0x01
    2348:	82 30       	cpi	r24, 0x02	; 2
    234a:	41 f5       	brne	.+80     	; 0x239c <TIMER1_init+0xce>
	{
		/*set compare value for compare mode channel A*/
		OCR1A  = ((Config_Ptr->compare_value));
    234c:	aa e4       	ldi	r26, 0x4A	; 74
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e9 81       	ldd	r30, Y+1	; 0x01
    2352:	fa 81       	ldd	r31, Y+2	; 0x02
    2354:	86 81       	ldd	r24, Z+6	; 0x06
    2356:	97 81       	ldd	r25, Z+7	; 0x07
    2358:	11 96       	adiw	r26, 0x01	; 1
    235a:	9c 93       	st	X, r25
    235c:	8e 93       	st	-X, r24
		/* Enable interrupt for compare mode channel A */
		TIMSK |= (1 << OCIE1A);
    235e:	a9 e5       	ldi	r26, 0x59	; 89
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e9 e5       	ldi	r30, 0x59	; 89
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	80 61       	ori	r24, 0x10	; 16
    236a:	8c 93       	st	X, r24
		/* Choose the operation that should be done in compare match occurs in channel A */
		TCCR1A = ( (TCCR1A & 0x3F) | ( (Config_Ptr -> compare_output) << COM1A0) );
    236c:	af e4       	ldi	r26, 0x4F	; 79
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	ef e4       	ldi	r30, 0x4F	; 79
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	28 2f       	mov	r18, r24
    2378:	2f 73       	andi	r18, 0x3F	; 63
    237a:	e9 81       	ldd	r30, Y+1	; 0x01
    237c:	fa 81       	ldd	r31, Y+2	; 0x02
    237e:	82 81       	ldd	r24, Z+2	; 0x02
    2380:	88 2f       	mov	r24, r24
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	00 24       	eor	r0, r0
    2386:	96 95       	lsr	r25
    2388:	87 95       	ror	r24
    238a:	07 94       	ror	r0
    238c:	96 95       	lsr	r25
    238e:	87 95       	ror	r24
    2390:	07 94       	ror	r0
    2392:	98 2f       	mov	r25, r24
    2394:	80 2d       	mov	r24, r0
    2396:	82 2b       	or	r24, r18
    2398:	8c 93       	st	X, r24
    239a:	29 c0       	rjmp	.+82     	; 0x23ee <TIMER1_init+0x120>
	}

	else if ( (Config_Ptr->mode) == CTC_MODE_CHANNEL_B){
    239c:	e9 81       	ldd	r30, Y+1	; 0x01
    239e:	fa 81       	ldd	r31, Y+2	; 0x02
    23a0:	81 81       	ldd	r24, Z+1	; 0x01
    23a2:	83 30       	cpi	r24, 0x03	; 3
    23a4:	21 f5       	brne	.+72     	; 0x23ee <TIMER1_init+0x120>
		/*set compare value for compare mode channel B*/
		OCR1B  = ((Config_Ptr -> compare_value));
    23a6:	a8 e4       	ldi	r26, 0x48	; 72
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e9 81       	ldd	r30, Y+1	; 0x01
    23ac:	fa 81       	ldd	r31, Y+2	; 0x02
    23ae:	86 81       	ldd	r24, Z+6	; 0x06
    23b0:	97 81       	ldd	r25, Z+7	; 0x07
    23b2:	11 96       	adiw	r26, 0x01	; 1
    23b4:	9c 93       	st	X, r25
    23b6:	8e 93       	st	-X, r24

		/* Enable interrupt for compare mode channel B */
		TIMSK |= (1 << OCIE1B);
    23b8:	a9 e5       	ldi	r26, 0x59	; 89
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	e9 e5       	ldi	r30, 0x59	; 89
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	88 60       	ori	r24, 0x08	; 8
    23c4:	8c 93       	st	X, r24
		/* Choose the operation that should be done in compare match occurs in channel B */
		TCCR1A = ( (TCCR1A & 0xCF) | ( (Config_Ptr -> compare_output) << COM1B0) );
    23c6:	af e4       	ldi	r26, 0x4F	; 79
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	ef e4       	ldi	r30, 0x4F	; 79
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	28 2f       	mov	r18, r24
    23d2:	2f 7c       	andi	r18, 0xCF	; 207
    23d4:	e9 81       	ldd	r30, Y+1	; 0x01
    23d6:	fa 81       	ldd	r31, Y+2	; 0x02
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	82 95       	swap	r24
    23e0:	92 95       	swap	r25
    23e2:	90 7f       	andi	r25, 0xF0	; 240
    23e4:	98 27       	eor	r25, r24
    23e6:	80 7f       	andi	r24, 0xF0	; 240
    23e8:	98 27       	eor	r25, r24
    23ea:	82 2b       	or	r24, r18
    23ec:	8c 93       	st	X, r24

	}

	/*configure the mode of the timer*/
	TCCR1B = ( ( TCCR1B & 0xE7 ) |  ( ( (Config_Ptr -> mode) >> 1) << WGM12)  );
    23ee:	ae e4       	ldi	r26, 0x4E	; 78
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	ee e4       	ldi	r30, 0x4E	; 78
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	28 2f       	mov	r18, r24
    23fa:	27 7e       	andi	r18, 0xE7	; 231
    23fc:	e9 81       	ldd	r30, Y+1	; 0x01
    23fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2400:	81 81       	ldd	r24, Z+1	; 0x01
    2402:	86 95       	lsr	r24
    2404:	88 2f       	mov	r24, r24
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	82 2b       	or	r24, r18
    2416:	8c 93       	st	X, r24
		/* choose the timer clock (F_CPU / prescaler)*/
	TCCR1B = ( ( TCCR1B & 0xF8 ) | (Config_Ptr -> clock) );
    2418:	ae e4       	ldi	r26, 0x4E	; 78
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	ee e4       	ldi	r30, 0x4E	; 78
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	98 2f       	mov	r25, r24
    2424:	98 7f       	andi	r25, 0xF8	; 248
    2426:	e9 81       	ldd	r30, Y+1	; 0x01
    2428:	fa 81       	ldd	r31, Y+2	; 0x02
    242a:	80 81       	ld	r24, Z
    242c:	89 2b       	or	r24, r25
    242e:	8c 93       	st	X, r24
}
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <TIMER2_init>:

void TIMER2_init(const Timer_ConfigType * Config_Ptr)
{
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	00 d0       	rcall	.+0      	; 0x2440 <TIMER2_init+0x6>
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	9a 83       	std	Y+2, r25	; 0x02
    2446:	89 83       	std	Y+1, r24	; 0x01
	/* Clear Registers before do anything */
/*	TCCR2 &= 0x00;
	TCNT2 &= 0x00;
*/
	/*set the initail value of the timer*/
	TCNT2 = Config_Ptr->initial;
    2448:	a4 e4       	ldi	r26, 0x44	; 68
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e9 81       	ldd	r30, Y+1	; 0x01
    244e:	fa 81       	ldd	r31, Y+2	; 0x02
    2450:	84 81       	ldd	r24, Z+4	; 0x04
    2452:	95 81       	ldd	r25, Z+5	; 0x05
    2454:	8c 93       	st	X, r24
	/*set the compare value of the compare mode timer*/
	OCR2 = Config_Ptr->compare_value;
    2456:	a3 e4       	ldi	r26, 0x43	; 67
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e9 81       	ldd	r30, Y+1	; 0x01
    245c:	fa 81       	ldd	r31, Y+2	; 0x02
    245e:	86 81       	ldd	r24, Z+6	; 0x06
    2460:	97 81       	ldd	r25, Z+7	; 0x07
    2462:	8c 93       	st	X, r24
	/*non PWM mode*/
	TCCR2 = (1<<FOC2);
    2464:	e5 e4       	ldi	r30, 0x45	; 69
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 e8       	ldi	r24, 0x80	; 128
    246a:	80 83       	st	Z, r24

	/* Check which timer mode is chosen */
	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    246c:	e9 81       	ldd	r30, Y+1	; 0x01
    246e:	fa 81       	ldd	r31, Y+2	; 0x02
    2470:	81 81       	ldd	r24, Z+1	; 0x01
    2472:	88 23       	and	r24, r24
    2474:	41 f4       	brne	.+16     	; 0x2486 <TIMER2_init+0x4c>
	/*	Enable interrupt for normal mode */
		TIMSK |= (1 << TOIE2);
    2476:	a9 e5       	ldi	r26, 0x59	; 89
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	e9 e5       	ldi	r30, 0x59	; 89
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	80 64       	ori	r24, 0x40	; 64
    2482:	8c 93       	st	X, r24
    2484:	0c c0       	rjmp	.+24     	; 0x249e <TIMER2_init+0x64>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    2486:	e9 81       	ldd	r30, Y+1	; 0x01
    2488:	fa 81       	ldd	r31, Y+2	; 0x02
    248a:	81 81       	ldd	r24, Z+1	; 0x01
    248c:	81 30       	cpi	r24, 0x01	; 1
    248e:	39 f4       	brne	.+14     	; 0x249e <TIMER2_init+0x64>

		/*	 Enable interrupt for compare mode */
		TIMSK |= (1 << OCIE2);
    2490:	a9 e5       	ldi	r26, 0x59	; 89
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e9 e5       	ldi	r30, 0x59	; 89
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	80 68       	ori	r24, 0x80	; 128
    249c:	8c 93       	st	X, r24
	}
	/*configure the mode of the timer*/
	TCCR2 = (TCCR2 & 0XB7) | ((Config_Ptr->mode & 0X48)<< WGM20);
    249e:	a5 e4       	ldi	r26, 0x45	; 69
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e5 e4       	ldi	r30, 0x45	; 69
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	28 2f       	mov	r18, r24
    24aa:	27 7b       	andi	r18, 0xB7	; 183
    24ac:	e9 81       	ldd	r30, Y+1	; 0x01
    24ae:	fa 81       	ldd	r31, Y+2	; 0x02
    24b0:	81 81       	ldd	r24, Z+1	; 0x01
    24b2:	88 2f       	mov	r24, r24
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	88 74       	andi	r24, 0x48	; 72
    24b8:	90 70       	andi	r25, 0x00	; 0
    24ba:	00 24       	eor	r0, r0
    24bc:	96 95       	lsr	r25
    24be:	87 95       	ror	r24
    24c0:	07 94       	ror	r0
    24c2:	96 95       	lsr	r25
    24c4:	87 95       	ror	r24
    24c6:	07 94       	ror	r0
    24c8:	98 2f       	mov	r25, r24
    24ca:	80 2d       	mov	r24, r0
    24cc:	82 2b       	or	r24, r18
    24ce:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR2 = (TCCR2 & 0XCF) | ((Config_Ptr->compare_output & 0X03)<<COM20);
    24d0:	a5 e4       	ldi	r26, 0x45	; 69
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e5 e4       	ldi	r30, 0x45	; 69
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	28 2f       	mov	r18, r24
    24dc:	2f 7c       	andi	r18, 0xCF	; 207
    24de:	e9 81       	ldd	r30, Y+1	; 0x01
    24e0:	fa 81       	ldd	r31, Y+2	; 0x02
    24e2:	82 81       	ldd	r24, Z+2	; 0x02
    24e4:	88 2f       	mov	r24, r24
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	83 70       	andi	r24, 0x03	; 3
    24ea:	90 70       	andi	r25, 0x00	; 0
    24ec:	82 95       	swap	r24
    24ee:	92 95       	swap	r25
    24f0:	90 7f       	andi	r25, 0xF0	; 240
    24f2:	98 27       	eor	r25, r24
    24f4:	80 7f       	andi	r24, 0xF0	; 240
    24f6:	98 27       	eor	r25, r24
    24f8:	82 2b       	or	r24, r18
    24fa:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->clock & 0X07);
    24fc:	a5 e4       	ldi	r26, 0x45	; 69
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	e5 e4       	ldi	r30, 0x45	; 69
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	98 2f       	mov	r25, r24
    2508:	98 7f       	andi	r25, 0xF8	; 248
    250a:	e9 81       	ldd	r30, Y+1	; 0x01
    250c:	fa 81       	ldd	r31, Y+2	; 0x02
    250e:	80 81       	ld	r24, Z
    2510:	87 70       	andi	r24, 0x07	; 7
    2512:	89 2b       	or	r24, r25
    2514:	8c 93       	st	X, r24
}
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <Timer0_Stop>:

void Timer0_Stop()
{
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000; // stop the clock
    2528:	a3 e5       	ldi	r26, 0x53	; 83
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	e3 e5       	ldi	r30, 0x53	; 83
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	88 7f       	andi	r24, 0xF8	; 248
    2534:	8c 93       	st	X, r24
}
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <Timer1_Stop>:

void Timer1_Stop(){
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000; // stop the clock
    2544:	ae e4       	ldi	r26, 0x4E	; 78
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	ee e4       	ldi	r30, 0x4E	; 78
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	88 7f       	andi	r24, 0xF8	; 248
    2550:	8c 93       	st	X, r24
}
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <Timer2_Stop>:

void Timer2_Stop(){
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0b11111000; // stop the clock
    2560:	a5 e4       	ldi	r26, 0x45	; 69
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e5 e4       	ldi	r30, 0x45	; 69
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	88 7f       	andi	r24, 0xF8	; 248
    256c:	8c 93       	st	X, r24
}
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <Timer0_setCallBack>:



void Timer0_setCallBack(void(*a_ptr)(void))
{
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	00 d0       	rcall	.+0      	; 0x257a <Timer0_setCallBack+0x6>
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer0_callBackPtr = a_ptr;
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	9a 81       	ldd	r25, Y+2	; 0x02
    2586:	90 93 6a 00 	sts	0x006A, r25
    258a:	80 93 69 00 	sts	0x0069, r24
}
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	00 d0       	rcall	.+0      	; 0x259e <Timer1_setCallBack+0x6>
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	9a 83       	std	Y+2, r25	; 0x02
    25a4:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer1_callBackPtr = a_ptr;
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	90 93 6c 00 	sts	0x006C, r25
    25ae:	80 93 6b 00 	sts	0x006B, r24
}
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	08 95       	ret

000025bc <Timer2_setCallBack>:
void Timer2_setCallBack(void(*a_ptr)(void))
{
    25bc:	df 93       	push	r29
    25be:	cf 93       	push	r28
    25c0:	00 d0       	rcall	.+0      	; 0x25c2 <Timer2_setCallBack+0x6>
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	9a 83       	std	Y+2, r25	; 0x02
    25c8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer2_callBackPtr = a_ptr;
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	9a 81       	ldd	r25, Y+2	; 0x02
    25ce:	90 93 6e 00 	sts	0x006E, r25
    25d2:	80 93 6d 00 	sts	0x006D, r24
}
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	cf 91       	pop	r28
    25dc:	df 91       	pop	r29
    25de:	08 95       	ret

000025e0 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    25e8:	e0 e2       	ldi	r30, 0x20	; 32
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	82 e0       	ldi	r24, 0x02	; 2
    25ee:	80 83       	st	Z, r24
	TWSR = 0x00;
    25f0:	e1 e2       	ldi	r30, 0x21	; 33
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    25f6:	e2 e2       	ldi	r30, 0x22	; 34
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    25fe:	e6 e5       	ldi	r30, 0x56	; 86
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	84 e0       	ldi	r24, 0x04	; 4
    2604:	80 83       	st	Z, r24
}
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <TWI_start>:

void TWI_start(void)
{
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2614:	e6 e5       	ldi	r30, 0x56	; 86
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	84 ea       	ldi	r24, 0xA4	; 164
    261a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    261c:	e6 e5       	ldi	r30, 0x56	; 86
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	88 23       	and	r24, r24
    2624:	dc f7       	brge	.-10     	; 0x261c <TWI_start+0x10>
}
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <TWI_stop>:

void TWI_stop(void)
{
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2634:	e6 e5       	ldi	r30, 0x56	; 86
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	84 e9       	ldi	r24, 0x94	; 148
    263a:	80 83       	st	Z, r24
}
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	0f 92       	push	r0
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    264e:	e3 e2       	ldi	r30, 0x23	; 35
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2656:	e6 e5       	ldi	r30, 0x56	; 86
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	84 e8       	ldi	r24, 0x84	; 132
    265c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    265e:	e6 e5       	ldi	r30, 0x56	; 86
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	88 23       	and	r24, r24
    2666:	dc f7       	brge	.-10     	; 0x265e <TWI_writeByte+0x1c>
}
    2668:	0f 90       	pop	r0
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2678:	e6 e5       	ldi	r30, 0x56	; 86
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	84 ec       	ldi	r24, 0xC4	; 196
    267e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2680:	e6 e5       	ldi	r30, 0x56	; 86
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	88 23       	and	r24, r24
    2688:	dc f7       	brge	.-10     	; 0x2680 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    268a:	e3 e2       	ldi	r30, 0x23	; 35
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
}
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    269e:	e6 e5       	ldi	r30, 0x56	; 86
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	84 e8       	ldi	r24, 0x84	; 132
    26a4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26a6:	e6 e5       	ldi	r30, 0x56	; 86
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	88 23       	and	r24, r24
    26ae:	dc f7       	brge	.-10     	; 0x26a6 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    26b0:	e3 e2       	ldi	r30, 0x23	; 35
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
}
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	0f 92       	push	r0
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    26c6:	e1 e2       	ldi	r30, 0x21	; 33
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	88 7f       	andi	r24, 0xF8	; 248
    26ce:	89 83       	std	Y+1, r24	; 0x01
    return status;
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    26d2:	0f 90       	pop	r0
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <UART_init+0x6>
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <UART_init+0x8>
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <UART_init+0xa>
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	6b 83       	std	Y+3, r22	; 0x03
    26ea:	7c 83       	std	Y+4, r23	; 0x04
    26ec:	8d 83       	std	Y+5, r24	; 0x05
    26ee:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    26f0:	1a 82       	std	Y+2, r1	; 0x02
    26f2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    26f4:	eb e2       	ldi	r30, 0x2B	; 43
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    26fc:	ea e2       	ldi	r30, 0x2A	; 42
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	88 e1       	ldi	r24, 0x18	; 24
    2702:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2704:	e0 e4       	ldi	r30, 0x40	; 64
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	86 e8       	ldi	r24, 0x86	; 134
    270a:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	9c 81       	ldd	r25, Y+4	; 0x04
    2710:	ad 81       	ldd	r26, Y+5	; 0x05
    2712:	be 81       	ldd	r27, Y+6	; 0x06
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	aa 1f       	adc	r26, r26
    271a:	bb 1f       	adc	r27, r27
    271c:	88 0f       	add	r24, r24
    271e:	99 1f       	adc	r25, r25
    2720:	aa 1f       	adc	r26, r26
    2722:	bb 1f       	adc	r27, r27
    2724:	88 0f       	add	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	aa 1f       	adc	r26, r26
    272a:	bb 1f       	adc	r27, r27
    272c:	9c 01       	movw	r18, r24
    272e:	ad 01       	movw	r20, r26
    2730:	80 e4       	ldi	r24, 0x40	; 64
    2732:	92 e4       	ldi	r25, 0x42	; 66
    2734:	af e0       	ldi	r26, 0x0F	; 15
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	bc 01       	movw	r22, r24
    273a:	cd 01       	movw	r24, r26
    273c:	0e 94 4b 14 	call	0x2896	; 0x2896 <__udivmodsi4>
    2740:	da 01       	movw	r26, r20
    2742:	c9 01       	movw	r24, r18
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	9a 83       	std	Y+2, r25	; 0x02
    2748:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    274a:	e0 e4       	ldi	r30, 0x40	; 64
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	9a 81       	ldd	r25, Y+2	; 0x02
    2752:	89 2f       	mov	r24, r25
    2754:	99 27       	eor	r25, r25
    2756:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2758:	e9 e2       	ldi	r30, 0x29	; 41
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	80 83       	st	Z, r24
}
    2760:	26 96       	adiw	r28, 0x06	; 6
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	f8 94       	cli
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	cd bf       	out	0x3d, r28	; 61
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	08 95       	ret

00002772 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2772:	df 93       	push	r29
    2774:	cf 93       	push	r28
    2776:	0f 92       	push	r0
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    277e:	eb e2       	ldi	r30, 0x2B	; 43
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	88 2f       	mov	r24, r24
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	80 72       	andi	r24, 0x20	; 32
    278a:	90 70       	andi	r25, 0x00	; 0
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	b9 f3       	breq	.-18     	; 0x277e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2790:	ec e2       	ldi	r30, 0x2C	; 44
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2798:	0f 90       	pop	r0
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	08 95       	ret

000027a0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    27a8:	eb e2       	ldi	r30, 0x2B	; 43
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	88 23       	and	r24, r24
    27b0:	dc f7       	brge	.-10     	; 0x27a8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    27b2:	ec e2       	ldi	r30, 0x2C	; 44
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
}
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	08 95       	ret

000027be <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    27be:	df 93       	push	r29
    27c0:	cf 93       	push	r28
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <UART_sendString+0x6>
    27c4:	0f 92       	push	r0
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	9b 83       	std	Y+3, r25	; 0x03
    27cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27ce:	19 82       	std	Y+1, r1	; 0x01
    27d0:	0e c0       	rjmp	.+28     	; 0x27ee <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	8a 81       	ldd	r24, Y+2	; 0x02
    27da:	9b 81       	ldd	r25, Y+3	; 0x03
    27dc:	fc 01       	movw	r30, r24
    27de:	e2 0f       	add	r30, r18
    27e0:	f3 1f       	adc	r31, r19
    27e2:	80 81       	ld	r24, Z
    27e4:	0e 94 b9 13 	call	0x2772	; 0x2772 <UART_sendByte>
		i++;
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	8f 5f       	subi	r24, 0xFF	; 255
    27ec:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	28 2f       	mov	r18, r24
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	9b 81       	ldd	r25, Y+3	; 0x03
    27f8:	fc 01       	movw	r30, r24
    27fa:	e2 0f       	add	r30, r18
    27fc:	f3 1f       	adc	r31, r19
    27fe:	80 81       	ld	r24, Z
    2800:	88 23       	and	r24, r24
    2802:	39 f7       	brne	.-50     	; 0x27d2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	00 d0       	rcall	.+0      	; 0x281a <UART_receiveString+0xa>
    281a:	0f 92       	push	r0
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	9b 83       	std	Y+3, r25	; 0x03
    2822:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2824:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	28 2f       	mov	r18, r24
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	8a 81       	ldd	r24, Y+2	; 0x02
    282e:	9b 81       	ldd	r25, Y+3	; 0x03
    2830:	8c 01       	movw	r16, r24
    2832:	02 0f       	add	r16, r18
    2834:	13 1f       	adc	r17, r19
    2836:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <UART_recieveByte>
    283a:	f8 01       	movw	r30, r16
    283c:	80 83       	st	Z, r24
    283e:	0f c0       	rjmp	.+30     	; 0x285e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	8f 5f       	subi	r24, 0xFF	; 255
    2844:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	8a 81       	ldd	r24, Y+2	; 0x02
    284e:	9b 81       	ldd	r25, Y+3	; 0x03
    2850:	8c 01       	movw	r16, r24
    2852:	02 0f       	add	r16, r18
    2854:	13 1f       	adc	r17, r19
    2856:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <UART_recieveByte>
    285a:	f8 01       	movw	r30, r16
    285c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	28 2f       	mov	r18, r24
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	9b 81       	ldd	r25, Y+3	; 0x03
    2868:	fc 01       	movw	r30, r24
    286a:	e2 0f       	add	r30, r18
    286c:	f3 1f       	adc	r31, r19
    286e:	80 81       	ld	r24, Z
    2870:	83 32       	cpi	r24, 0x23	; 35
    2872:	31 f7       	brne	.-52     	; 0x2840 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	28 2f       	mov	r18, r24
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	9b 81       	ldd	r25, Y+3	; 0x03
    287e:	fc 01       	movw	r30, r24
    2880:	e2 0f       	add	r30, r18
    2882:	f3 1f       	adc	r31, r19
    2884:	10 82       	st	Z, r1
}
    2886:	0f 90       	pop	r0
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	1f 91       	pop	r17
    2892:	0f 91       	pop	r16
    2894:	08 95       	ret

00002896 <__udivmodsi4>:
    2896:	a1 e2       	ldi	r26, 0x21	; 33
    2898:	1a 2e       	mov	r1, r26
    289a:	aa 1b       	sub	r26, r26
    289c:	bb 1b       	sub	r27, r27
    289e:	fd 01       	movw	r30, r26
    28a0:	0d c0       	rjmp	.+26     	; 0x28bc <__udivmodsi4_ep>

000028a2 <__udivmodsi4_loop>:
    28a2:	aa 1f       	adc	r26, r26
    28a4:	bb 1f       	adc	r27, r27
    28a6:	ee 1f       	adc	r30, r30
    28a8:	ff 1f       	adc	r31, r31
    28aa:	a2 17       	cp	r26, r18
    28ac:	b3 07       	cpc	r27, r19
    28ae:	e4 07       	cpc	r30, r20
    28b0:	f5 07       	cpc	r31, r21
    28b2:	20 f0       	brcs	.+8      	; 0x28bc <__udivmodsi4_ep>
    28b4:	a2 1b       	sub	r26, r18
    28b6:	b3 0b       	sbc	r27, r19
    28b8:	e4 0b       	sbc	r30, r20
    28ba:	f5 0b       	sbc	r31, r21

000028bc <__udivmodsi4_ep>:
    28bc:	66 1f       	adc	r22, r22
    28be:	77 1f       	adc	r23, r23
    28c0:	88 1f       	adc	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	1a 94       	dec	r1
    28c6:	69 f7       	brne	.-38     	; 0x28a2 <__udivmodsi4_loop>
    28c8:	60 95       	com	r22
    28ca:	70 95       	com	r23
    28cc:	80 95       	com	r24
    28ce:	90 95       	com	r25
    28d0:	9b 01       	movw	r18, r22
    28d2:	ac 01       	movw	r20, r24
    28d4:	bd 01       	movw	r22, r26
    28d6:	cf 01       	movw	r24, r30
    28d8:	08 95       	ret

000028da <__prologue_saves__>:
    28da:	2f 92       	push	r2
    28dc:	3f 92       	push	r3
    28de:	4f 92       	push	r4
    28e0:	5f 92       	push	r5
    28e2:	6f 92       	push	r6
    28e4:	7f 92       	push	r7
    28e6:	8f 92       	push	r8
    28e8:	9f 92       	push	r9
    28ea:	af 92       	push	r10
    28ec:	bf 92       	push	r11
    28ee:	cf 92       	push	r12
    28f0:	df 92       	push	r13
    28f2:	ef 92       	push	r14
    28f4:	ff 92       	push	r15
    28f6:	0f 93       	push	r16
    28f8:	1f 93       	push	r17
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	ca 1b       	sub	r28, r26
    2904:	db 0b       	sbc	r29, r27
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	09 94       	ijmp

00002912 <__epilogue_restores__>:
    2912:	2a 88       	ldd	r2, Y+18	; 0x12
    2914:	39 88       	ldd	r3, Y+17	; 0x11
    2916:	48 88       	ldd	r4, Y+16	; 0x10
    2918:	5f 84       	ldd	r5, Y+15	; 0x0f
    291a:	6e 84       	ldd	r6, Y+14	; 0x0e
    291c:	7d 84       	ldd	r7, Y+13	; 0x0d
    291e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2920:	9b 84       	ldd	r9, Y+11	; 0x0b
    2922:	aa 84       	ldd	r10, Y+10	; 0x0a
    2924:	b9 84       	ldd	r11, Y+9	; 0x09
    2926:	c8 84       	ldd	r12, Y+8	; 0x08
    2928:	df 80       	ldd	r13, Y+7	; 0x07
    292a:	ee 80       	ldd	r14, Y+6	; 0x06
    292c:	fd 80       	ldd	r15, Y+5	; 0x05
    292e:	0c 81       	ldd	r16, Y+4	; 0x04
    2930:	1b 81       	ldd	r17, Y+3	; 0x03
    2932:	aa 81       	ldd	r26, Y+2	; 0x02
    2934:	b9 81       	ldd	r27, Y+1	; 0x01
    2936:	ce 0f       	add	r28, r30
    2938:	d1 1d       	adc	r29, r1
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	ed 01       	movw	r28, r26
    2946:	08 95       	ret

00002948 <_exit>:
    2948:	f8 94       	cli

0000294a <__stop_program>:
    294a:	ff cf       	rjmp	.-2      	; 0x294a <__stop_program>
