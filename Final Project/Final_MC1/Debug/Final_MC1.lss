
Final_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  000030f6  0000318a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000fa  008000fa  00003224  2**0
                  ALLOC
  3 .stab         00002d54  00000000  00000000  00003224  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000112a  00000000  00000000  00005f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000070a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000071e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007352  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009e86  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ac34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ad94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b021  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b7ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 c3 14 	jmp	0x2986	; 0x2986 <__vector_3>
      10:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <__vector_6>
      1c:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__vector_7>
      20:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__vector_8>
      24:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 30       	cpi	r26, 0x01	; 1
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ef       	ldi	r26, 0xF2	; 242
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 25 18 	jmp	0x304a	; 0x304a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 25 18 	jmp	0x304a	; 0x304a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 ef       	ldi	r24, 0xF2	; 242
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 19 18 	jmp	0x3032	; 0x3032 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 25 18 	jmp	0x304a	; 0x304a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 25 18 	jmp	0x304a	; 0x304a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 25 18 	jmp	0x304a	; 0x304a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0d 18 	jmp	0x301a	; 0x301a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 29 18 	jmp	0x3052	; 0x3052 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#define YES 255
#define NO 0


int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 key_num;
	LCD_init();
     b5a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <LCD_init>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a8 ec       	ldi	r26, 0xC8	; 200
     b64:	b2 e4       	ldi	r27, 0x42	; 66
     b66:	8b 87       	std	Y+11, r24	; 0x0b
     b68:	9c 87       	std	Y+12, r25	; 0x0c
     b6a:	ad 87       	std	Y+13, r26	; 0x0d
     b6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b6e:	6b 85       	ldd	r22, Y+11	; 0x0b
     b70:	7c 85       	ldd	r23, Y+12	; 0x0c
     b72:	8d 85       	ldd	r24, Y+13	; 0x0d
     b74:	9e 85       	ldd	r25, Y+14	; 0x0e
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	4a e7       	ldi	r20, 0x7A	; 122
     b7c:	53 e4       	ldi	r21, 0x43	; 67
     b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	8f 83       	std	Y+7, r24	; 0x07
     b88:	98 87       	std	Y+8, r25	; 0x08
     b8a:	a9 87       	std	Y+9, r26	; 0x09
     b8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	40 e8       	ldi	r20, 0x80	; 128
     b9c:	5f e3       	ldi	r21, 0x3F	; 63
     b9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ba2:	88 23       	and	r24, r24
     ba4:	2c f4       	brge	.+10     	; 0xbb0 <main+0x6a>
		__ticks = 1;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	9e 83       	std	Y+6, r25	; 0x06
     bac:	8d 83       	std	Y+5, r24	; 0x05
     bae:	3f c0       	rjmp	.+126    	; 0xc2e <main+0xe8>
	else if (__tmp > 65535)
     bb0:	6f 81       	ldd	r22, Y+7	; 0x07
     bb2:	78 85       	ldd	r23, Y+8	; 0x08
     bb4:	89 85       	ldd	r24, Y+9	; 0x09
     bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	3f ef       	ldi	r19, 0xFF	; 255
     bbc:	4f e7       	ldi	r20, 0x7F	; 127
     bbe:	57 e4       	ldi	r21, 0x47	; 71
     bc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bc4:	18 16       	cp	r1, r24
     bc6:	4c f5       	brge	.+82     	; 0xc1a <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
     bca:	7c 85       	ldd	r23, Y+12	; 0x0c
     bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bce:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e2       	ldi	r20, 0x20	; 32
     bd6:	51 e4       	ldi	r21, 0x41	; 65
     bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	bc 01       	movw	r22, r24
     be2:	cd 01       	movw	r24, r26
     be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	9e 83       	std	Y+6, r25	; 0x06
     bee:	8d 83       	std	Y+5, r24	; 0x05
     bf0:	0f c0       	rjmp	.+30     	; 0xc10 <main+0xca>
     bf2:	89 e1       	ldi	r24, 0x19	; 25
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	9c 83       	std	Y+4, r25	; 0x04
     bf8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <main+0xb8>
     c02:	9c 83       	std	Y+4, r25	; 0x04
     c04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c06:	8d 81       	ldd	r24, Y+5	; 0x05
     c08:	9e 81       	ldd	r25, Y+6	; 0x06
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	9e 83       	std	Y+6, r25	; 0x06
     c0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c10:	8d 81       	ldd	r24, Y+5	; 0x05
     c12:	9e 81       	ldd	r25, Y+6	; 0x06
     c14:	00 97       	sbiw	r24, 0x00	; 0
     c16:	69 f7       	brne	.-38     	; 0xbf2 <main+0xac>
     c18:	14 c0       	rjmp	.+40     	; 0xc42 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c1a:	6f 81       	ldd	r22, Y+7	; 0x07
     c1c:	78 85       	ldd	r23, Y+8	; 0x08
     c1e:	89 85       	ldd	r24, Y+9	; 0x09
     c20:	9a 85       	ldd	r25, Y+10	; 0x0a
     c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	9e 83       	std	Y+6, r25	; 0x06
     c2c:	8d 83       	std	Y+5, r24	; 0x05
     c2e:	8d 81       	ldd	r24, Y+5	; 0x05
     c30:	9e 81       	ldd	r25, Y+6	; 0x06
     c32:	9a 83       	std	Y+2, r25	; 0x02
     c34:	89 83       	std	Y+1, r24	; 0x01
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <main+0xf4>
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(9600);
     c42:	60 e8       	ldi	r22, 0x80	; 128
     c44:	75 e2       	ldi	r23, 0x25	; 37
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <UART_init>
	UART_sendByte(255);
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>
	key_num = UART_recieveByte();
     c54:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <UART_recieveByte>
     c58:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_displayStringRowColumn(0,1,"Hello");
     c5a:	20 e6       	ldi	r18, 0x60	; 96
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	a9 01       	movw	r20, r18
     c64:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>

    while(1){
    	key_num = UART_recieveByte();
     c68:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <UART_recieveByte>
     c6c:	8f 87       	std	Y+15, r24	; 0x0f
    	if(key_num==STEP1)	step1();
     c6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	19 f4       	brne	.+6      	; 0xc7a <main+0x134>
     c74:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <step1>
     c78:	f7 cf       	rjmp	.-18     	; 0xc68 <main+0x122>
    	else if(key_num==STEP2)	step2();
     c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c7c:	82 30       	cpi	r24, 0x02	; 2
     c7e:	19 f4       	brne	.+6      	; 0xc86 <main+0x140>
     c80:	0e 94 b4 10 	call	0x2168	; 0x2168 <step2>
     c84:	f1 cf       	rjmp	.-30     	; 0xc68 <main+0x122>
    	else if(key_num==STEP3)	step3();
     c86:	8f 85       	ldd	r24, Y+15	; 0x0f
     c88:	83 30       	cpi	r24, 0x03	; 3
     c8a:	19 f4       	brne	.+6      	; 0xc92 <main+0x14c>
     c8c:	0e 94 df 10 	call	0x21be	; 0x21be <step3>
     c90:	eb cf       	rjmp	.-42     	; 0xc68 <main+0x122>
    	else if(key_num==STEP4)	step4();
     c92:	8f 85       	ldd	r24, Y+15	; 0x0f
     c94:	84 30       	cpi	r24, 0x04	; 4
     c96:	19 f4       	brne	.+6      	; 0xc9e <main+0x158>
     c98:	0e 94 9f 11 	call	0x233e	; 0x233e <step4>
     c9c:	e5 cf       	rjmp	.-54     	; 0xc68 <main+0x122>
    	else if(key_num==STEP5)	step5();
     c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca0:	85 30       	cpi	r24, 0x05	; 5
     ca2:	11 f7       	brne	.-60     	; 0xc68 <main+0x122>
     ca4:	0e 94 05 13 	call	0x260a	; 0x260a <step5>
     ca8:	df cf       	rjmp	.-66     	; 0xc68 <main+0x122>

00000caa <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <GPIO_setupPinDirection+0x6>
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <GPIO_setupPinDirection+0x8>
     cb2:	0f 92       	push	r0
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	6a 83       	std	Y+2, r22	; 0x02
     cbc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	88 30       	cpi	r24, 0x08	; 8
     cc2:	08 f0       	brcs	.+2      	; 0xcc6 <GPIO_setupPinDirection+0x1c>
     cc4:	d5 c0       	rjmp	.+426    	; 0xe70 <GPIO_setupPinDirection+0x1c6>
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	84 30       	cpi	r24, 0x04	; 4
     cca:	08 f0       	brcs	.+2      	; 0xcce <GPIO_setupPinDirection+0x24>
     ccc:	d1 c0       	rjmp	.+418    	; 0xe70 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	3d 83       	std	Y+5, r19	; 0x05
     cd6:	2c 83       	std	Y+4, r18	; 0x04
     cd8:	8c 81       	ldd	r24, Y+4	; 0x04
     cda:	9d 81       	ldd	r25, Y+5	; 0x05
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	91 05       	cpc	r25, r1
     ce0:	09 f4       	brne	.+2      	; 0xce4 <GPIO_setupPinDirection+0x3a>
     ce2:	43 c0       	rjmp	.+134    	; 0xd6a <GPIO_setupPinDirection+0xc0>
     ce4:	2c 81       	ldd	r18, Y+4	; 0x04
     ce6:	3d 81       	ldd	r19, Y+5	; 0x05
     ce8:	22 30       	cpi	r18, 0x02	; 2
     cea:	31 05       	cpc	r19, r1
     cec:	2c f4       	brge	.+10     	; 0xcf8 <GPIO_setupPinDirection+0x4e>
     cee:	8c 81       	ldd	r24, Y+4	; 0x04
     cf0:	9d 81       	ldd	r25, Y+5	; 0x05
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	71 f0       	breq	.+28     	; 0xd12 <GPIO_setupPinDirection+0x68>
     cf6:	bc c0       	rjmp	.+376    	; 0xe70 <GPIO_setupPinDirection+0x1c6>
     cf8:	2c 81       	ldd	r18, Y+4	; 0x04
     cfa:	3d 81       	ldd	r19, Y+5	; 0x05
     cfc:	22 30       	cpi	r18, 0x02	; 2
     cfe:	31 05       	cpc	r19, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <GPIO_setupPinDirection+0x5a>
     d02:	5f c0       	rjmp	.+190    	; 0xdc2 <GPIO_setupPinDirection+0x118>
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	9d 81       	ldd	r25, Y+5	; 0x05
     d08:	83 30       	cpi	r24, 0x03	; 3
     d0a:	91 05       	cpc	r25, r1
     d0c:	09 f4       	brne	.+2      	; 0xd10 <GPIO_setupPinDirection+0x66>
     d0e:	85 c0       	rjmp	.+266    	; 0xe1a <GPIO_setupPinDirection+0x170>
     d10:	af c0       	rjmp	.+350    	; 0xe70 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	a1 f4       	brne	.+40     	; 0xd40 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d18:	aa e3       	ldi	r26, 0x3A	; 58
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	ea e3       	ldi	r30, 0x3A	; 58
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	48 2f       	mov	r20, r24
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <GPIO_setupPinDirection+0x8c>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <GPIO_setupPinDirection+0x88>
     d3a:	84 2b       	or	r24, r20
     d3c:	8c 93       	st	X, r24
     d3e:	98 c0       	rjmp	.+304    	; 0xe70 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d40:	aa e3       	ldi	r26, 0x3A	; 58
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	ea e3       	ldi	r30, 0x3A	; 58
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	48 2f       	mov	r20, r24
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	02 2e       	mov	r0, r18
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <GPIO_setupPinDirection+0xb4>
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	0a 94       	dec	r0
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <GPIO_setupPinDirection+0xb0>
     d62:	80 95       	com	r24
     d64:	84 23       	and	r24, r20
     d66:	8c 93       	st	X, r24
     d68:	83 c0       	rjmp	.+262    	; 0xe70 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	a1 f4       	brne	.+40     	; 0xd98 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d70:	a7 e3       	ldi	r26, 0x37	; 55
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e7 e3       	ldi	r30, 0x37	; 55
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	48 2f       	mov	r20, r24
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 2e       	mov	r0, r18
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <GPIO_setupPinDirection+0xe4>
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	0a 94       	dec	r0
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <GPIO_setupPinDirection+0xe0>
     d92:	84 2b       	or	r24, r20
     d94:	8c 93       	st	X, r24
     d96:	6c c0       	rjmp	.+216    	; 0xe70 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     d98:	a7 e3       	ldi	r26, 0x37	; 55
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e7 e3       	ldi	r30, 0x37	; 55
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <GPIO_setupPinDirection+0x10c>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <GPIO_setupPinDirection+0x108>
     dba:	80 95       	com	r24
     dbc:	84 23       	and	r24, r20
     dbe:	8c 93       	st	X, r24
     dc0:	57 c0       	rjmp	.+174    	; 0xe70 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	a1 f4       	brne	.+40     	; 0xdf0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     dc8:	a4 e3       	ldi	r26, 0x34	; 52
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e4 e3       	ldi	r30, 0x34	; 52
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	48 2f       	mov	r20, r24
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 2e       	mov	r0, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <GPIO_setupPinDirection+0x13c>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <GPIO_setupPinDirection+0x138>
     dea:	84 2b       	or	r24, r20
     dec:	8c 93       	st	X, r24
     dee:	40 c0       	rjmp	.+128    	; 0xe70 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     df0:	a4 e3       	ldi	r26, 0x34	; 52
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e4 e3       	ldi	r30, 0x34	; 52
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <GPIO_setupPinDirection+0x164>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <GPIO_setupPinDirection+0x160>
     e12:	80 95       	com	r24
     e14:	84 23       	and	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	2b c0       	rjmp	.+86     	; 0xe70 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	a1 f4       	brne	.+40     	; 0xe48 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e20:	a1 e3       	ldi	r26, 0x31	; 49
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e1 e3       	ldi	r30, 0x31	; 49
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <GPIO_setupPinDirection+0x194>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <GPIO_setupPinDirection+0x190>
     e42:	84 2b       	or	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	14 c0       	rjmp	.+40     	; 0xe70 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e48:	a1 e3       	ldi	r26, 0x31	; 49
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e1 e3       	ldi	r30, 0x31	; 49
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <GPIO_setupPinDirection+0x1bc>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <GPIO_setupPinDirection+0x1b8>
     e6a:	80 95       	com	r24
     e6c:	84 23       	and	r24, r20
     e6e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	00 d0       	rcall	.+0      	; 0xe86 <GPIO_writePin+0x6>
     e86:	00 d0       	rcall	.+0      	; 0xe88 <GPIO_writePin+0x8>
     e88:	0f 92       	push	r0
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	6a 83       	std	Y+2, r22	; 0x02
     e92:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	88 30       	cpi	r24, 0x08	; 8
     e98:	08 f0       	brcs	.+2      	; 0xe9c <GPIO_writePin+0x1c>
     e9a:	d5 c0       	rjmp	.+426    	; 0x1046 <GPIO_writePin+0x1c6>
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	84 30       	cpi	r24, 0x04	; 4
     ea0:	08 f0       	brcs	.+2      	; 0xea4 <GPIO_writePin+0x24>
     ea2:	d1 c0       	rjmp	.+418    	; 0x1046 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	3d 83       	std	Y+5, r19	; 0x05
     eac:	2c 83       	std	Y+4, r18	; 0x04
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	9d 81       	ldd	r25, Y+5	; 0x05
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	91 05       	cpc	r25, r1
     eb6:	09 f4       	brne	.+2      	; 0xeba <GPIO_writePin+0x3a>
     eb8:	43 c0       	rjmp	.+134    	; 0xf40 <GPIO_writePin+0xc0>
     eba:	2c 81       	ldd	r18, Y+4	; 0x04
     ebc:	3d 81       	ldd	r19, Y+5	; 0x05
     ebe:	22 30       	cpi	r18, 0x02	; 2
     ec0:	31 05       	cpc	r19, r1
     ec2:	2c f4       	brge	.+10     	; 0xece <GPIO_writePin+0x4e>
     ec4:	8c 81       	ldd	r24, Y+4	; 0x04
     ec6:	9d 81       	ldd	r25, Y+5	; 0x05
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	71 f0       	breq	.+28     	; 0xee8 <GPIO_writePin+0x68>
     ecc:	bc c0       	rjmp	.+376    	; 0x1046 <GPIO_writePin+0x1c6>
     ece:	2c 81       	ldd	r18, Y+4	; 0x04
     ed0:	3d 81       	ldd	r19, Y+5	; 0x05
     ed2:	22 30       	cpi	r18, 0x02	; 2
     ed4:	31 05       	cpc	r19, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <GPIO_writePin+0x5a>
     ed8:	5f c0       	rjmp	.+190    	; 0xf98 <GPIO_writePin+0x118>
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	9d 81       	ldd	r25, Y+5	; 0x05
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	91 05       	cpc	r25, r1
     ee2:	09 f4       	brne	.+2      	; 0xee6 <GPIO_writePin+0x66>
     ee4:	85 c0       	rjmp	.+266    	; 0xff0 <GPIO_writePin+0x170>
     ee6:	af c0       	rjmp	.+350    	; 0x1046 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	a1 f4       	brne	.+40     	; 0xf16 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     eee:	ab e3       	ldi	r26, 0x3B	; 59
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	eb e3       	ldi	r30, 0x3B	; 59
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <GPIO_writePin+0x8c>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <GPIO_writePin+0x88>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	98 c0       	rjmp	.+304    	; 0x1046 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f16:	ab e3       	ldi	r26, 0x3B	; 59
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	eb e3       	ldi	r30, 0x3B	; 59
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <GPIO_writePin+0xb4>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <GPIO_writePin+0xb0>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	83 c0       	rjmp	.+262    	; 0x1046 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	a1 f4       	brne	.+40     	; 0xf6e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f46:	a8 e3       	ldi	r26, 0x38	; 56
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e8 e3       	ldi	r30, 0x38	; 56
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <GPIO_writePin+0xe4>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <GPIO_writePin+0xe0>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	6c c0       	rjmp	.+216    	; 0x1046 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     f6e:	a8 e3       	ldi	r26, 0x38	; 56
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e8 e3       	ldi	r30, 0x38	; 56
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <GPIO_writePin+0x10c>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <GPIO_writePin+0x108>
     f90:	80 95       	com	r24
     f92:	84 23       	and	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	57 c0       	rjmp	.+174    	; 0x1046 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	a1 f4       	brne	.+40     	; 0xfc6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f9e:	a5 e3       	ldi	r26, 0x35	; 53
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e5 e3       	ldi	r30, 0x35	; 53
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <GPIO_writePin+0x13c>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <GPIO_writePin+0x138>
     fc0:	84 2b       	or	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	40 c0       	rjmp	.+128    	; 0x1046 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     fc6:	a5 e3       	ldi	r26, 0x35	; 53
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e5 e3       	ldi	r30, 0x35	; 53
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <GPIO_writePin+0x164>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <GPIO_writePin+0x160>
     fe8:	80 95       	com	r24
     fea:	84 23       	and	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	2b c0       	rjmp	.+86     	; 0x1046 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	a1 f4       	brne	.+40     	; 0x101e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     ff6:	a2 e3       	ldi	r26, 0x32	; 50
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e2 e3       	ldi	r30, 0x32	; 50
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <GPIO_writePin+0x194>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <GPIO_writePin+0x190>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	14 c0       	rjmp	.+40     	; 0x1046 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    101e:	a2 e3       	ldi	r26, 0x32	; 50
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e2 e3       	ldi	r30, 0x32	; 50
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <GPIO_writePin+0x1bc>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <GPIO_writePin+0x1b8>
    1040:	80 95       	com	r24
    1042:	84 23       	and	r24, r20
    1044:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <GPIO_readPin+0x6>
    105c:	00 d0       	rcall	.+0      	; 0x105e <GPIO_readPin+0x8>
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	8a 83       	std	Y+2, r24	; 0x02
    1066:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1068:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	88 30       	cpi	r24, 0x08	; 8
    106e:	08 f0       	brcs	.+2      	; 0x1072 <GPIO_readPin+0x1c>
    1070:	84 c0       	rjmp	.+264    	; 0x117a <GPIO_readPin+0x124>
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	84 30       	cpi	r24, 0x04	; 4
    1076:	08 f0       	brcs	.+2      	; 0x107a <GPIO_readPin+0x24>
    1078:	80 c0       	rjmp	.+256    	; 0x117a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	3d 83       	std	Y+5, r19	; 0x05
    1082:	2c 83       	std	Y+4, r18	; 0x04
    1084:	4c 81       	ldd	r20, Y+4	; 0x04
    1086:	5d 81       	ldd	r21, Y+5	; 0x05
    1088:	41 30       	cpi	r20, 0x01	; 1
    108a:	51 05       	cpc	r21, r1
    108c:	79 f1       	breq	.+94     	; 0x10ec <GPIO_readPin+0x96>
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	91 05       	cpc	r25, r1
    1096:	34 f4       	brge	.+12     	; 0x10a4 <GPIO_readPin+0x4e>
    1098:	2c 81       	ldd	r18, Y+4	; 0x04
    109a:	3d 81       	ldd	r19, Y+5	; 0x05
    109c:	21 15       	cp	r18, r1
    109e:	31 05       	cpc	r19, r1
    10a0:	69 f0       	breq	.+26     	; 0x10bc <GPIO_readPin+0x66>
    10a2:	6b c0       	rjmp	.+214    	; 0x117a <GPIO_readPin+0x124>
    10a4:	4c 81       	ldd	r20, Y+4	; 0x04
    10a6:	5d 81       	ldd	r21, Y+5	; 0x05
    10a8:	42 30       	cpi	r20, 0x02	; 2
    10aa:	51 05       	cpc	r21, r1
    10ac:	b9 f1       	breq	.+110    	; 0x111c <GPIO_readPin+0xc6>
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	9d 81       	ldd	r25, Y+5	; 0x05
    10b2:	83 30       	cpi	r24, 0x03	; 3
    10b4:	91 05       	cpc	r25, r1
    10b6:	09 f4       	brne	.+2      	; 0x10ba <GPIO_readPin+0x64>
    10b8:	49 c0       	rjmp	.+146    	; 0x114c <GPIO_readPin+0xf6>
    10ba:	5f c0       	rjmp	.+190    	; 0x117a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    10bc:	e9 e3       	ldi	r30, 0x39	; 57
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a9 01       	movw	r20, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <GPIO_readPin+0x7e>
    10d0:	55 95       	asr	r21
    10d2:	47 95       	ror	r20
    10d4:	8a 95       	dec	r24
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <GPIO_readPin+0x7a>
    10d8:	ca 01       	movw	r24, r20
    10da:	81 70       	andi	r24, 0x01	; 1
    10dc:	90 70       	andi	r25, 0x00	; 0
    10de:	88 23       	and	r24, r24
    10e0:	19 f0       	breq	.+6      	; 0x10e8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	49 c0       	rjmp	.+146    	; 0x117a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10e8:	19 82       	std	Y+1, r1	; 0x01
    10ea:	47 c0       	rjmp	.+142    	; 0x117a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    10ec:	e6 e3       	ldi	r30, 0x36	; 54
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a9 01       	movw	r20, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <GPIO_readPin+0xae>
    1100:	55 95       	asr	r21
    1102:	47 95       	ror	r20
    1104:	8a 95       	dec	r24
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <GPIO_readPin+0xaa>
    1108:	ca 01       	movw	r24, r20
    110a:	81 70       	andi	r24, 0x01	; 1
    110c:	90 70       	andi	r25, 0x00	; 0
    110e:	88 23       	and	r24, r24
    1110:	19 f0       	breq	.+6      	; 0x1118 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	31 c0       	rjmp	.+98     	; 0x117a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1118:	19 82       	std	Y+1, r1	; 0x01
    111a:	2f c0       	rjmp	.+94     	; 0x117a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    111c:	e3 e3       	ldi	r30, 0x33	; 51
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	88 2f       	mov	r24, r24
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	a9 01       	movw	r20, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <GPIO_readPin+0xde>
    1130:	55 95       	asr	r21
    1132:	47 95       	ror	r20
    1134:	8a 95       	dec	r24
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <GPIO_readPin+0xda>
    1138:	ca 01       	movw	r24, r20
    113a:	81 70       	andi	r24, 0x01	; 1
    113c:	90 70       	andi	r25, 0x00	; 0
    113e:	88 23       	and	r24, r24
    1140:	19 f0       	breq	.+6      	; 0x1148 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	19 c0       	rjmp	.+50     	; 0x117a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1148:	19 82       	std	Y+1, r1	; 0x01
    114a:	17 c0       	rjmp	.+46     	; 0x117a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    114c:	e0 e3       	ldi	r30, 0x30	; 48
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a9 01       	movw	r20, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <GPIO_readPin+0x10e>
    1160:	55 95       	asr	r21
    1162:	47 95       	ror	r20
    1164:	8a 95       	dec	r24
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <GPIO_readPin+0x10a>
    1168:	ca 01       	movw	r24, r20
    116a:	81 70       	andi	r24, 0x01	; 1
    116c:	90 70       	andi	r25, 0x00	; 0
    116e:	88 23       	and	r24, r24
    1170:	19 f0       	breq	.+6      	; 0x1178 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	01 c0       	rjmp	.+2      	; 0x117a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1178:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    117a:	89 81       	ldd	r24, Y+1	; 0x01
}
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <GPIO_setupPortDirection+0x6>
    1192:	00 d0       	rcall	.+0      	; 0x1194 <GPIO_setupPortDirection+0x8>
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	84 30       	cpi	r24, 0x04	; 4
    11a0:	90 f5       	brcc	.+100    	; 0x1206 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	3c 83       	std	Y+4, r19	; 0x04
    11aa:	2b 83       	std	Y+3, r18	; 0x03
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	91 05       	cpc	r25, r1
    11b4:	d1 f0       	breq	.+52     	; 0x11ea <GPIO_setupPortDirection+0x5e>
    11b6:	2b 81       	ldd	r18, Y+3	; 0x03
    11b8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ba:	22 30       	cpi	r18, 0x02	; 2
    11bc:	31 05       	cpc	r19, r1
    11be:	2c f4       	brge	.+10     	; 0x11ca <GPIO_setupPortDirection+0x3e>
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	61 f0       	breq	.+24     	; 0x11e0 <GPIO_setupPortDirection+0x54>
    11c8:	1e c0       	rjmp	.+60     	; 0x1206 <GPIO_setupPortDirection+0x7a>
    11ca:	2b 81       	ldd	r18, Y+3	; 0x03
    11cc:	3c 81       	ldd	r19, Y+4	; 0x04
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	31 05       	cpc	r19, r1
    11d2:	81 f0       	breq	.+32     	; 0x11f4 <GPIO_setupPortDirection+0x68>
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	83 30       	cpi	r24, 0x03	; 3
    11da:	91 05       	cpc	r25, r1
    11dc:	81 f0       	breq	.+32     	; 0x11fe <GPIO_setupPortDirection+0x72>
    11de:	13 c0       	rjmp	.+38     	; 0x1206 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    11e0:	ea e3       	ldi	r30, 0x3A	; 58
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	80 83       	st	Z, r24
    11e8:	0e c0       	rjmp	.+28     	; 0x1206 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    11ea:	e7 e3       	ldi	r30, 0x37	; 55
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	80 83       	st	Z, r24
    11f2:	09 c0       	rjmp	.+18     	; 0x1206 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    11f4:	e4 e3       	ldi	r30, 0x34	; 52
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	80 83       	st	Z, r24
    11fc:	04 c0       	rjmp	.+8      	; 0x1206 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    11fe:	e1 e3       	ldi	r30, 0x31	; 49
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	80 83       	st	Z, r24
			break;
		}
	}
}
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <GPIO_writePort+0x6>
    121a:	00 d0       	rcall	.+0      	; 0x121c <GPIO_writePort+0x8>
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	90 f5       	brcc	.+100    	; 0x128e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	3c 83       	std	Y+4, r19	; 0x04
    1232:	2b 83       	std	Y+3, r18	; 0x03
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	d1 f0       	breq	.+52     	; 0x1272 <GPIO_writePort+0x5e>
    123e:	2b 81       	ldd	r18, Y+3	; 0x03
    1240:	3c 81       	ldd	r19, Y+4	; 0x04
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	2c f4       	brge	.+10     	; 0x1252 <GPIO_writePort+0x3e>
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	61 f0       	breq	.+24     	; 0x1268 <GPIO_writePort+0x54>
    1250:	1e c0       	rjmp	.+60     	; 0x128e <GPIO_writePort+0x7a>
    1252:	2b 81       	ldd	r18, Y+3	; 0x03
    1254:	3c 81       	ldd	r19, Y+4	; 0x04
    1256:	22 30       	cpi	r18, 0x02	; 2
    1258:	31 05       	cpc	r19, r1
    125a:	81 f0       	breq	.+32     	; 0x127c <GPIO_writePort+0x68>
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	83 30       	cpi	r24, 0x03	; 3
    1262:	91 05       	cpc	r25, r1
    1264:	81 f0       	breq	.+32     	; 0x1286 <GPIO_writePort+0x72>
    1266:	13 c0       	rjmp	.+38     	; 0x128e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1268:	eb e3       	ldi	r30, 0x3B	; 59
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	80 83       	st	Z, r24
    1270:	0e c0       	rjmp	.+28     	; 0x128e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1272:	e8 e3       	ldi	r30, 0x38	; 56
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	80 83       	st	Z, r24
    127a:	09 c0       	rjmp	.+18     	; 0x128e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    127c:	e5 e3       	ldi	r30, 0x35	; 53
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	80 83       	st	Z, r24
    1284:	04 c0       	rjmp	.+8      	; 0x128e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1286:	e2 e3       	ldi	r30, 0x32	; 50
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	80 83       	st	Z, r24
			break;
		}
	}
}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <GPIO_readPort+0x6>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <GPIO_readPort+0x8>
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    12aa:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	84 30       	cpi	r24, 0x04	; 4
    12b0:	90 f5       	brcc	.+100    	; 0x1316 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3c 83       	std	Y+4, r19	; 0x04
    12ba:	2b 83       	std	Y+3, r18	; 0x03
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	91 05       	cpc	r25, r1
    12c4:	d1 f0       	breq	.+52     	; 0x12fa <GPIO_readPort+0x5e>
    12c6:	2b 81       	ldd	r18, Y+3	; 0x03
    12c8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	2c f4       	brge	.+10     	; 0x12da <GPIO_readPort+0x3e>
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	61 f0       	breq	.+24     	; 0x12f0 <GPIO_readPort+0x54>
    12d8:	1e c0       	rjmp	.+60     	; 0x1316 <GPIO_readPort+0x7a>
    12da:	2b 81       	ldd	r18, Y+3	; 0x03
    12dc:	3c 81       	ldd	r19, Y+4	; 0x04
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	81 f0       	breq	.+32     	; 0x1304 <GPIO_readPort+0x68>
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	83 30       	cpi	r24, 0x03	; 3
    12ea:	91 05       	cpc	r25, r1
    12ec:	81 f0       	breq	.+32     	; 0x130e <GPIO_readPort+0x72>
    12ee:	13 c0       	rjmp	.+38     	; 0x1316 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    12f0:	e9 e3       	ldi	r30, 0x39	; 57
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	0e c0       	rjmp	.+28     	; 0x1316 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    12fa:	e6 e3       	ldi	r30, 0x36	; 54
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	09 c0       	rjmp	.+18     	; 0x1316 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1304:	e3 e3       	ldi	r30, 0x33	; 51
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    130e:	e0 e3       	ldi	r30, 0x30	; 48
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1316:	89 81       	ldd	r24, Y+1	; 0x01
}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <KEYPAD_getPressedKey+0x6>
    132c:	0f 92       	push	r0
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1332:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1334:	1b 82       	std	Y+3, r1	; 0x03
    1336:	43 c0       	rjmp	.+134    	; 0x13be <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	0e 94 c6 08 	call	0x118c	; 0x118c <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	98 2f       	mov	r25, r24
    1344:	9c 5f       	subi	r25, 0xFC	; 252
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	69 2f       	mov	r22, r25
    134a:	41 e0       	ldi	r20, 0x01	; 1
    134c:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9c 01       	movw	r18, r24
    1358:	2c 5f       	subi	r18, 0xFC	; 252
    135a:	3f 4f       	sbci	r19, 0xFF	; 255
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <KEYPAD_getPressedKey+0x40>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	2a 95       	dec	r18
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <KEYPAD_getPressedKey+0x3c>
    136a:	80 95       	com	r24
    136c:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	69 81       	ldd	r22, Y+1	; 0x01
    1372:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1376:	1a 82       	std	Y+2, r1	; 0x02
    1378:	1c c0       	rjmp	.+56     	; 0x13b2 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	6a 81       	ldd	r22, Y+2	; 0x02
    137e:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_readPin>
    1382:	88 23       	and	r24, r24
    1384:	99 f4       	brne	.+38     	; 0x13ac <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	98 2f       	mov	r25, r24
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	89 0f       	add	r24, r25
    139a:	8f 5f       	subi	r24, 0xFF	; 255
    139c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	8f 5f       	subi	r24, 0xFF	; 255
    13b0:	8a 83       	std	Y+2, r24	; 0x02
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	84 30       	cpi	r24, 0x04	; 4
    13b6:	08 f3       	brcs	.-62     	; 0x137a <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	8f 5f       	subi	r24, 0xFF	; 255
    13bc:	8b 83       	std	Y+3, r24	; 0x03
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	84 30       	cpi	r24, 0x04	; 4
    13c2:	08 f4       	brcc	.+2      	; 0x13c6 <KEYPAD_getPressedKey+0xa0>
    13c4:	b9 cf       	rjmp	.-142    	; 0x1338 <KEYPAD_getPressedKey+0x12>
    13c6:	b6 cf       	rjmp	.-148    	; 0x1334 <KEYPAD_getPressedKey+0xe>

000013c8 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <KEYPAD_4x4_adjustKeyNumber+0x6>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    13d6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	3c 83       	std	Y+4, r19	; 0x04
    13e0:	2b 83       	std	Y+3, r18	; 0x03
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	88 30       	cpi	r24, 0x08	; 8
    13e8:	91 05       	cpc	r25, r1
    13ea:	09 f4       	brne	.+2      	; 0x13ee <KEYPAD_4x4_adjustKeyNumber+0x26>
    13ec:	70 c0       	rjmp	.+224    	; 0x14ce <KEYPAD_4x4_adjustKeyNumber+0x106>
    13ee:	2b 81       	ldd	r18, Y+3	; 0x03
    13f0:	3c 81       	ldd	r19, Y+4	; 0x04
    13f2:	29 30       	cpi	r18, 0x09	; 9
    13f4:	31 05       	cpc	r19, r1
    13f6:	5c f5       	brge	.+86     	; 0x144e <KEYPAD_4x4_adjustKeyNumber+0x86>
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	84 30       	cpi	r24, 0x04	; 4
    13fe:	91 05       	cpc	r25, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1402:	59 c0       	rjmp	.+178    	; 0x14b6 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1404:	2b 81       	ldd	r18, Y+3	; 0x03
    1406:	3c 81       	ldd	r19, Y+4	; 0x04
    1408:	25 30       	cpi	r18, 0x05	; 5
    140a:	31 05       	cpc	r19, r1
    140c:	9c f4       	brge	.+38     	; 0x1434 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	9c 81       	ldd	r25, Y+4	; 0x04
    1412:	82 30       	cpi	r24, 0x02	; 2
    1414:	91 05       	cpc	r25, r1
    1416:	09 f4       	brne	.+2      	; 0x141a <KEYPAD_4x4_adjustKeyNumber+0x52>
    1418:	48 c0       	rjmp	.+144    	; 0x14aa <KEYPAD_4x4_adjustKeyNumber+0xe2>
    141a:	2b 81       	ldd	r18, Y+3	; 0x03
    141c:	3c 81       	ldd	r19, Y+4	; 0x04
    141e:	23 30       	cpi	r18, 0x03	; 3
    1420:	31 05       	cpc	r19, r1
    1422:	0c f0       	brlt	.+2      	; 0x1426 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1424:	45 c0       	rjmp	.+138    	; 0x14b0 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	91 05       	cpc	r25, r1
    142e:	09 f4       	brne	.+2      	; 0x1432 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1430:	39 c0       	rjmp	.+114    	; 0x14a4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1432:	67 c0       	rjmp	.+206    	; 0x1502 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1434:	2b 81       	ldd	r18, Y+3	; 0x03
    1436:	3c 81       	ldd	r19, Y+4	; 0x04
    1438:	26 30       	cpi	r18, 0x06	; 6
    143a:	31 05       	cpc	r19, r1
    143c:	09 f4       	brne	.+2      	; 0x1440 <KEYPAD_4x4_adjustKeyNumber+0x78>
    143e:	41 c0       	rjmp	.+130    	; 0x14c2 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	87 30       	cpi	r24, 0x07	; 7
    1446:	91 05       	cpc	r25, r1
    1448:	0c f0       	brlt	.+2      	; 0x144c <KEYPAD_4x4_adjustKeyNumber+0x84>
    144a:	3e c0       	rjmp	.+124    	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x100>
    144c:	37 c0       	rjmp	.+110    	; 0x14bc <KEYPAD_4x4_adjustKeyNumber+0xf4>
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	2c 30       	cpi	r18, 0x0C	; 12
    1454:	31 05       	cpc	r19, r1
    1456:	09 f4       	brne	.+2      	; 0x145a <KEYPAD_4x4_adjustKeyNumber+0x92>
    1458:	46 c0       	rjmp	.+140    	; 0x14e6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	8d 30       	cpi	r24, 0x0D	; 13
    1460:	91 05       	cpc	r25, r1
    1462:	5c f4       	brge	.+22     	; 0x147a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1464:	2b 81       	ldd	r18, Y+3	; 0x03
    1466:	3c 81       	ldd	r19, Y+4	; 0x04
    1468:	2a 30       	cpi	r18, 0x0A	; 10
    146a:	31 05       	cpc	r19, r1
    146c:	b1 f1       	breq	.+108    	; 0x14da <KEYPAD_4x4_adjustKeyNumber+0x112>
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	8b 30       	cpi	r24, 0x0B	; 11
    1474:	91 05       	cpc	r25, r1
    1476:	a4 f5       	brge	.+104    	; 0x14e0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1478:	2d c0       	rjmp	.+90     	; 0x14d4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    147a:	2b 81       	ldd	r18, Y+3	; 0x03
    147c:	3c 81       	ldd	r19, Y+4	; 0x04
    147e:	2e 30       	cpi	r18, 0x0E	; 14
    1480:	31 05       	cpc	r19, r1
    1482:	b9 f1       	breq	.+110    	; 0x14f2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	8e 30       	cpi	r24, 0x0E	; 14
    148a:	91 05       	cpc	r25, r1
    148c:	7c f1       	brlt	.+94     	; 0x14ec <KEYPAD_4x4_adjustKeyNumber+0x124>
    148e:	2b 81       	ldd	r18, Y+3	; 0x03
    1490:	3c 81       	ldd	r19, Y+4	; 0x04
    1492:	2f 30       	cpi	r18, 0x0F	; 15
    1494:	31 05       	cpc	r19, r1
    1496:	79 f1       	breq	.+94     	; 0x14f6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	80 31       	cpi	r24, 0x10	; 16
    149e:	91 05       	cpc	r25, r1
    14a0:	69 f1       	breq	.+90     	; 0x14fc <KEYPAD_4x4_adjustKeyNumber+0x134>
    14a2:	2f c0       	rjmp	.+94     	; 0x1502 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    14a4:	87 e0       	ldi	r24, 0x07	; 7
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	2e c0       	rjmp	.+92     	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    14aa:	88 e0       	ldi	r24, 0x08	; 8
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	2b c0       	rjmp	.+86     	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    14b0:	89 e0       	ldi	r24, 0x09	; 9
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	28 c0       	rjmp	.+80     	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    14b6:	85 e2       	ldi	r24, 0x25	; 37
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	25 c0       	rjmp	.+74     	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    14bc:	84 e0       	ldi	r24, 0x04	; 4
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	22 c0       	rjmp	.+68     	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    14c2:	85 e0       	ldi	r24, 0x05	; 5
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	1f c0       	rjmp	.+62     	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    14c8:	86 e0       	ldi	r24, 0x06	; 6
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	1c c0       	rjmp	.+56     	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    14ce:	8a e2       	ldi	r24, 0x2A	; 42
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	19 c0       	rjmp	.+50     	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	16 c0       	rjmp	.+44     	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    14da:	82 e0       	ldi	r24, 0x02	; 2
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	13 c0       	rjmp	.+38     	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    14e0:	83 e0       	ldi	r24, 0x03	; 3
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	10 c0       	rjmp	.+32     	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    14e6:	8d e2       	ldi	r24, 0x2D	; 45
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	0d c0       	rjmp	.+26     	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    14ec:	8d e0       	ldi	r24, 0x0D	; 13
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	0a c0       	rjmp	.+20     	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    14f2:	19 82       	std	Y+1, r1	; 0x01
    14f4:	08 c0       	rjmp	.+16     	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    14f6:	8d e3       	ldi	r24, 0x3D	; 61
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	05 c0       	rjmp	.+10     	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    14fc:	8b e2       	ldi	r24, 0x2B	; 43
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	60 e0       	ldi	r22, 0x00	; 0
    1522:	41 e0       	ldi	r20, 0x01	; 1
    1524:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	61 e0       	ldi	r22, 0x01	; 1
    152c:	41 e0       	ldi	r20, 0x01	; 1
    152e:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	62 e0       	ldi	r22, 0x02	; 2
    1536:	41 e0       	ldi	r20, 0x01	; 1
    1538:	0e 94 55 06 	call	0xcaa	; 0xcaa <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	6f ef       	ldi	r22, 0xFF	; 255
    1540:	0e 94 c6 08 	call	0x118c	; 0x118c <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1544:	88 e3       	ldi	r24, 0x38	; 56
    1546:	0e 94 ae 0a 	call	0x155c	; 0x155c <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    154a:	8c e0       	ldi	r24, 0x0C	; 12
    154c:	0e 94 ae 0a 	call	0x155c	; 0x155c <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	0e 94 ae 0a 	call	0x155c	; 0x155c <LCD_sendCommand>
}
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	e9 97       	sbiw	r28, 0x39	; 57
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	61 e0       	ldi	r22, 0x01	; 1
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_writePin>
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	a0 e8       	ldi	r26, 0x80	; 128
    158c:	bf e3       	ldi	r27, 0x3F	; 63
    158e:	8d ab       	std	Y+53, r24	; 0x35
    1590:	9e ab       	std	Y+54, r25	; 0x36
    1592:	af ab       	std	Y+55, r26	; 0x37
    1594:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1596:	6d a9       	ldd	r22, Y+53	; 0x35
    1598:	7e a9       	ldd	r23, Y+54	; 0x36
    159a:	8f a9       	ldd	r24, Y+55	; 0x37
    159c:	98 ad       	ldd	r25, Y+56	; 0x38
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	4a e7       	ldi	r20, 0x7A	; 122
    15a4:	53 e4       	ldi	r21, 0x43	; 67
    15a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	89 ab       	std	Y+49, r24	; 0x31
    15b0:	9a ab       	std	Y+50, r25	; 0x32
    15b2:	ab ab       	std	Y+51, r26	; 0x33
    15b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15b6:	69 a9       	ldd	r22, Y+49	; 0x31
    15b8:	7a a9       	ldd	r23, Y+50	; 0x32
    15ba:	8b a9       	ldd	r24, Y+51	; 0x33
    15bc:	9c a9       	ldd	r25, Y+52	; 0x34
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 e8       	ldi	r20, 0x80	; 128
    15c4:	5f e3       	ldi	r21, 0x3F	; 63
    15c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ca:	88 23       	and	r24, r24
    15cc:	2c f4       	brge	.+10     	; 0x15d8 <LCD_sendCommand+0x7c>
		__ticks = 1;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	98 ab       	std	Y+48, r25	; 0x30
    15d4:	8f a7       	std	Y+47, r24	; 0x2f
    15d6:	3f c0       	rjmp	.+126    	; 0x1656 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    15d8:	69 a9       	ldd	r22, Y+49	; 0x31
    15da:	7a a9       	ldd	r23, Y+50	; 0x32
    15dc:	8b a9       	ldd	r24, Y+51	; 0x33
    15de:	9c a9       	ldd	r25, Y+52	; 0x34
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	3f ef       	ldi	r19, 0xFF	; 255
    15e4:	4f e7       	ldi	r20, 0x7F	; 127
    15e6:	57 e4       	ldi	r21, 0x47	; 71
    15e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ec:	18 16       	cp	r1, r24
    15ee:	4c f5       	brge	.+82     	; 0x1642 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f0:	6d a9       	ldd	r22, Y+53	; 0x35
    15f2:	7e a9       	ldd	r23, Y+54	; 0x36
    15f4:	8f a9       	ldd	r24, Y+55	; 0x37
    15f6:	98 ad       	ldd	r25, Y+56	; 0x38
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e2       	ldi	r20, 0x20	; 32
    15fe:	51 e4       	ldi	r21, 0x41	; 65
    1600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	bc 01       	movw	r22, r24
    160a:	cd 01       	movw	r24, r26
    160c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	98 ab       	std	Y+48, r25	; 0x30
    1616:	8f a7       	std	Y+47, r24	; 0x2f
    1618:	0f c0       	rjmp	.+30     	; 0x1638 <LCD_sendCommand+0xdc>
    161a:	89 e1       	ldi	r24, 0x19	; 25
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	9e a7       	std	Y+46, r25	; 0x2e
    1620:	8d a7       	std	Y+45, r24	; 0x2d
    1622:	8d a5       	ldd	r24, Y+45	; 0x2d
    1624:	9e a5       	ldd	r25, Y+46	; 0x2e
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <LCD_sendCommand+0xca>
    162a:	9e a7       	std	Y+46, r25	; 0x2e
    162c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1630:	98 a9       	ldd	r25, Y+48	; 0x30
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	98 ab       	std	Y+48, r25	; 0x30
    1636:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1638:	8f a5       	ldd	r24, Y+47	; 0x2f
    163a:	98 a9       	ldd	r25, Y+48	; 0x30
    163c:	00 97       	sbiw	r24, 0x00	; 0
    163e:	69 f7       	brne	.-38     	; 0x161a <LCD_sendCommand+0xbe>
    1640:	14 c0       	rjmp	.+40     	; 0x166a <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1642:	69 a9       	ldd	r22, Y+49	; 0x31
    1644:	7a a9       	ldd	r23, Y+50	; 0x32
    1646:	8b a9       	ldd	r24, Y+51	; 0x33
    1648:	9c a9       	ldd	r25, Y+52	; 0x34
    164a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	98 ab       	std	Y+48, r25	; 0x30
    1654:	8f a7       	std	Y+47, r24	; 0x2f
    1656:	8f a5       	ldd	r24, Y+47	; 0x2f
    1658:	98 a9       	ldd	r25, Y+48	; 0x30
    165a:	9c a7       	std	Y+44, r25	; 0x2c
    165c:	8b a7       	std	Y+43, r24	; 0x2b
    165e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1660:	9c a5       	ldd	r25, Y+44	; 0x2c
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <LCD_sendCommand+0x106>
    1666:	9c a7       	std	Y+44, r25	; 0x2c
    1668:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	62 e0       	ldi	r22, 0x02	; 2
    166e:	41 e0       	ldi	r20, 0x01	; 1
    1670:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_writePin>
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a0 e8       	ldi	r26, 0x80	; 128
    167a:	bf e3       	ldi	r27, 0x3F	; 63
    167c:	8f a3       	std	Y+39, r24	; 0x27
    167e:	98 a7       	std	Y+40, r25	; 0x28
    1680:	a9 a7       	std	Y+41, r26	; 0x29
    1682:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1684:	6f a1       	ldd	r22, Y+39	; 0x27
    1686:	78 a5       	ldd	r23, Y+40	; 0x28
    1688:	89 a5       	ldd	r24, Y+41	; 0x29
    168a:	9a a5       	ldd	r25, Y+42	; 0x2a
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	4a e7       	ldi	r20, 0x7A	; 122
    1692:	53 e4       	ldi	r21, 0x43	; 67
    1694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	8b a3       	std	Y+35, r24	; 0x23
    169e:	9c a3       	std	Y+36, r25	; 0x24
    16a0:	ad a3       	std	Y+37, r26	; 0x25
    16a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16a4:	6b a1       	ldd	r22, Y+35	; 0x23
    16a6:	7c a1       	ldd	r23, Y+36	; 0x24
    16a8:	8d a1       	ldd	r24, Y+37	; 0x25
    16aa:	9e a1       	ldd	r25, Y+38	; 0x26
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e8       	ldi	r20, 0x80	; 128
    16b2:	5f e3       	ldi	r21, 0x3F	; 63
    16b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b8:	88 23       	and	r24, r24
    16ba:	2c f4       	brge	.+10     	; 0x16c6 <LCD_sendCommand+0x16a>
		__ticks = 1;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	9a a3       	std	Y+34, r25	; 0x22
    16c2:	89 a3       	std	Y+33, r24	; 0x21
    16c4:	3f c0       	rjmp	.+126    	; 0x1744 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    16c6:	6b a1       	ldd	r22, Y+35	; 0x23
    16c8:	7c a1       	ldd	r23, Y+36	; 0x24
    16ca:	8d a1       	ldd	r24, Y+37	; 0x25
    16cc:	9e a1       	ldd	r25, Y+38	; 0x26
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	3f ef       	ldi	r19, 0xFF	; 255
    16d2:	4f e7       	ldi	r20, 0x7F	; 127
    16d4:	57 e4       	ldi	r21, 0x47	; 71
    16d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16da:	18 16       	cp	r1, r24
    16dc:	4c f5       	brge	.+82     	; 0x1730 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16de:	6f a1       	ldd	r22, Y+39	; 0x27
    16e0:	78 a5       	ldd	r23, Y+40	; 0x28
    16e2:	89 a5       	ldd	r24, Y+41	; 0x29
    16e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e2       	ldi	r20, 0x20	; 32
    16ec:	51 e4       	ldi	r21, 0x41	; 65
    16ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	bc 01       	movw	r22, r24
    16f8:	cd 01       	movw	r24, r26
    16fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	9a a3       	std	Y+34, r25	; 0x22
    1704:	89 a3       	std	Y+33, r24	; 0x21
    1706:	0f c0       	rjmp	.+30     	; 0x1726 <LCD_sendCommand+0x1ca>
    1708:	89 e1       	ldi	r24, 0x19	; 25
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	98 a3       	std	Y+32, r25	; 0x20
    170e:	8f 8f       	std	Y+31, r24	; 0x1f
    1710:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1712:	98 a1       	ldd	r25, Y+32	; 0x20
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <LCD_sendCommand+0x1b8>
    1718:	98 a3       	std	Y+32, r25	; 0x20
    171a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171c:	89 a1       	ldd	r24, Y+33	; 0x21
    171e:	9a a1       	ldd	r25, Y+34	; 0x22
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	9a a3       	std	Y+34, r25	; 0x22
    1724:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1726:	89 a1       	ldd	r24, Y+33	; 0x21
    1728:	9a a1       	ldd	r25, Y+34	; 0x22
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	69 f7       	brne	.-38     	; 0x1708 <LCD_sendCommand+0x1ac>
    172e:	14 c0       	rjmp	.+40     	; 0x1758 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1730:	6b a1       	ldd	r22, Y+35	; 0x23
    1732:	7c a1       	ldd	r23, Y+36	; 0x24
    1734:	8d a1       	ldd	r24, Y+37	; 0x25
    1736:	9e a1       	ldd	r25, Y+38	; 0x26
    1738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9a a3       	std	Y+34, r25	; 0x22
    1742:	89 a3       	std	Y+33, r24	; 0x21
    1744:	89 a1       	ldd	r24, Y+33	; 0x21
    1746:	9a a1       	ldd	r25, Y+34	; 0x22
    1748:	9e 8f       	std	Y+30, r25	; 0x1e
    174a:	8d 8f       	std	Y+29, r24	; 0x1d
    174c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    174e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <LCD_sendCommand+0x1f4>
    1754:	9e 8f       	std	Y+30, r25	; 0x1e
    1756:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	69 ad       	ldd	r22, Y+57	; 0x39
    175c:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePort>
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a0 e8       	ldi	r26, 0x80	; 128
    1766:	bf e3       	ldi	r27, 0x3F	; 63
    1768:	89 8f       	std	Y+25, r24	; 0x19
    176a:	9a 8f       	std	Y+26, r25	; 0x1a
    176c:	ab 8f       	std	Y+27, r26	; 0x1b
    176e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1770:	69 8d       	ldd	r22, Y+25	; 0x19
    1772:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1774:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1776:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a e7       	ldi	r20, 0x7A	; 122
    177e:	53 e4       	ldi	r21, 0x43	; 67
    1780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	8d 8b       	std	Y+21, r24	; 0x15
    178a:	9e 8b       	std	Y+22, r25	; 0x16
    178c:	af 8b       	std	Y+23, r26	; 0x17
    178e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1790:	6d 89       	ldd	r22, Y+21	; 0x15
    1792:	7e 89       	ldd	r23, Y+22	; 0x16
    1794:	8f 89       	ldd	r24, Y+23	; 0x17
    1796:	98 8d       	ldd	r25, Y+24	; 0x18
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e8       	ldi	r20, 0x80	; 128
    179e:	5f e3       	ldi	r21, 0x3F	; 63
    17a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a4:	88 23       	and	r24, r24
    17a6:	2c f4       	brge	.+10     	; 0x17b2 <LCD_sendCommand+0x256>
		__ticks = 1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9c 8b       	std	Y+20, r25	; 0x14
    17ae:	8b 8b       	std	Y+19, r24	; 0x13
    17b0:	3f c0       	rjmp	.+126    	; 0x1830 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    17b2:	6d 89       	ldd	r22, Y+21	; 0x15
    17b4:	7e 89       	ldd	r23, Y+22	; 0x16
    17b6:	8f 89       	ldd	r24, Y+23	; 0x17
    17b8:	98 8d       	ldd	r25, Y+24	; 0x18
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	3f ef       	ldi	r19, 0xFF	; 255
    17be:	4f e7       	ldi	r20, 0x7F	; 127
    17c0:	57 e4       	ldi	r21, 0x47	; 71
    17c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c6:	18 16       	cp	r1, r24
    17c8:	4c f5       	brge	.+82     	; 0x181c <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ca:	69 8d       	ldd	r22, Y+25	; 0x19
    17cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e2       	ldi	r20, 0x20	; 32
    17d8:	51 e4       	ldi	r21, 0x41	; 65
    17da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	9c 8b       	std	Y+20, r25	; 0x14
    17f0:	8b 8b       	std	Y+19, r24	; 0x13
    17f2:	0f c0       	rjmp	.+30     	; 0x1812 <LCD_sendCommand+0x2b6>
    17f4:	89 e1       	ldi	r24, 0x19	; 25
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	9a 8b       	std	Y+18, r25	; 0x12
    17fa:	89 8b       	std	Y+17, r24	; 0x11
    17fc:	89 89       	ldd	r24, Y+17	; 0x11
    17fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <LCD_sendCommand+0x2a4>
    1804:	9a 8b       	std	Y+18, r25	; 0x12
    1806:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1808:	8b 89       	ldd	r24, Y+19	; 0x13
    180a:	9c 89       	ldd	r25, Y+20	; 0x14
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	9c 8b       	std	Y+20, r25	; 0x14
    1810:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1812:	8b 89       	ldd	r24, Y+19	; 0x13
    1814:	9c 89       	ldd	r25, Y+20	; 0x14
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	69 f7       	brne	.-38     	; 0x17f4 <LCD_sendCommand+0x298>
    181a:	14 c0       	rjmp	.+40     	; 0x1844 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181c:	6d 89       	ldd	r22, Y+21	; 0x15
    181e:	7e 89       	ldd	r23, Y+22	; 0x16
    1820:	8f 89       	ldd	r24, Y+23	; 0x17
    1822:	98 8d       	ldd	r25, Y+24	; 0x18
    1824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	9c 8b       	std	Y+20, r25	; 0x14
    182e:	8b 8b       	std	Y+19, r24	; 0x13
    1830:	8b 89       	ldd	r24, Y+19	; 0x13
    1832:	9c 89       	ldd	r25, Y+20	; 0x14
    1834:	98 8b       	std	Y+16, r25	; 0x10
    1836:	8f 87       	std	Y+15, r24	; 0x0f
    1838:	8f 85       	ldd	r24, Y+15	; 0x0f
    183a:	98 89       	ldd	r25, Y+16	; 0x10
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <LCD_sendCommand+0x2e0>
    1840:	98 8b       	std	Y+16, r25	; 0x10
    1842:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	62 e0       	ldi	r22, 0x02	; 2
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_writePin>
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	a0 e8       	ldi	r26, 0x80	; 128
    1854:	bf e3       	ldi	r27, 0x3F	; 63
    1856:	8b 87       	std	Y+11, r24	; 0x0b
    1858:	9c 87       	std	Y+12, r25	; 0x0c
    185a:	ad 87       	std	Y+13, r26	; 0x0d
    185c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1860:	7c 85       	ldd	r23, Y+12	; 0x0c
    1862:	8d 85       	ldd	r24, Y+13	; 0x0d
    1864:	9e 85       	ldd	r25, Y+14	; 0x0e
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	4a e7       	ldi	r20, 0x7A	; 122
    186c:	53 e4       	ldi	r21, 0x43	; 67
    186e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	8f 83       	std	Y+7, r24	; 0x07
    1878:	98 87       	std	Y+8, r25	; 0x08
    187a:	a9 87       	std	Y+9, r26	; 0x09
    187c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    187e:	6f 81       	ldd	r22, Y+7	; 0x07
    1880:	78 85       	ldd	r23, Y+8	; 0x08
    1882:	89 85       	ldd	r24, Y+9	; 0x09
    1884:	9a 85       	ldd	r25, Y+10	; 0x0a
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	40 e8       	ldi	r20, 0x80	; 128
    188c:	5f e3       	ldi	r21, 0x3F	; 63
    188e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1892:	88 23       	and	r24, r24
    1894:	2c f4       	brge	.+10     	; 0x18a0 <LCD_sendCommand+0x344>
		__ticks = 1;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	8d 83       	std	Y+5, r24	; 0x05
    189e:	3f c0       	rjmp	.+126    	; 0x191e <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    18a0:	6f 81       	ldd	r22, Y+7	; 0x07
    18a2:	78 85       	ldd	r23, Y+8	; 0x08
    18a4:	89 85       	ldd	r24, Y+9	; 0x09
    18a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	3f ef       	ldi	r19, 0xFF	; 255
    18ac:	4f e7       	ldi	r20, 0x7F	; 127
    18ae:	57 e4       	ldi	r21, 0x47	; 71
    18b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b4:	18 16       	cp	r1, r24
    18b6:	4c f5       	brge	.+82     	; 0x190a <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    18bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18be:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e2       	ldi	r20, 0x20	; 32
    18c6:	51 e4       	ldi	r21, 0x41	; 65
    18c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	bc 01       	movw	r22, r24
    18d2:	cd 01       	movw	r24, r26
    18d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	9e 83       	std	Y+6, r25	; 0x06
    18de:	8d 83       	std	Y+5, r24	; 0x05
    18e0:	0f c0       	rjmp	.+30     	; 0x1900 <LCD_sendCommand+0x3a4>
    18e2:	89 e1       	ldi	r24, 0x19	; 25
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	9c 83       	std	Y+4, r25	; 0x04
    18e8:	8b 83       	std	Y+3, r24	; 0x03
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <LCD_sendCommand+0x392>
    18f2:	9c 83       	std	Y+4, r25	; 0x04
    18f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f6:	8d 81       	ldd	r24, Y+5	; 0x05
    18f8:	9e 81       	ldd	r25, Y+6	; 0x06
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	9e 83       	std	Y+6, r25	; 0x06
    18fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1900:	8d 81       	ldd	r24, Y+5	; 0x05
    1902:	9e 81       	ldd	r25, Y+6	; 0x06
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	69 f7       	brne	.-38     	; 0x18e2 <LCD_sendCommand+0x386>
    1908:	14 c0       	rjmp	.+40     	; 0x1932 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190a:	6f 81       	ldd	r22, Y+7	; 0x07
    190c:	78 85       	ldd	r23, Y+8	; 0x08
    190e:	89 85       	ldd	r24, Y+9	; 0x09
    1910:	9a 85       	ldd	r25, Y+10	; 0x0a
    1912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	9e 83       	std	Y+6, r25	; 0x06
    191c:	8d 83       	std	Y+5, r24	; 0x05
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
    1920:	9e 81       	ldd	r25, Y+6	; 0x06
    1922:	9a 83       	std	Y+2, r25	; 0x02
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	9a 81       	ldd	r25, Y+2	; 0x02
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <LCD_sendCommand+0x3ce>
    192e:	9a 83       	std	Y+2, r25	; 0x02
    1930:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1932:	e9 96       	adiw	r28, 0x39	; 57
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	e9 97       	sbiw	r28, 0x39	; 57
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	41 e0       	ldi	r20, 0x01	; 1
    1960:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	61 e0       	ldi	r22, 0x01	; 1
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_writePin>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	a0 e8       	ldi	r26, 0x80	; 128
    1974:	bf e3       	ldi	r27, 0x3F	; 63
    1976:	8d ab       	std	Y+53, r24	; 0x35
    1978:	9e ab       	std	Y+54, r25	; 0x36
    197a:	af ab       	std	Y+55, r26	; 0x37
    197c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197e:	6d a9       	ldd	r22, Y+53	; 0x35
    1980:	7e a9       	ldd	r23, Y+54	; 0x36
    1982:	8f a9       	ldd	r24, Y+55	; 0x37
    1984:	98 ad       	ldd	r25, Y+56	; 0x38
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	4a e7       	ldi	r20, 0x7A	; 122
    198c:	53 e4       	ldi	r21, 0x43	; 67
    198e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	89 ab       	std	Y+49, r24	; 0x31
    1998:	9a ab       	std	Y+50, r25	; 0x32
    199a:	ab ab       	std	Y+51, r26	; 0x33
    199c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    199e:	69 a9       	ldd	r22, Y+49	; 0x31
    19a0:	7a a9       	ldd	r23, Y+50	; 0x32
    19a2:	8b a9       	ldd	r24, Y+51	; 0x33
    19a4:	9c a9       	ldd	r25, Y+52	; 0x34
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e8       	ldi	r20, 0x80	; 128
    19ac:	5f e3       	ldi	r21, 0x3F	; 63
    19ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b2:	88 23       	and	r24, r24
    19b4:	2c f4       	brge	.+10     	; 0x19c0 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	98 ab       	std	Y+48, r25	; 0x30
    19bc:	8f a7       	std	Y+47, r24	; 0x2f
    19be:	3f c0       	rjmp	.+126    	; 0x1a3e <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    19c0:	69 a9       	ldd	r22, Y+49	; 0x31
    19c2:	7a a9       	ldd	r23, Y+50	; 0x32
    19c4:	8b a9       	ldd	r24, Y+51	; 0x33
    19c6:	9c a9       	ldd	r25, Y+52	; 0x34
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	3f ef       	ldi	r19, 0xFF	; 255
    19cc:	4f e7       	ldi	r20, 0x7F	; 127
    19ce:	57 e4       	ldi	r21, 0x47	; 71
    19d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d4:	18 16       	cp	r1, r24
    19d6:	4c f5       	brge	.+82     	; 0x1a2a <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d8:	6d a9       	ldd	r22, Y+53	; 0x35
    19da:	7e a9       	ldd	r23, Y+54	; 0x36
    19dc:	8f a9       	ldd	r24, Y+55	; 0x37
    19de:	98 ad       	ldd	r25, Y+56	; 0x38
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e2       	ldi	r20, 0x20	; 32
    19e6:	51 e4       	ldi	r21, 0x41	; 65
    19e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	98 ab       	std	Y+48, r25	; 0x30
    19fe:	8f a7       	std	Y+47, r24	; 0x2f
    1a00:	0f c0       	rjmp	.+30     	; 0x1a20 <LCD_displayCharacter+0xdc>
    1a02:	89 e1       	ldi	r24, 0x19	; 25
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9e a7       	std	Y+46, r25	; 0x2e
    1a08:	8d a7       	std	Y+45, r24	; 0x2d
    1a0a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a0c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <LCD_displayCharacter+0xca>
    1a12:	9e a7       	std	Y+46, r25	; 0x2e
    1a14:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a18:	98 a9       	ldd	r25, Y+48	; 0x30
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	98 ab       	std	Y+48, r25	; 0x30
    1a1e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a22:	98 a9       	ldd	r25, Y+48	; 0x30
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	69 f7       	brne	.-38     	; 0x1a02 <LCD_displayCharacter+0xbe>
    1a28:	14 c0       	rjmp	.+40     	; 0x1a52 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a30:	9c a9       	ldd	r25, Y+52	; 0x34
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	98 ab       	std	Y+48, r25	; 0x30
    1a3c:	8f a7       	std	Y+47, r24	; 0x2f
    1a3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a40:	98 a9       	ldd	r25, Y+48	; 0x30
    1a42:	9c a7       	std	Y+44, r25	; 0x2c
    1a44:	8b a7       	std	Y+43, r24	; 0x2b
    1a46:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a48:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <LCD_displayCharacter+0x106>
    1a4e:	9c a7       	std	Y+44, r25	; 0x2c
    1a50:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	62 e0       	ldi	r22, 0x02	; 2
    1a56:	41 e0       	ldi	r20, 0x01	; 1
    1a58:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_writePin>
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 e8       	ldi	r26, 0x80	; 128
    1a62:	bf e3       	ldi	r27, 0x3F	; 63
    1a64:	8f a3       	std	Y+39, r24	; 0x27
    1a66:	98 a7       	std	Y+40, r25	; 0x28
    1a68:	a9 a7       	std	Y+41, r26	; 0x29
    1a6a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a6e:	78 a5       	ldd	r23, Y+40	; 0x28
    1a70:	89 a5       	ldd	r24, Y+41	; 0x29
    1a72:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	4a e7       	ldi	r20, 0x7A	; 122
    1a7a:	53 e4       	ldi	r21, 0x43	; 67
    1a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	8b a3       	std	Y+35, r24	; 0x23
    1a86:	9c a3       	std	Y+36, r25	; 0x24
    1a88:	ad a3       	std	Y+37, r26	; 0x25
    1a8a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a90:	8d a1       	ldd	r24, Y+37	; 0x25
    1a92:	9e a1       	ldd	r25, Y+38	; 0x26
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e8       	ldi	r20, 0x80	; 128
    1a9a:	5f e3       	ldi	r21, 0x3F	; 63
    1a9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa0:	88 23       	and	r24, r24
    1aa2:	2c f4       	brge	.+10     	; 0x1aae <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	9a a3       	std	Y+34, r25	; 0x22
    1aaa:	89 a3       	std	Y+33, r24	; 0x21
    1aac:	3f c0       	rjmp	.+126    	; 0x1b2c <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1aae:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ab4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	3f ef       	ldi	r19, 0xFF	; 255
    1aba:	4f e7       	ldi	r20, 0x7F	; 127
    1abc:	57 e4       	ldi	r21, 0x47	; 71
    1abe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac2:	18 16       	cp	r1, r24
    1ac4:	4c f5       	brge	.+82     	; 0x1b18 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ac8:	78 a5       	ldd	r23, Y+40	; 0x28
    1aca:	89 a5       	ldd	r24, Y+41	; 0x29
    1acc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e2       	ldi	r20, 0x20	; 32
    1ad4:	51 e4       	ldi	r21, 0x41	; 65
    1ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	bc 01       	movw	r22, r24
    1ae0:	cd 01       	movw	r24, r26
    1ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9a a3       	std	Y+34, r25	; 0x22
    1aec:	89 a3       	std	Y+33, r24	; 0x21
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <LCD_displayCharacter+0x1ca>
    1af0:	89 e1       	ldi	r24, 0x19	; 25
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	98 a3       	std	Y+32, r25	; 0x20
    1af6:	8f 8f       	std	Y+31, r24	; 0x1f
    1af8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1afa:	98 a1       	ldd	r25, Y+32	; 0x20
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <LCD_displayCharacter+0x1b8>
    1b00:	98 a3       	std	Y+32, r25	; 0x20
    1b02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b04:	89 a1       	ldd	r24, Y+33	; 0x21
    1b06:	9a a1       	ldd	r25, Y+34	; 0x22
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	9a a3       	std	Y+34, r25	; 0x22
    1b0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b10:	9a a1       	ldd	r25, Y+34	; 0x22
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	69 f7       	brne	.-38     	; 0x1af0 <LCD_displayCharacter+0x1ac>
    1b16:	14 c0       	rjmp	.+40     	; 0x1b40 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b18:	6b a1       	ldd	r22, Y+35	; 0x23
    1b1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	9a a3       	std	Y+34, r25	; 0x22
    1b2a:	89 a3       	std	Y+33, r24	; 0x21
    1b2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b30:	9e 8f       	std	Y+30, r25	; 0x1e
    1b32:	8d 8f       	std	Y+29, r24	; 0x1d
    1b34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <LCD_displayCharacter+0x1f4>
    1b3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b3e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1b40:	82 e0       	ldi	r24, 0x02	; 2
    1b42:	69 ad       	ldd	r22, Y+57	; 0x39
    1b44:	0e 94 0a 09 	call	0x1214	; 0x1214 <GPIO_writePort>
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a0 e8       	ldi	r26, 0x80	; 128
    1b4e:	bf e3       	ldi	r27, 0x3F	; 63
    1b50:	89 8f       	std	Y+25, r24	; 0x19
    1b52:	9a 8f       	std	Y+26, r25	; 0x1a
    1b54:	ab 8f       	std	Y+27, r26	; 0x1b
    1b56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b58:	69 8d       	ldd	r22, Y+25	; 0x19
    1b5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	4a e7       	ldi	r20, 0x7A	; 122
    1b66:	53 e4       	ldi	r21, 0x43	; 67
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	8d 8b       	std	Y+21, r24	; 0x15
    1b72:	9e 8b       	std	Y+22, r25	; 0x16
    1b74:	af 8b       	std	Y+23, r26	; 0x17
    1b76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b78:	6d 89       	ldd	r22, Y+21	; 0x15
    1b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e8       	ldi	r20, 0x80	; 128
    1b86:	5f e3       	ldi	r21, 0x3F	; 63
    1b88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b8c:	88 23       	and	r24, r24
    1b8e:	2c f4       	brge	.+10     	; 0x1b9a <LCD_displayCharacter+0x256>
		__ticks = 1;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	9c 8b       	std	Y+20, r25	; 0x14
    1b96:	8b 8b       	std	Y+19, r24	; 0x13
    1b98:	3f c0       	rjmp	.+126    	; 0x1c18 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	3f ef       	ldi	r19, 0xFF	; 255
    1ba6:	4f e7       	ldi	r20, 0x7F	; 127
    1ba8:	57 e4       	ldi	r21, 0x47	; 71
    1baa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bae:	18 16       	cp	r1, r24
    1bb0:	4c f5       	brge	.+82     	; 0x1c04 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e2       	ldi	r20, 0x20	; 32
    1bc0:	51 e4       	ldi	r21, 0x41	; 65
    1bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	bc 01       	movw	r22, r24
    1bcc:	cd 01       	movw	r24, r26
    1bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	9c 8b       	std	Y+20, r25	; 0x14
    1bd8:	8b 8b       	std	Y+19, r24	; 0x13
    1bda:	0f c0       	rjmp	.+30     	; 0x1bfa <LCD_displayCharacter+0x2b6>
    1bdc:	89 e1       	ldi	r24, 0x19	; 25
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9a 8b       	std	Y+18, r25	; 0x12
    1be2:	89 8b       	std	Y+17, r24	; 0x11
    1be4:	89 89       	ldd	r24, Y+17	; 0x11
    1be6:	9a 89       	ldd	r25, Y+18	; 0x12
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_displayCharacter+0x2a4>
    1bec:	9a 8b       	std	Y+18, r25	; 0x12
    1bee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	9c 8b       	std	Y+20, r25	; 0x14
    1bf8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	69 f7       	brne	.-38     	; 0x1bdc <LCD_displayCharacter+0x298>
    1c02:	14 c0       	rjmp	.+40     	; 0x1c2c <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c04:	6d 89       	ldd	r22, Y+21	; 0x15
    1c06:	7e 89       	ldd	r23, Y+22	; 0x16
    1c08:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	9c 8b       	std	Y+20, r25	; 0x14
    1c16:	8b 8b       	std	Y+19, r24	; 0x13
    1c18:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1c:	98 8b       	std	Y+16, r25	; 0x10
    1c1e:	8f 87       	std	Y+15, r24	; 0x0f
    1c20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c22:	98 89       	ldd	r25, Y+16	; 0x10
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <LCD_displayCharacter+0x2e0>
    1c28:	98 8b       	std	Y+16, r25	; 0x10
    1c2a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	62 e0       	ldi	r22, 0x02	; 2
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_writePin>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	a0 e8       	ldi	r26, 0x80	; 128
    1c3c:	bf e3       	ldi	r27, 0x3F	; 63
    1c3e:	8b 87       	std	Y+11, r24	; 0x0b
    1c40:	9c 87       	std	Y+12, r25	; 0x0c
    1c42:	ad 87       	std	Y+13, r26	; 0x0d
    1c44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	4a e7       	ldi	r20, 0x7A	; 122
    1c54:	53 e4       	ldi	r21, 0x43	; 67
    1c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	8f 83       	std	Y+7, r24	; 0x07
    1c60:	98 87       	std	Y+8, r25	; 0x08
    1c62:	a9 87       	std	Y+9, r26	; 0x09
    1c64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c66:	6f 81       	ldd	r22, Y+7	; 0x07
    1c68:	78 85       	ldd	r23, Y+8	; 0x08
    1c6a:	89 85       	ldd	r24, Y+9	; 0x09
    1c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e8       	ldi	r20, 0x80	; 128
    1c74:	5f e3       	ldi	r21, 0x3F	; 63
    1c76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7a:	88 23       	and	r24, r24
    1c7c:	2c f4       	brge	.+10     	; 0x1c88 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	9e 83       	std	Y+6, r25	; 0x06
    1c84:	8d 83       	std	Y+5, r24	; 0x05
    1c86:	3f c0       	rjmp	.+126    	; 0x1d06 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1c88:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8a:	78 85       	ldd	r23, Y+8	; 0x08
    1c8c:	89 85       	ldd	r24, Y+9	; 0x09
    1c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	3f ef       	ldi	r19, 0xFF	; 255
    1c94:	4f e7       	ldi	r20, 0x7F	; 127
    1c96:	57 e4       	ldi	r21, 0x47	; 71
    1c98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c9c:	18 16       	cp	r1, r24
    1c9e:	4c f5       	brge	.+82     	; 0x1cf2 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e2       	ldi	r20, 0x20	; 32
    1cae:	51 e4       	ldi	r21, 0x41	; 65
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	bc 01       	movw	r22, r24
    1cba:	cd 01       	movw	r24, r26
    1cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
    1cc8:	0f c0       	rjmp	.+30     	; 0x1ce8 <LCD_displayCharacter+0x3a4>
    1cca:	89 e1       	ldi	r24, 0x19	; 25
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9c 83       	std	Y+4, r25	; 0x04
    1cd0:	8b 83       	std	Y+3, r24	; 0x03
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	f1 f7       	brne	.-4      	; 0x1cd6 <LCD_displayCharacter+0x392>
    1cda:	9c 83       	std	Y+4, r25	; 0x04
    1cdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	9e 83       	std	Y+6, r25	; 0x06
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	69 f7       	brne	.-38     	; 0x1cca <LCD_displayCharacter+0x386>
    1cf0:	14 c0       	rjmp	.+40     	; 0x1d1a <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf4:	78 85       	ldd	r23, Y+8	; 0x08
    1cf6:	89 85       	ldd	r24, Y+9	; 0x09
    1cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	9e 83       	std	Y+6, r25	; 0x06
    1d04:	8d 83       	std	Y+5, r24	; 0x05
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	9a 81       	ldd	r25, Y+2	; 0x02
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <LCD_displayCharacter+0x3ce>
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1d1a:	e9 96       	adiw	r28, 0x39	; 57
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <LCD_displayString+0x6>
    1d32:	0f 92       	push	r0
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	9b 83       	std	Y+3, r25	; 0x03
    1d3a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d3c:	19 82       	std	Y+1, r1	; 0x01
    1d3e:	0e c0       	rjmp	.+28     	; 0x1d5c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	e2 0f       	add	r30, r18
    1d4e:	f3 1f       	adc	r31, r19
    1d50:	80 81       	ld	r24, Z
    1d52:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_displayCharacter>
		i++;
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	8f 5f       	subi	r24, 0xFF	; 255
    1d5a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	9b 81       	ldd	r25, Y+3	; 0x03
    1d66:	fc 01       	movw	r30, r24
    1d68:	e2 0f       	add	r30, r18
    1d6a:	f3 1f       	adc	r31, r19
    1d6c:	80 81       	ld	r24, Z
    1d6e:	88 23       	and	r24, r24
    1d70:	39 f7       	brne	.-50     	; 0x1d40 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <LCD_moveCursor+0x6>
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <LCD_moveCursor+0x8>
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	8a 83       	std	Y+2, r24	; 0x02
    1d8e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	3d 83       	std	Y+5, r19	; 0x05
    1d98:	2c 83       	std	Y+4, r18	; 0x04
    1d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9e:	81 30       	cpi	r24, 0x01	; 1
    1da0:	91 05       	cpc	r25, r1
    1da2:	c1 f0       	breq	.+48     	; 0x1dd4 <LCD_moveCursor+0x56>
    1da4:	2c 81       	ldd	r18, Y+4	; 0x04
    1da6:	3d 81       	ldd	r19, Y+5	; 0x05
    1da8:	22 30       	cpi	r18, 0x02	; 2
    1daa:	31 05       	cpc	r19, r1
    1dac:	2c f4       	brge	.+10     	; 0x1db8 <LCD_moveCursor+0x3a>
    1dae:	8c 81       	ldd	r24, Y+4	; 0x04
    1db0:	9d 81       	ldd	r25, Y+5	; 0x05
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	61 f0       	breq	.+24     	; 0x1dce <LCD_moveCursor+0x50>
    1db6:	19 c0       	rjmp	.+50     	; 0x1dea <LCD_moveCursor+0x6c>
    1db8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dba:	3d 81       	ldd	r19, Y+5	; 0x05
    1dbc:	22 30       	cpi	r18, 0x02	; 2
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	69 f0       	breq	.+26     	; 0x1ddc <LCD_moveCursor+0x5e>
    1dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc6:	83 30       	cpi	r24, 0x03	; 3
    1dc8:	91 05       	cpc	r25, r1
    1dca:	61 f0       	breq	.+24     	; 0x1de4 <LCD_moveCursor+0x66>
    1dcc:	0e c0       	rjmp	.+28     	; 0x1dea <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	0b c0       	rjmp	.+22     	; 0x1dea <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	80 5c       	subi	r24, 0xC0	; 192
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	07 c0       	rjmp	.+14     	; 0x1dea <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	80 5f       	subi	r24, 0xF0	; 240
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	03 c0       	rjmp	.+6      	; 0x1dea <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	80 5b       	subi	r24, 0xB0	; 176
    1de8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	80 68       	ori	r24, 0x80	; 128
    1dee:	0e 94 ae 0a 	call	0x155c	; 0x155c <LCD_sendCommand>
}
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <LCD_displayStringRowColumn+0x6>
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <LCD_displayStringRowColumn+0x8>
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	6a 83       	std	Y+2, r22	; 0x02
    1e12:	5c 83       	std	Y+4, r21	; 0x04
    1e14:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	6a 81       	ldd	r22, Y+2	; 0x02
    1e1a:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LCD_displayString>
}
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	62 97       	sbiw	r28, 0x12	; 18
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	9a 8b       	std	Y+18, r25	; 0x12
    1e4a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1e4c:	89 89       	ldd	r24, Y+17	; 0x11
    1e4e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e50:	9e 01       	movw	r18, r28
    1e52:	2f 5f       	subi	r18, 0xFF	; 255
    1e54:	3f 4f       	sbci	r19, 0xFF	; 255
    1e56:	b9 01       	movw	r22, r18
    1e58:	4a e0       	ldi	r20, 0x0A	; 10
    1e5a:	50 e0       	ldi	r21, 0x00	; 0
    1e5c:	0e 94 34 18 	call	0x3068	; 0x3068 <itoa>
   LCD_displayString(buff); /* Display the string */
    1e60:	ce 01       	movw	r24, r28
    1e62:	01 96       	adiw	r24, 0x01	; 1
    1e64:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <LCD_displayString>
}
    1e68:	62 96       	adiw	r28, 0x12	; 18
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	0e 94 ae 0a 	call	0x155c	; 0x155c <LCD_sendCommand>
}
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <step1>:
#include <util/delay.h>


uint8 key;

void step1(void){
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	a0 97       	sbiw	r28, 0x20	; 32
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	de bf       	out	0x3e, r29	; 62
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	cd bf       	out	0x3d, r28	; 61
	LCD_displayStringRowColumn(0,1,"Pls Enter Pass");
    1ea2:	26 e6       	ldi	r18, 0x66	; 102
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	61 e0       	ldi	r22, 0x01	; 1
    1eaa:	a9 01       	movw	r20, r18
    1eac:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
	for(uint8 i = 0 ; i < 5 ; i++){
    1eb0:	18 a2       	std	Y+32, r1	; 0x20
    1eb2:	87 c0       	rjmp	.+270    	; 0x1fc2 <step1+0x134>
		/* Get the pressed button from keypad */
		key = KEYPAD_getPressedKey();
    1eb4:	0e 94 93 09 	call	0x1326	; 0x1326 <KEYPAD_getPressedKey>
    1eb8:	80 93 00 01 	sts	0x0100, r24
		LCD_displayStringRowColumn(1,i+1,"*");
    1ebc:	88 a1       	ldd	r24, Y+32	; 0x20
    1ebe:	98 2f       	mov	r25, r24
    1ec0:	9f 5f       	subi	r25, 0xFF	; 255
    1ec2:	25 e7       	ldi	r18, 0x75	; 117
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	69 2f       	mov	r22, r25
    1eca:	a9 01       	movw	r20, r18
    1ecc:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
		UART_sendByte(key);
    1ed0:	80 91 00 01 	lds	r24, 0x0100
    1ed4:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	a6 e9       	ldi	r26, 0x96	; 150
    1ede:	b3 e4       	ldi	r27, 0x43	; 67
    1ee0:	89 8f       	std	Y+25, r24	; 0x19
    1ee2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ee4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ee6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	4a e7       	ldi	r20, 0x7A	; 122
    1ef6:	53 e4       	ldi	r21, 0x43	; 67
    1ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	8d 8b       	std	Y+21, r24	; 0x15
    1f02:	9e 8b       	std	Y+22, r25	; 0x16
    1f04:	af 8b       	std	Y+23, r26	; 0x17
    1f06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f08:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e8       	ldi	r20, 0x80	; 128
    1f16:	5f e3       	ldi	r21, 0x3F	; 63
    1f18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f1c:	88 23       	and	r24, r24
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <step1+0x9c>
		__ticks = 1;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9c 8b       	std	Y+20, r25	; 0x14
    1f26:	8b 8b       	std	Y+19, r24	; 0x13
    1f28:	3f c0       	rjmp	.+126    	; 0x1fa8 <step1+0x11a>
	else if (__tmp > 65535)
    1f2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f30:	98 8d       	ldd	r25, Y+24	; 0x18
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	3f ef       	ldi	r19, 0xFF	; 255
    1f36:	4f e7       	ldi	r20, 0x7F	; 127
    1f38:	57 e4       	ldi	r21, 0x47	; 71
    1f3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f3e:	18 16       	cp	r1, r24
    1f40:	4c f5       	brge	.+82     	; 0x1f94 <step1+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f42:	69 8d       	ldd	r22, Y+25	; 0x19
    1f44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e2       	ldi	r20, 0x20	; 32
    1f50:	51 e4       	ldi	r21, 0x41	; 65
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9c 8b       	std	Y+20, r25	; 0x14
    1f68:	8b 8b       	std	Y+19, r24	; 0x13
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <step1+0xfc>
    1f6c:	89 e1       	ldi	r24, 0x19	; 25
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9a 8b       	std	Y+18, r25	; 0x12
    1f72:	89 8b       	std	Y+17, r24	; 0x11
    1f74:	89 89       	ldd	r24, Y+17	; 0x11
    1f76:	9a 89       	ldd	r25, Y+18	; 0x12
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <step1+0xea>
    1f7c:	9a 8b       	std	Y+18, r25	; 0x12
    1f7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f80:	8b 89       	ldd	r24, Y+19	; 0x13
    1f82:	9c 89       	ldd	r25, Y+20	; 0x14
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	9c 8b       	std	Y+20, r25	; 0x14
    1f88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	69 f7       	brne	.-38     	; 0x1f6c <step1+0xde>
    1f92:	14 c0       	rjmp	.+40     	; 0x1fbc <step1+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f94:	6d 89       	ldd	r22, Y+21	; 0x15
    1f96:	7e 89       	ldd	r23, Y+22	; 0x16
    1f98:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9c 8b       	std	Y+20, r25	; 0x14
    1fa6:	8b 8b       	std	Y+19, r24	; 0x13
    1fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1faa:	9c 89       	ldd	r25, Y+20	; 0x14
    1fac:	98 8b       	std	Y+16, r25	; 0x10
    1fae:	8f 87       	std	Y+15, r24	; 0x0f
    1fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb2:	98 89       	ldd	r25, Y+16	; 0x10
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <step1+0x126>
    1fb8:	98 8b       	std	Y+16, r25	; 0x10
    1fba:	8f 87       	std	Y+15, r24	; 0x0f

uint8 key;

void step1(void){
	LCD_displayStringRowColumn(0,1,"Pls Enter Pass");
	for(uint8 i = 0 ; i < 5 ; i++){
    1fbc:	88 a1       	ldd	r24, Y+32	; 0x20
    1fbe:	8f 5f       	subi	r24, 0xFF	; 255
    1fc0:	88 a3       	std	Y+32, r24	; 0x20
    1fc2:	88 a1       	ldd	r24, Y+32	; 0x20
    1fc4:	85 30       	cpi	r24, 0x05	; 5
    1fc6:	08 f4       	brcc	.+2      	; 0x1fca <step1+0x13c>
    1fc8:	75 cf       	rjmp	.-278    	; 0x1eb4 <step1+0x26>
		key = KEYPAD_getPressedKey();
		LCD_displayStringRowColumn(1,i+1,"*");
		UART_sendByte(key);
		_delay_ms(300);
	}
	LCD_displayStringRowColumn(0,1,"              ");
    1fca:	27 e7       	ldi	r18, 0x77	; 119
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	61 e0       	ldi	r22, 0x01	; 1
    1fd2:	a9 01       	movw	r20, r18
    1fd4:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
	for(uint8 i = 0 ; i < 5 ; i++){
    1fd8:	1f 8e       	std	Y+31, r1	; 0x1f
    1fda:	0d c0       	rjmp	.+26     	; 0x1ff6 <step1+0x168>
		LCD_displayStringRowColumn(1,i+1," ");
    1fdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fde:	98 2f       	mov	r25, r24
    1fe0:	9f 5f       	subi	r25, 0xFF	; 255
    1fe2:	26 e8       	ldi	r18, 0x86	; 134
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	69 2f       	mov	r22, r25
    1fea:	a9 01       	movw	r20, r18
    1fec:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,i+1,"*");
		UART_sendByte(key);
		_delay_ms(300);
	}
	LCD_displayStringRowColumn(0,1,"              ");
	for(uint8 i = 0 ; i < 5 ; i++){
    1ff0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ff2:	8f 5f       	subi	r24, 0xFF	; 255
    1ff4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ff6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ff8:	85 30       	cpi	r24, 0x05	; 5
    1ffa:	80 f3       	brcs	.-32     	; 0x1fdc <step1+0x14e>
		LCD_displayStringRowColumn(1,i+1," ");
	}
	LCD_displayStringRowColumn(0,1,"Renter Pass");
    1ffc:	28 e8       	ldi	r18, 0x88	; 136
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	61 e0       	ldi	r22, 0x01	; 1
    2004:	a9 01       	movw	r20, r18
    2006:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
	for(uint8 i = 0 ; i < 5 ; i++){
    200a:	1e 8e       	std	Y+30, r1	; 0x1e
    200c:	87 c0       	rjmp	.+270    	; 0x211c <step1+0x28e>
		/* Get the pressed button from keypad */
		key = KEYPAD_getPressedKey();
    200e:	0e 94 93 09 	call	0x1326	; 0x1326 <KEYPAD_getPressedKey>
    2012:	80 93 00 01 	sts	0x0100, r24
		LCD_displayStringRowColumn(1,i+1,"*");
    2016:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2018:	98 2f       	mov	r25, r24
    201a:	9f 5f       	subi	r25, 0xFF	; 255
    201c:	25 e7       	ldi	r18, 0x75	; 117
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	69 2f       	mov	r22, r25
    2024:	a9 01       	movw	r20, r18
    2026:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
		UART_sendByte(key);
    202a:	80 91 00 01 	lds	r24, 0x0100
    202e:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	a6 e9       	ldi	r26, 0x96	; 150
    2038:	b3 e4       	ldi	r27, 0x43	; 67
    203a:	8b 87       	std	Y+11, r24	; 0x0b
    203c:	9c 87       	std	Y+12, r25	; 0x0c
    203e:	ad 87       	std	Y+13, r26	; 0x0d
    2040:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2042:	6b 85       	ldd	r22, Y+11	; 0x0b
    2044:	7c 85       	ldd	r23, Y+12	; 0x0c
    2046:	8d 85       	ldd	r24, Y+13	; 0x0d
    2048:	9e 85       	ldd	r25, Y+14	; 0x0e
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	4a e7       	ldi	r20, 0x7A	; 122
    2050:	53 e4       	ldi	r21, 0x43	; 67
    2052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	8f 83       	std	Y+7, r24	; 0x07
    205c:	98 87       	std	Y+8, r25	; 0x08
    205e:	a9 87       	std	Y+9, r26	; 0x09
    2060:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2062:	6f 81       	ldd	r22, Y+7	; 0x07
    2064:	78 85       	ldd	r23, Y+8	; 0x08
    2066:	89 85       	ldd	r24, Y+9	; 0x09
    2068:	9a 85       	ldd	r25, Y+10	; 0x0a
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e8       	ldi	r20, 0x80	; 128
    2070:	5f e3       	ldi	r21, 0x3F	; 63
    2072:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2076:	88 23       	and	r24, r24
    2078:	2c f4       	brge	.+10     	; 0x2084 <step1+0x1f6>
		__ticks = 1;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	9e 83       	std	Y+6, r25	; 0x06
    2080:	8d 83       	std	Y+5, r24	; 0x05
    2082:	3f c0       	rjmp	.+126    	; 0x2102 <step1+0x274>
	else if (__tmp > 65535)
    2084:	6f 81       	ldd	r22, Y+7	; 0x07
    2086:	78 85       	ldd	r23, Y+8	; 0x08
    2088:	89 85       	ldd	r24, Y+9	; 0x09
    208a:	9a 85       	ldd	r25, Y+10	; 0x0a
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	3f ef       	ldi	r19, 0xFF	; 255
    2090:	4f e7       	ldi	r20, 0x7F	; 127
    2092:	57 e4       	ldi	r21, 0x47	; 71
    2094:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2098:	18 16       	cp	r1, r24
    209a:	4c f5       	brge	.+82     	; 0x20ee <step1+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209c:	6b 85       	ldd	r22, Y+11	; 0x0b
    209e:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e2       	ldi	r20, 0x20	; 32
    20aa:	51 e4       	ldi	r21, 0x41	; 65
    20ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	bc 01       	movw	r22, r24
    20b6:	cd 01       	movw	r24, r26
    20b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	9e 83       	std	Y+6, r25	; 0x06
    20c2:	8d 83       	std	Y+5, r24	; 0x05
    20c4:	0f c0       	rjmp	.+30     	; 0x20e4 <step1+0x256>
    20c6:	89 e1       	ldi	r24, 0x19	; 25
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	9c 83       	std	Y+4, r25	; 0x04
    20cc:	8b 83       	std	Y+3, r24	; 0x03
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <step1+0x244>
    20d6:	9c 83       	std	Y+4, r25	; 0x04
    20d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20da:	8d 81       	ldd	r24, Y+5	; 0x05
    20dc:	9e 81       	ldd	r25, Y+6	; 0x06
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	9e 83       	std	Y+6, r25	; 0x06
    20e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e4:	8d 81       	ldd	r24, Y+5	; 0x05
    20e6:	9e 81       	ldd	r25, Y+6	; 0x06
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	69 f7       	brne	.-38     	; 0x20c6 <step1+0x238>
    20ec:	14 c0       	rjmp	.+40     	; 0x2116 <step1+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ee:	6f 81       	ldd	r22, Y+7	; 0x07
    20f0:	78 85       	ldd	r23, Y+8	; 0x08
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	9e 83       	std	Y+6, r25	; 0x06
    2100:	8d 83       	std	Y+5, r24	; 0x05
    2102:	8d 81       	ldd	r24, Y+5	; 0x05
    2104:	9e 81       	ldd	r25, Y+6	; 0x06
    2106:	9a 83       	std	Y+2, r25	; 0x02
    2108:	89 83       	std	Y+1, r24	; 0x01
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	9a 81       	ldd	r25, Y+2	; 0x02
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <step1+0x280>
    2112:	9a 83       	std	Y+2, r25	; 0x02
    2114:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayStringRowColumn(0,1,"              ");
	for(uint8 i = 0 ; i < 5 ; i++){
		LCD_displayStringRowColumn(1,i+1," ");
	}
	LCD_displayStringRowColumn(0,1,"Renter Pass");
	for(uint8 i = 0 ; i < 5 ; i++){
    2116:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2118:	8f 5f       	subi	r24, 0xFF	; 255
    211a:	8e 8f       	std	Y+30, r24	; 0x1e
    211c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    211e:	85 30       	cpi	r24, 0x05	; 5
    2120:	08 f4       	brcc	.+2      	; 0x2124 <step1+0x296>
    2122:	75 cf       	rjmp	.-278    	; 0x200e <step1+0x180>
		key = KEYPAD_getPressedKey();
		LCD_displayStringRowColumn(1,i+1,"*");
		UART_sendByte(key);
		_delay_ms(300);
	}
	for(uint8 i = 0 ; i < 5 ; i++){
    2124:	1d 8e       	std	Y+29, r1	; 0x1d
    2126:	0d c0       	rjmp	.+26     	; 0x2142 <step1+0x2b4>
		LCD_displayStringRowColumn(1,i+1," ");
    2128:	8d 8d       	ldd	r24, Y+29	; 0x1d
    212a:	98 2f       	mov	r25, r24
    212c:	9f 5f       	subi	r25, 0xFF	; 255
    212e:	26 e8       	ldi	r18, 0x86	; 134
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	69 2f       	mov	r22, r25
    2136:	a9 01       	movw	r20, r18
    2138:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
		key = KEYPAD_getPressedKey();
		LCD_displayStringRowColumn(1,i+1,"*");
		UART_sendByte(key);
		_delay_ms(300);
	}
	for(uint8 i = 0 ; i < 5 ; i++){
    213c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    213e:	8f 5f       	subi	r24, 0xFF	; 255
    2140:	8d 8f       	std	Y+29, r24	; 0x1d
    2142:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2144:	85 30       	cpi	r24, 0x05	; 5
    2146:	80 f3       	brcs	.-32     	; 0x2128 <step1+0x29a>
		LCD_displayStringRowColumn(1,i+1," ");
	}
	LCD_displayStringRowColumn(0,1,"              ");
    2148:	27 e7       	ldi	r18, 0x77	; 119
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	61 e0       	ldi	r22, 0x01	; 1
    2150:	a9 01       	movw	r20, r18
    2152:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
}
    2156:	a0 96       	adiw	r28, 0x20	; 32
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	08 95       	ret

00002168 <step2>:
void step2(void){
    2168:	df 93       	push	r29
    216a:	cf 93       	push	r28
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
	LCD_displayStringRowColumn(0,1,"+:Open Door");
    2170:	24 e9       	ldi	r18, 0x94	; 148
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	61 e0       	ldi	r22, 0x01	; 1
    2178:	a9 01       	movw	r20, r18
    217a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,1,"-:Change Pass");
    217e:	20 ea       	ldi	r18, 0xA0	; 160
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	61 e0       	ldi	r22, 0x01	; 1
    2186:	a9 01       	movw	r20, r18
    2188:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
	key = KEYPAD_getPressedKey();
    218c:	0e 94 93 09 	call	0x1326	; 0x1326 <KEYPAD_getPressedKey>
    2190:	80 93 00 01 	sts	0x0100, r24
	UART_sendByte(key);
    2194:	80 91 00 01 	lds	r24, 0x0100
    2198:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>
	LCD_displayStringRowColumn(0,1,"              ");
    219c:	27 e7       	ldi	r18, 0x77	; 119
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	61 e0       	ldi	r22, 0x01	; 1
    21a4:	a9 01       	movw	r20, r18
    21a6:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,1,"              ");
    21aa:	27 e7       	ldi	r18, 0x77	; 119
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	61 e0       	ldi	r22, 0x01	; 1
    21b2:	a9 01       	movw	r20, r18
    21b4:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
}
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <step3>:
void step3(void){
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
    21c6:	60 97       	sbiw	r28, 0x10	; 16
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61
	LCD_displayStringRowColumn(0,1,"Pls Enter Pass3");
    21d2:	2e ea       	ldi	r18, 0xAE	; 174
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	61 e0       	ldi	r22, 0x01	; 1
    21da:	a9 01       	movw	r20, r18
    21dc:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
	for(uint8 i = 0 ; i < 5 ; i++){
    21e0:	18 8a       	std	Y+16, r1	; 0x10
    21e2:	87 c0       	rjmp	.+270    	; 0x22f2 <step3+0x134>
		/* Get the pressed button from keypad */
		key = KEYPAD_getPressedKey();
    21e4:	0e 94 93 09 	call	0x1326	; 0x1326 <KEYPAD_getPressedKey>
    21e8:	80 93 00 01 	sts	0x0100, r24
		LCD_displayStringRowColumn(1,i+1,"*");
    21ec:	88 89       	ldd	r24, Y+16	; 0x10
    21ee:	98 2f       	mov	r25, r24
    21f0:	9f 5f       	subi	r25, 0xFF	; 255
    21f2:	25 e7       	ldi	r18, 0x75	; 117
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	69 2f       	mov	r22, r25
    21fa:	a9 01       	movw	r20, r18
    21fc:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	a6 e9       	ldi	r26, 0x96	; 150
    2206:	b3 e4       	ldi	r27, 0x43	; 67
    2208:	8b 87       	std	Y+11, r24	; 0x0b
    220a:	9c 87       	std	Y+12, r25	; 0x0c
    220c:	ad 87       	std	Y+13, r26	; 0x0d
    220e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2210:	6b 85       	ldd	r22, Y+11	; 0x0b
    2212:	7c 85       	ldd	r23, Y+12	; 0x0c
    2214:	8d 85       	ldd	r24, Y+13	; 0x0d
    2216:	9e 85       	ldd	r25, Y+14	; 0x0e
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	4a e7       	ldi	r20, 0x7A	; 122
    221e:	53 e4       	ldi	r21, 0x43	; 67
    2220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	8f 83       	std	Y+7, r24	; 0x07
    222a:	98 87       	std	Y+8, r25	; 0x08
    222c:	a9 87       	std	Y+9, r26	; 0x09
    222e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2230:	6f 81       	ldd	r22, Y+7	; 0x07
    2232:	78 85       	ldd	r23, Y+8	; 0x08
    2234:	89 85       	ldd	r24, Y+9	; 0x09
    2236:	9a 85       	ldd	r25, Y+10	; 0x0a
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e8       	ldi	r20, 0x80	; 128
    223e:	5f e3       	ldi	r21, 0x3F	; 63
    2240:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2244:	88 23       	and	r24, r24
    2246:	2c f4       	brge	.+10     	; 0x2252 <step3+0x94>
		__ticks = 1;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	8d 83       	std	Y+5, r24	; 0x05
    2250:	3f c0       	rjmp	.+126    	; 0x22d0 <step3+0x112>
	else if (__tmp > 65535)
    2252:	6f 81       	ldd	r22, Y+7	; 0x07
    2254:	78 85       	ldd	r23, Y+8	; 0x08
    2256:	89 85       	ldd	r24, Y+9	; 0x09
    2258:	9a 85       	ldd	r25, Y+10	; 0x0a
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	3f ef       	ldi	r19, 0xFF	; 255
    225e:	4f e7       	ldi	r20, 0x7F	; 127
    2260:	57 e4       	ldi	r21, 0x47	; 71
    2262:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2266:	18 16       	cp	r1, r24
    2268:	4c f5       	brge	.+82     	; 0x22bc <step3+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226a:	6b 85       	ldd	r22, Y+11	; 0x0b
    226c:	7c 85       	ldd	r23, Y+12	; 0x0c
    226e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2270:	9e 85       	ldd	r25, Y+14	; 0x0e
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e2       	ldi	r20, 0x20	; 32
    2278:	51 e4       	ldi	r21, 0x41	; 65
    227a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	bc 01       	movw	r22, r24
    2284:	cd 01       	movw	r24, r26
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	0f c0       	rjmp	.+30     	; 0x22b2 <step3+0xf4>
    2294:	89 e1       	ldi	r24, 0x19	; 25
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	8b 83       	std	Y+3, r24	; 0x03
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	9c 81       	ldd	r25, Y+4	; 0x04
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <step3+0xe2>
    22a4:	9c 83       	std	Y+4, r25	; 0x04
    22a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a8:	8d 81       	ldd	r24, Y+5	; 0x05
    22aa:	9e 81       	ldd	r25, Y+6	; 0x06
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	9e 83       	std	Y+6, r25	; 0x06
    22b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b2:	8d 81       	ldd	r24, Y+5	; 0x05
    22b4:	9e 81       	ldd	r25, Y+6	; 0x06
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	69 f7       	brne	.-38     	; 0x2294 <step3+0xd6>
    22ba:	14 c0       	rjmp	.+40     	; 0x22e4 <step3+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22bc:	6f 81       	ldd	r22, Y+7	; 0x07
    22be:	78 85       	ldd	r23, Y+8	; 0x08
    22c0:	89 85       	ldd	r24, Y+9	; 0x09
    22c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	8d 83       	std	Y+5, r24	; 0x05
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	9e 81       	ldd	r25, Y+6	; 0x06
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	9a 81       	ldd	r25, Y+2	; 0x02
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <step3+0x11e>
    22e0:	9a 83       	std	Y+2, r25	; 0x02
    22e2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
		UART_sendByte(key);
    22e4:	80 91 00 01 	lds	r24, 0x0100
    22e8:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>
	LCD_displayStringRowColumn(0,1,"              ");
	LCD_displayStringRowColumn(1,1,"              ");
}
void step3(void){
	LCD_displayStringRowColumn(0,1,"Pls Enter Pass3");
	for(uint8 i = 0 ; i < 5 ; i++){
    22ec:	88 89       	ldd	r24, Y+16	; 0x10
    22ee:	8f 5f       	subi	r24, 0xFF	; 255
    22f0:	88 8b       	std	Y+16, r24	; 0x10
    22f2:	88 89       	ldd	r24, Y+16	; 0x10
    22f4:	85 30       	cpi	r24, 0x05	; 5
    22f6:	08 f4       	brcc	.+2      	; 0x22fa <step3+0x13c>
    22f8:	75 cf       	rjmp	.-278    	; 0x21e4 <step3+0x26>
		key = KEYPAD_getPressedKey();
		LCD_displayStringRowColumn(1,i+1,"*");
		_delay_ms(300);
		UART_sendByte(key);
	}
	for(uint8 i = 0 ; i < 5 ; i++){
    22fa:	1f 86       	std	Y+15, r1	; 0x0f
    22fc:	0d c0       	rjmp	.+26     	; 0x2318 <step3+0x15a>
		LCD_displayStringRowColumn(1,i+1," ");
    22fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2300:	98 2f       	mov	r25, r24
    2302:	9f 5f       	subi	r25, 0xFF	; 255
    2304:	26 e8       	ldi	r18, 0x86	; 134
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	69 2f       	mov	r22, r25
    230c:	a9 01       	movw	r20, r18
    230e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
		key = KEYPAD_getPressedKey();
		LCD_displayStringRowColumn(1,i+1,"*");
		_delay_ms(300);
		UART_sendByte(key);
	}
	for(uint8 i = 0 ; i < 5 ; i++){
    2312:	8f 85       	ldd	r24, Y+15	; 0x0f
    2314:	8f 5f       	subi	r24, 0xFF	; 255
    2316:	8f 87       	std	Y+15, r24	; 0x0f
    2318:	8f 85       	ldd	r24, Y+15	; 0x0f
    231a:	85 30       	cpi	r24, 0x05	; 5
    231c:	80 f3       	brcs	.-32     	; 0x22fe <step3+0x140>
		LCD_displayStringRowColumn(1,i+1," ");
	}
	LCD_displayStringRowColumn(0,1,"                 ");
    231e:	2e eb       	ldi	r18, 0xBE	; 190
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	61 e0       	ldi	r22, 0x01	; 1
    2326:	a9 01       	movw	r20, r18
    2328:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>

}
    232c:	60 96       	adiw	r28, 0x10	; 16
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <step4>:
void step4(void){
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	a0 97       	sbiw	r28, 0x20	; 32
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
	LCD_displayStringRowColumn(0,1,"Change Pass");
    2352:	20 ed       	ldi	r18, 0xD0	; 208
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	61 e0       	ldi	r22, 0x01	; 1
    235a:	a9 01       	movw	r20, r18
    235c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
		for(uint8 i = 0 ; i < 5 ; i++){
    2360:	18 a2       	std	Y+32, r1	; 0x20
    2362:	87 c0       	rjmp	.+270    	; 0x2472 <step4+0x134>
			/* Get the pressed button from keypad */
			key = KEYPAD_getPressedKey();
    2364:	0e 94 93 09 	call	0x1326	; 0x1326 <KEYPAD_getPressedKey>
    2368:	80 93 00 01 	sts	0x0100, r24
			LCD_displayStringRowColumn(1,i+1,"*");
    236c:	88 a1       	ldd	r24, Y+32	; 0x20
    236e:	98 2f       	mov	r25, r24
    2370:	9f 5f       	subi	r25, 0xFF	; 255
    2372:	25 e7       	ldi	r18, 0x75	; 117
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	69 2f       	mov	r22, r25
    237a:	a9 01       	movw	r20, r18
    237c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	a6 e9       	ldi	r26, 0x96	; 150
    2386:	b3 e4       	ldi	r27, 0x43	; 67
    2388:	89 8f       	std	Y+25, r24	; 0x19
    238a:	9a 8f       	std	Y+26, r25	; 0x1a
    238c:	ab 8f       	std	Y+27, r26	; 0x1b
    238e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2390:	69 8d       	ldd	r22, Y+25	; 0x19
    2392:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2394:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2396:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	4a e7       	ldi	r20, 0x7A	; 122
    239e:	53 e4       	ldi	r21, 0x43	; 67
    23a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	8d 8b       	std	Y+21, r24	; 0x15
    23aa:	9e 8b       	std	Y+22, r25	; 0x16
    23ac:	af 8b       	std	Y+23, r26	; 0x17
    23ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23b0:	6d 89       	ldd	r22, Y+21	; 0x15
    23b2:	7e 89       	ldd	r23, Y+22	; 0x16
    23b4:	8f 89       	ldd	r24, Y+23	; 0x17
    23b6:	98 8d       	ldd	r25, Y+24	; 0x18
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e8       	ldi	r20, 0x80	; 128
    23be:	5f e3       	ldi	r21, 0x3F	; 63
    23c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c4:	88 23       	and	r24, r24
    23c6:	2c f4       	brge	.+10     	; 0x23d2 <step4+0x94>
		__ticks = 1;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	9c 8b       	std	Y+20, r25	; 0x14
    23ce:	8b 8b       	std	Y+19, r24	; 0x13
    23d0:	3f c0       	rjmp	.+126    	; 0x2450 <step4+0x112>
	else if (__tmp > 65535)
    23d2:	6d 89       	ldd	r22, Y+21	; 0x15
    23d4:	7e 89       	ldd	r23, Y+22	; 0x16
    23d6:	8f 89       	ldd	r24, Y+23	; 0x17
    23d8:	98 8d       	ldd	r25, Y+24	; 0x18
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	3f ef       	ldi	r19, 0xFF	; 255
    23de:	4f e7       	ldi	r20, 0x7F	; 127
    23e0:	57 e4       	ldi	r21, 0x47	; 71
    23e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e6:	18 16       	cp	r1, r24
    23e8:	4c f5       	brge	.+82     	; 0x243c <step4+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ea:	69 8d       	ldd	r22, Y+25	; 0x19
    23ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e2       	ldi	r20, 0x20	; 32
    23f8:	51 e4       	ldi	r21, 0x41	; 65
    23fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	bc 01       	movw	r22, r24
    2404:	cd 01       	movw	r24, r26
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	9c 8b       	std	Y+20, r25	; 0x14
    2410:	8b 8b       	std	Y+19, r24	; 0x13
    2412:	0f c0       	rjmp	.+30     	; 0x2432 <step4+0xf4>
    2414:	89 e1       	ldi	r24, 0x19	; 25
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	9a 8b       	std	Y+18, r25	; 0x12
    241a:	89 8b       	std	Y+17, r24	; 0x11
    241c:	89 89       	ldd	r24, Y+17	; 0x11
    241e:	9a 89       	ldd	r25, Y+18	; 0x12
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	f1 f7       	brne	.-4      	; 0x2420 <step4+0xe2>
    2424:	9a 8b       	std	Y+18, r25	; 0x12
    2426:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2428:	8b 89       	ldd	r24, Y+19	; 0x13
    242a:	9c 89       	ldd	r25, Y+20	; 0x14
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	9c 8b       	std	Y+20, r25	; 0x14
    2430:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2432:	8b 89       	ldd	r24, Y+19	; 0x13
    2434:	9c 89       	ldd	r25, Y+20	; 0x14
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	69 f7       	brne	.-38     	; 0x2414 <step4+0xd6>
    243a:	14 c0       	rjmp	.+40     	; 0x2464 <step4+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243c:	6d 89       	ldd	r22, Y+21	; 0x15
    243e:	7e 89       	ldd	r23, Y+22	; 0x16
    2440:	8f 89       	ldd	r24, Y+23	; 0x17
    2442:	98 8d       	ldd	r25, Y+24	; 0x18
    2444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	9c 8b       	std	Y+20, r25	; 0x14
    244e:	8b 8b       	std	Y+19, r24	; 0x13
    2450:	8b 89       	ldd	r24, Y+19	; 0x13
    2452:	9c 89       	ldd	r25, Y+20	; 0x14
    2454:	98 8b       	std	Y+16, r25	; 0x10
    2456:	8f 87       	std	Y+15, r24	; 0x0f
    2458:	8f 85       	ldd	r24, Y+15	; 0x0f
    245a:	98 89       	ldd	r25, Y+16	; 0x10
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <step4+0x11e>
    2460:	98 8b       	std	Y+16, r25	; 0x10
    2462:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(300);
			UART_sendByte(key);
    2464:	80 91 00 01 	lds	r24, 0x0100
    2468:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>
	LCD_displayStringRowColumn(0,1,"                 ");

}
void step4(void){
	LCD_displayStringRowColumn(0,1,"Change Pass");
		for(uint8 i = 0 ; i < 5 ; i++){
    246c:	88 a1       	ldd	r24, Y+32	; 0x20
    246e:	8f 5f       	subi	r24, 0xFF	; 255
    2470:	88 a3       	std	Y+32, r24	; 0x20
    2472:	88 a1       	ldd	r24, Y+32	; 0x20
    2474:	85 30       	cpi	r24, 0x05	; 5
    2476:	08 f4       	brcc	.+2      	; 0x247a <step4+0x13c>
    2478:	75 cf       	rjmp	.-278    	; 0x2364 <step4+0x26>
			key = KEYPAD_getPressedKey();
			LCD_displayStringRowColumn(1,i+1,"*");
			_delay_ms(300);
			UART_sendByte(key);
		}
		for(uint8 i = 0 ; i < 5 ; i++){
    247a:	1f 8e       	std	Y+31, r1	; 0x1f
    247c:	0d c0       	rjmp	.+26     	; 0x2498 <step4+0x15a>
			LCD_displayStringRowColumn(1,i+1," ");
    247e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2480:	98 2f       	mov	r25, r24
    2482:	9f 5f       	subi	r25, 0xFF	; 255
    2484:	26 e8       	ldi	r18, 0x86	; 134
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	69 2f       	mov	r22, r25
    248c:	a9 01       	movw	r20, r18
    248e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
			key = KEYPAD_getPressedKey();
			LCD_displayStringRowColumn(1,i+1,"*");
			_delay_ms(300);
			UART_sendByte(key);
		}
		for(uint8 i = 0 ; i < 5 ; i++){
    2492:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2494:	8f 5f       	subi	r24, 0xFF	; 255
    2496:	8f 8f       	std	Y+31, r24	; 0x1f
    2498:	8f 8d       	ldd	r24, Y+31	; 0x1f
    249a:	85 30       	cpi	r24, 0x05	; 5
    249c:	80 f3       	brcs	.-32     	; 0x247e <step4+0x140>
			LCD_displayStringRowColumn(1,i+1," ");
		}
		LCD_displayStringRowColumn(0,1,"Renter Pass");
    249e:	28 e8       	ldi	r18, 0x88	; 136
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	61 e0       	ldi	r22, 0x01	; 1
    24a6:	a9 01       	movw	r20, r18
    24a8:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
		for(uint8 i = 0 ; i < 5 ; i++){
    24ac:	1e 8e       	std	Y+30, r1	; 0x1e
    24ae:	87 c0       	rjmp	.+270    	; 0x25be <step4+0x280>
			/* Get the pressed button from keypad */
			key = KEYPAD_getPressedKey();
    24b0:	0e 94 93 09 	call	0x1326	; 0x1326 <KEYPAD_getPressedKey>
    24b4:	80 93 00 01 	sts	0x0100, r24
			LCD_displayStringRowColumn(1,i+1,"*");
    24b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24ba:	98 2f       	mov	r25, r24
    24bc:	9f 5f       	subi	r25, 0xFF	; 255
    24be:	25 e7       	ldi	r18, 0x75	; 117
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	69 2f       	mov	r22, r25
    24c6:	a9 01       	movw	r20, r18
    24c8:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	a6 e9       	ldi	r26, 0x96	; 150
    24d2:	b3 e4       	ldi	r27, 0x43	; 67
    24d4:	8b 87       	std	Y+11, r24	; 0x0b
    24d6:	9c 87       	std	Y+12, r25	; 0x0c
    24d8:	ad 87       	std	Y+13, r26	; 0x0d
    24da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24de:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	4a e7       	ldi	r20, 0x7A	; 122
    24ea:	53 e4       	ldi	r21, 0x43	; 67
    24ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	8f 83       	std	Y+7, r24	; 0x07
    24f6:	98 87       	std	Y+8, r25	; 0x08
    24f8:	a9 87       	std	Y+9, r26	; 0x09
    24fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24fc:	6f 81       	ldd	r22, Y+7	; 0x07
    24fe:	78 85       	ldd	r23, Y+8	; 0x08
    2500:	89 85       	ldd	r24, Y+9	; 0x09
    2502:	9a 85       	ldd	r25, Y+10	; 0x0a
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e8       	ldi	r20, 0x80	; 128
    250a:	5f e3       	ldi	r21, 0x3F	; 63
    250c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2510:	88 23       	and	r24, r24
    2512:	2c f4       	brge	.+10     	; 0x251e <step4+0x1e0>
		__ticks = 1;
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9e 83       	std	Y+6, r25	; 0x06
    251a:	8d 83       	std	Y+5, r24	; 0x05
    251c:	3f c0       	rjmp	.+126    	; 0x259c <step4+0x25e>
	else if (__tmp > 65535)
    251e:	6f 81       	ldd	r22, Y+7	; 0x07
    2520:	78 85       	ldd	r23, Y+8	; 0x08
    2522:	89 85       	ldd	r24, Y+9	; 0x09
    2524:	9a 85       	ldd	r25, Y+10	; 0x0a
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	3f ef       	ldi	r19, 0xFF	; 255
    252a:	4f e7       	ldi	r20, 0x7F	; 127
    252c:	57 e4       	ldi	r21, 0x47	; 71
    252e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2532:	18 16       	cp	r1, r24
    2534:	4c f5       	brge	.+82     	; 0x2588 <step4+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2536:	6b 85       	ldd	r22, Y+11	; 0x0b
    2538:	7c 85       	ldd	r23, Y+12	; 0x0c
    253a:	8d 85       	ldd	r24, Y+13	; 0x0d
    253c:	9e 85       	ldd	r25, Y+14	; 0x0e
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e2       	ldi	r20, 0x20	; 32
    2544:	51 e4       	ldi	r21, 0x41	; 65
    2546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
    255e:	0f c0       	rjmp	.+30     	; 0x257e <step4+0x240>
    2560:	89 e1       	ldi	r24, 0x19	; 25
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	9c 83       	std	Y+4, r25	; 0x04
    2566:	8b 83       	std	Y+3, r24	; 0x03
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	9c 81       	ldd	r25, Y+4	; 0x04
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <step4+0x22e>
    2570:	9c 83       	std	Y+4, r25	; 0x04
    2572:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2574:	8d 81       	ldd	r24, Y+5	; 0x05
    2576:	9e 81       	ldd	r25, Y+6	; 0x06
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	9e 83       	std	Y+6, r25	; 0x06
    257c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257e:	8d 81       	ldd	r24, Y+5	; 0x05
    2580:	9e 81       	ldd	r25, Y+6	; 0x06
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	69 f7       	brne	.-38     	; 0x2560 <step4+0x222>
    2586:	14 c0       	rjmp	.+40     	; 0x25b0 <step4+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2588:	6f 81       	ldd	r22, Y+7	; 0x07
    258a:	78 85       	ldd	r23, Y+8	; 0x08
    258c:	89 85       	ldd	r24, Y+9	; 0x09
    258e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	9e 83       	std	Y+6, r25	; 0x06
    259a:	8d 83       	std	Y+5, r24	; 0x05
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	9e 81       	ldd	r25, Y+6	; 0x06
    25a0:	9a 83       	std	Y+2, r25	; 0x02
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	9a 81       	ldd	r25, Y+2	; 0x02
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <step4+0x26a>
    25ac:	9a 83       	std	Y+2, r25	; 0x02
    25ae:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			UART_sendByte(key);
    25b0:	80 91 00 01 	lds	r24, 0x0100
    25b4:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>
		}
		for(uint8 i = 0 ; i < 5 ; i++){
			LCD_displayStringRowColumn(1,i+1," ");
		}
		LCD_displayStringRowColumn(0,1,"Renter Pass");
		for(uint8 i = 0 ; i < 5 ; i++){
    25b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25ba:	8f 5f       	subi	r24, 0xFF	; 255
    25bc:	8e 8f       	std	Y+30, r24	; 0x1e
    25be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25c0:	85 30       	cpi	r24, 0x05	; 5
    25c2:	08 f4       	brcc	.+2      	; 0x25c6 <step4+0x288>
    25c4:	75 cf       	rjmp	.-278    	; 0x24b0 <step4+0x172>
			key = KEYPAD_getPressedKey();
			LCD_displayStringRowColumn(1,i+1,"*");
			_delay_ms(300);
			UART_sendByte(key);
		}
		for(uint8 i = 0 ; i < 5 ; i++){
    25c6:	1d 8e       	std	Y+29, r1	; 0x1d
    25c8:	0d c0       	rjmp	.+26     	; 0x25e4 <step4+0x2a6>
			LCD_displayStringRowColumn(1,i+1," ");
    25ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25cc:	98 2f       	mov	r25, r24
    25ce:	9f 5f       	subi	r25, 0xFF	; 255
    25d0:	26 e8       	ldi	r18, 0x86	; 134
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	69 2f       	mov	r22, r25
    25d8:	a9 01       	movw	r20, r18
    25da:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
			key = KEYPAD_getPressedKey();
			LCD_displayStringRowColumn(1,i+1,"*");
			_delay_ms(300);
			UART_sendByte(key);
		}
		for(uint8 i = 0 ; i < 5 ; i++){
    25de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e0:	8f 5f       	subi	r24, 0xFF	; 255
    25e2:	8d 8f       	std	Y+29, r24	; 0x1d
    25e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e6:	85 30       	cpi	r24, 0x05	; 5
    25e8:	80 f3       	brcs	.-32     	; 0x25ca <step4+0x28c>
			LCD_displayStringRowColumn(1,i+1," ");
		}
		LCD_displayStringRowColumn(0,1,"            ");
    25ea:	2c ed       	ldi	r18, 0xDC	; 220
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	61 e0       	ldi	r22, 0x01	; 1
    25f2:	a9 01       	movw	r20, r18
    25f4:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>

}
    25f8:	a0 96       	adiw	r28, 0x20	; 32
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	cd bf       	out	0x3d, r28	; 61
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	08 95       	ret

0000260a <step5>:
void step5(void){
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	2e 97       	sbiw	r28, 0x0e	; 14
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
	LCD_displayStringRowColumn(0,1,"Error!!!");
    261e:	29 ee       	ldi	r18, 0xE9	; 233
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	61 e0       	ldi	r22, 0x01	; 1
    2626:	a9 01       	movw	r20, r18
    2628:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <LCD_displayStringRowColumn>
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	90 e6       	ldi	r25, 0x60	; 96
    2630:	aa e6       	ldi	r26, 0x6A	; 106
    2632:	b7 e4       	ldi	r27, 0x47	; 71
    2634:	8b 87       	std	Y+11, r24	; 0x0b
    2636:	9c 87       	std	Y+12, r25	; 0x0c
    2638:	ad 87       	std	Y+13, r26	; 0x0d
    263a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263c:	6b 85       	ldd	r22, Y+11	; 0x0b
    263e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2640:	8d 85       	ldd	r24, Y+13	; 0x0d
    2642:	9e 85       	ldd	r25, Y+14	; 0x0e
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	4a e7       	ldi	r20, 0x7A	; 122
    264a:	53 e4       	ldi	r21, 0x43	; 67
    264c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	8f 83       	std	Y+7, r24	; 0x07
    2656:	98 87       	std	Y+8, r25	; 0x08
    2658:	a9 87       	std	Y+9, r26	; 0x09
    265a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    265c:	6f 81       	ldd	r22, Y+7	; 0x07
    265e:	78 85       	ldd	r23, Y+8	; 0x08
    2660:	89 85       	ldd	r24, Y+9	; 0x09
    2662:	9a 85       	ldd	r25, Y+10	; 0x0a
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e8       	ldi	r20, 0x80	; 128
    266a:	5f e3       	ldi	r21, 0x3F	; 63
    266c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2670:	88 23       	and	r24, r24
    2672:	2c f4       	brge	.+10     	; 0x267e <step5+0x74>
		__ticks = 1;
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	9e 83       	std	Y+6, r25	; 0x06
    267a:	8d 83       	std	Y+5, r24	; 0x05
    267c:	3f c0       	rjmp	.+126    	; 0x26fc <step5+0xf2>
	else if (__tmp > 65535)
    267e:	6f 81       	ldd	r22, Y+7	; 0x07
    2680:	78 85       	ldd	r23, Y+8	; 0x08
    2682:	89 85       	ldd	r24, Y+9	; 0x09
    2684:	9a 85       	ldd	r25, Y+10	; 0x0a
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	3f ef       	ldi	r19, 0xFF	; 255
    268a:	4f e7       	ldi	r20, 0x7F	; 127
    268c:	57 e4       	ldi	r21, 0x47	; 71
    268e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2692:	18 16       	cp	r1, r24
    2694:	4c f5       	brge	.+82     	; 0x26e8 <step5+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2696:	6b 85       	ldd	r22, Y+11	; 0x0b
    2698:	7c 85       	ldd	r23, Y+12	; 0x0c
    269a:	8d 85       	ldd	r24, Y+13	; 0x0d
    269c:	9e 85       	ldd	r25, Y+14	; 0x0e
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e2       	ldi	r20, 0x20	; 32
    26a4:	51 e4       	ldi	r21, 0x41	; 65
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	bc 01       	movw	r22, r24
    26b0:	cd 01       	movw	r24, r26
    26b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	9e 83       	std	Y+6, r25	; 0x06
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	0f c0       	rjmp	.+30     	; 0x26de <step5+0xd4>
    26c0:	89 e1       	ldi	r24, 0x19	; 25
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	9c 83       	std	Y+4, r25	; 0x04
    26c6:	8b 83       	std	Y+3, r24	; 0x03
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	9c 81       	ldd	r25, Y+4	; 0x04
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <step5+0xc2>
    26d0:	9c 83       	std	Y+4, r25	; 0x04
    26d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d4:	8d 81       	ldd	r24, Y+5	; 0x05
    26d6:	9e 81       	ldd	r25, Y+6	; 0x06
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	9e 83       	std	Y+6, r25	; 0x06
    26dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26de:	8d 81       	ldd	r24, Y+5	; 0x05
    26e0:	9e 81       	ldd	r25, Y+6	; 0x06
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	69 f7       	brne	.-38     	; 0x26c0 <step5+0xb6>
    26e6:	14 c0       	rjmp	.+40     	; 0x2710 <step5+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e8:	6f 81       	ldd	r22, Y+7	; 0x07
    26ea:	78 85       	ldd	r23, Y+8	; 0x08
    26ec:	89 85       	ldd	r24, Y+9	; 0x09
    26ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9e 83       	std	Y+6, r25	; 0x06
    26fa:	8d 83       	std	Y+5, r24	; 0x05
    26fc:	8d 81       	ldd	r24, Y+5	; 0x05
    26fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2700:	9a 83       	std	Y+2, r25	; 0x02
    2702:	89 83       	std	Y+1, r24	; 0x01
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	9a 81       	ldd	r25, Y+2	; 0x02
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <step5+0xfe>
    270c:	9a 83       	std	Y+2, r25	; 0x02
    270e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(60000);

}
    2710:	2e 96       	adiw	r28, 0x0e	; 14
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	cf 91       	pop	r28
    271e:	df 91       	pop	r29
    2720:	08 95       	ret

00002722 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    2722:	1f 92       	push	r1
    2724:	0f 92       	push	r0
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	0f 92       	push	r0
    272a:	11 24       	eor	r1, r1
    272c:	2f 93       	push	r18
    272e:	3f 93       	push	r19
    2730:	4f 93       	push	r20
    2732:	5f 93       	push	r21
    2734:	6f 93       	push	r22
    2736:	7f 93       	push	r23
    2738:	8f 93       	push	r24
    273a:	9f 93       	push	r25
    273c:	af 93       	push	r26
    273e:	bf 93       	push	r27
    2740:	ef 93       	push	r30
    2742:	ff 93       	push	r31
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    274c:	80 91 fa 00 	lds	r24, 0x00FA
    2750:	90 91 fb 00 	lds	r25, 0x00FB
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	29 f0       	breq	.+10     	; 0x2762 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    2758:	e0 91 fa 00 	lds	r30, 0x00FA
    275c:	f0 91 fb 00 	lds	r31, 0x00FB
    2760:	09 95       	icall
	}
}
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	ff 91       	pop	r31
    2768:	ef 91       	pop	r30
    276a:	bf 91       	pop	r27
    276c:	af 91       	pop	r26
    276e:	9f 91       	pop	r25
    2770:	8f 91       	pop	r24
    2772:	7f 91       	pop	r23
    2774:	6f 91       	pop	r22
    2776:	5f 91       	pop	r21
    2778:	4f 91       	pop	r20
    277a:	3f 91       	pop	r19
    277c:	2f 91       	pop	r18
    277e:	0f 90       	pop	r0
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	0f 90       	pop	r0
    2784:	1f 90       	pop	r1
    2786:	18 95       	reti

00002788 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    2788:	1f 92       	push	r1
    278a:	0f 92       	push	r0
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	0f 92       	push	r0
    2790:	11 24       	eor	r1, r1
    2792:	2f 93       	push	r18
    2794:	3f 93       	push	r19
    2796:	4f 93       	push	r20
    2798:	5f 93       	push	r21
    279a:	6f 93       	push	r22
    279c:	7f 93       	push	r23
    279e:	8f 93       	push	r24
    27a0:	9f 93       	push	r25
    27a2:	af 93       	push	r26
    27a4:	bf 93       	push	r27
    27a6:	ef 93       	push	r30
    27a8:	ff 93       	push	r31
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    27b2:	80 91 fa 00 	lds	r24, 0x00FA
    27b6:	90 91 fb 00 	lds	r25, 0x00FB
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	29 f0       	breq	.+10     	; 0x27c8 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    27be:	e0 91 fa 00 	lds	r30, 0x00FA
    27c2:	f0 91 fb 00 	lds	r31, 0x00FB
    27c6:	09 95       	icall
	}
}
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	ff 91       	pop	r31
    27ce:	ef 91       	pop	r30
    27d0:	bf 91       	pop	r27
    27d2:	af 91       	pop	r26
    27d4:	9f 91       	pop	r25
    27d6:	8f 91       	pop	r24
    27d8:	7f 91       	pop	r23
    27da:	6f 91       	pop	r22
    27dc:	5f 91       	pop	r21
    27de:	4f 91       	pop	r20
    27e0:	3f 91       	pop	r19
    27e2:	2f 91       	pop	r18
    27e4:	0f 90       	pop	r0
    27e6:	0f be       	out	0x3f, r0	; 63
    27e8:	0f 90       	pop	r0
    27ea:	1f 90       	pop	r1
    27ec:	18 95       	reti

000027ee <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    27ee:	1f 92       	push	r1
    27f0:	0f 92       	push	r0
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	0f 92       	push	r0
    27f6:	11 24       	eor	r1, r1
    27f8:	2f 93       	push	r18
    27fa:	3f 93       	push	r19
    27fc:	4f 93       	push	r20
    27fe:	5f 93       	push	r21
    2800:	6f 93       	push	r22
    2802:	7f 93       	push	r23
    2804:	8f 93       	push	r24
    2806:	9f 93       	push	r25
    2808:	af 93       	push	r26
    280a:	bf 93       	push	r27
    280c:	ef 93       	push	r30
    280e:	ff 93       	push	r31
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    2818:	80 91 fc 00 	lds	r24, 0x00FC
    281c:	90 91 fd 00 	lds	r25, 0x00FD
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	29 f0       	breq	.+10     	; 0x282e <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    2824:	e0 91 fc 00 	lds	r30, 0x00FC
    2828:	f0 91 fd 00 	lds	r31, 0x00FD
    282c:	09 95       	icall
	}
}
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	ff 91       	pop	r31
    2834:	ef 91       	pop	r30
    2836:	bf 91       	pop	r27
    2838:	af 91       	pop	r26
    283a:	9f 91       	pop	r25
    283c:	8f 91       	pop	r24
    283e:	7f 91       	pop	r23
    2840:	6f 91       	pop	r22
    2842:	5f 91       	pop	r21
    2844:	4f 91       	pop	r20
    2846:	3f 91       	pop	r19
    2848:	2f 91       	pop	r18
    284a:	0f 90       	pop	r0
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	0f 90       	pop	r0
    2850:	1f 90       	pop	r1
    2852:	18 95       	reti

00002854 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    2854:	1f 92       	push	r1
    2856:	0f 92       	push	r0
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	0f 92       	push	r0
    285c:	11 24       	eor	r1, r1
    285e:	2f 93       	push	r18
    2860:	3f 93       	push	r19
    2862:	4f 93       	push	r20
    2864:	5f 93       	push	r21
    2866:	6f 93       	push	r22
    2868:	7f 93       	push	r23
    286a:	8f 93       	push	r24
    286c:	9f 93       	push	r25
    286e:	af 93       	push	r26
    2870:	bf 93       	push	r27
    2872:	ef 93       	push	r30
    2874:	ff 93       	push	r31
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    287e:	80 91 fc 00 	lds	r24, 0x00FC
    2882:	90 91 fd 00 	lds	r25, 0x00FD
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	29 f0       	breq	.+10     	; 0x2894 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    288a:	e0 91 fc 00 	lds	r30, 0x00FC
    288e:	f0 91 fd 00 	lds	r31, 0x00FD
    2892:	09 95       	icall
	}
}
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	ff 91       	pop	r31
    289a:	ef 91       	pop	r30
    289c:	bf 91       	pop	r27
    289e:	af 91       	pop	r26
    28a0:	9f 91       	pop	r25
    28a2:	8f 91       	pop	r24
    28a4:	7f 91       	pop	r23
    28a6:	6f 91       	pop	r22
    28a8:	5f 91       	pop	r21
    28aa:	4f 91       	pop	r20
    28ac:	3f 91       	pop	r19
    28ae:	2f 91       	pop	r18
    28b0:	0f 90       	pop	r0
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	0f 90       	pop	r0
    28b6:	1f 90       	pop	r1
    28b8:	18 95       	reti

000028ba <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    28ba:	1f 92       	push	r1
    28bc:	0f 92       	push	r0
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	0f 92       	push	r0
    28c2:	11 24       	eor	r1, r1
    28c4:	2f 93       	push	r18
    28c6:	3f 93       	push	r19
    28c8:	4f 93       	push	r20
    28ca:	5f 93       	push	r21
    28cc:	6f 93       	push	r22
    28ce:	7f 93       	push	r23
    28d0:	8f 93       	push	r24
    28d2:	9f 93       	push	r25
    28d4:	af 93       	push	r26
    28d6:	bf 93       	push	r27
    28d8:	ef 93       	push	r30
    28da:	ff 93       	push	r31
    28dc:	df 93       	push	r29
    28de:	cf 93       	push	r28
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    28e4:	80 91 fc 00 	lds	r24, 0x00FC
    28e8:	90 91 fd 00 	lds	r25, 0x00FD
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	29 f0       	breq	.+10     	; 0x28fa <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    28f0:	e0 91 fc 00 	lds	r30, 0x00FC
    28f4:	f0 91 fd 00 	lds	r31, 0x00FD
    28f8:	09 95       	icall
	}
}
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	ff 91       	pop	r31
    2900:	ef 91       	pop	r30
    2902:	bf 91       	pop	r27
    2904:	af 91       	pop	r26
    2906:	9f 91       	pop	r25
    2908:	8f 91       	pop	r24
    290a:	7f 91       	pop	r23
    290c:	6f 91       	pop	r22
    290e:	5f 91       	pop	r21
    2910:	4f 91       	pop	r20
    2912:	3f 91       	pop	r19
    2914:	2f 91       	pop	r18
    2916:	0f 90       	pop	r0
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	0f 90       	pop	r0
    291c:	1f 90       	pop	r1
    291e:	18 95       	reti

00002920 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    2920:	1f 92       	push	r1
    2922:	0f 92       	push	r0
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	0f 92       	push	r0
    2928:	11 24       	eor	r1, r1
    292a:	2f 93       	push	r18
    292c:	3f 93       	push	r19
    292e:	4f 93       	push	r20
    2930:	5f 93       	push	r21
    2932:	6f 93       	push	r22
    2934:	7f 93       	push	r23
    2936:	8f 93       	push	r24
    2938:	9f 93       	push	r25
    293a:	af 93       	push	r26
    293c:	bf 93       	push	r27
    293e:	ef 93       	push	r30
    2940:	ff 93       	push	r31
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    294a:	80 91 fe 00 	lds	r24, 0x00FE
    294e:	90 91 ff 00 	lds	r25, 0x00FF
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	29 f0       	breq	.+10     	; 0x2960 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    2956:	e0 91 fe 00 	lds	r30, 0x00FE
    295a:	f0 91 ff 00 	lds	r31, 0x00FF
    295e:	09 95       	icall
	}
}
    2960:	cf 91       	pop	r28
    2962:	df 91       	pop	r29
    2964:	ff 91       	pop	r31
    2966:	ef 91       	pop	r30
    2968:	bf 91       	pop	r27
    296a:	af 91       	pop	r26
    296c:	9f 91       	pop	r25
    296e:	8f 91       	pop	r24
    2970:	7f 91       	pop	r23
    2972:	6f 91       	pop	r22
    2974:	5f 91       	pop	r21
    2976:	4f 91       	pop	r20
    2978:	3f 91       	pop	r19
    297a:	2f 91       	pop	r18
    297c:	0f 90       	pop	r0
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	0f 90       	pop	r0
    2982:	1f 90       	pop	r1
    2984:	18 95       	reti

00002986 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    2986:	1f 92       	push	r1
    2988:	0f 92       	push	r0
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	0f 92       	push	r0
    298e:	11 24       	eor	r1, r1
    2990:	2f 93       	push	r18
    2992:	3f 93       	push	r19
    2994:	4f 93       	push	r20
    2996:	5f 93       	push	r21
    2998:	6f 93       	push	r22
    299a:	7f 93       	push	r23
    299c:	8f 93       	push	r24
    299e:	9f 93       	push	r25
    29a0:	af 93       	push	r26
    29a2:	bf 93       	push	r27
    29a4:	ef 93       	push	r30
    29a6:	ff 93       	push	r31
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    29b0:	80 91 fe 00 	lds	r24, 0x00FE
    29b4:	90 91 ff 00 	lds	r25, 0x00FF
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	29 f0       	breq	.+10     	; 0x29c6 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    29bc:	e0 91 fe 00 	lds	r30, 0x00FE
    29c0:	f0 91 ff 00 	lds	r31, 0x00FF
    29c4:	09 95       	icall
	}
}
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	ff 91       	pop	r31
    29cc:	ef 91       	pop	r30
    29ce:	bf 91       	pop	r27
    29d0:	af 91       	pop	r26
    29d2:	9f 91       	pop	r25
    29d4:	8f 91       	pop	r24
    29d6:	7f 91       	pop	r23
    29d8:	6f 91       	pop	r22
    29da:	5f 91       	pop	r21
    29dc:	4f 91       	pop	r20
    29de:	3f 91       	pop	r19
    29e0:	2f 91       	pop	r18
    29e2:	0f 90       	pop	r0
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	0f 90       	pop	r0
    29e8:	1f 90       	pop	r1
    29ea:	18 95       	reti

000029ec <TIMER0_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TIMER0_init(const Timer_ConfigType * Config_Ptr)
{
    29ec:	df 93       	push	r29
    29ee:	cf 93       	push	r28
    29f0:	00 d0       	rcall	.+0      	; 0x29f2 <TIMER0_init+0x6>
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
    29f6:	9a 83       	std	Y+2, r25	; 0x02
    29f8:	89 83       	std	Y+1, r24	; 0x01
	/*TCCR0 &= 0x00;
	TCNT0 &= 0x00;
	OCR0  &= 0x00;
*/
	/* non PWM Mode */
	TCCR0 = (1<<FOC0);
    29fa:	e3 e5       	ldi	r30, 0x53	; 83
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 e8       	ldi	r24, 0x80	; 128
    2a00:	80 83       	st	Z, r24
	/*set initial value */
	TCNT0 = Config_Ptr->initial;
    2a02:	a2 e5       	ldi	r26, 0x52	; 82
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e9 81       	ldd	r30, Y+1	; 0x01
    2a08:	fa 81       	ldd	r31, Y+2	; 0x02
    2a0a:	84 81       	ldd	r24, Z+4	; 0x04
    2a0c:	95 81       	ldd	r25, Z+5	; 0x05
    2a0e:	8c 93       	st	X, r24
	/*set compare value for compare mode*/
	OCR0 = Config_Ptr->compare_value;
    2a10:	ac e5       	ldi	r26, 0x5C	; 92
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	e9 81       	ldd	r30, Y+1	; 0x01
    2a16:	fa 81       	ldd	r31, Y+2	; 0x02
    2a18:	86 81       	ldd	r24, Z+6	; 0x06
    2a1a:	97 81       	ldd	r25, Z+7	; 0x07
    2a1c:	8c 93       	st	X, r24


	if((Config_Ptr->OutputPin) == OC0){
    2a1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a20:	fa 81       	ldd	r31, Y+2	; 0x02
    2a22:	83 81       	ldd	r24, Z+3	; 0x03
    2a24:	83 30       	cpi	r24, 0x03	; 3
    2a26:	39 f4       	brne	.+14     	; 0x2a36 <TIMER0_init+0x4a>
		// configure the output pin PB3 in compare mode
		DDRB |= (1 << OC0);
    2a28:	a7 e3       	ldi	r26, 0x37	; 55
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	e7 e3       	ldi	r30, 0x37	; 55
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	88 60       	ori	r24, 0x08	; 8
    2a34:	8c 93       	st	X, r24
	}

	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    2a36:	e9 81       	ldd	r30, Y+1	; 0x01
    2a38:	fa 81       	ldd	r31, Y+2	; 0x02
    2a3a:	81 81       	ldd	r24, Z+1	; 0x01
    2a3c:	88 23       	and	r24, r24
    2a3e:	41 f4       	brne	.+16     	; 0x2a50 <TIMER0_init+0x64>
		/*Enable interrupt for overflow mode*/
		TIMSK |= (1 << TOIE0);
    2a40:	a9 e5       	ldi	r26, 0x59	; 89
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	e9 e5       	ldi	r30, 0x59	; 89
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	81 60       	ori	r24, 0x01	; 1
    2a4c:	8c 93       	st	X, r24
    2a4e:	0c c0       	rjmp	.+24     	; 0x2a68 <TIMER0_init+0x7c>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    2a50:	e9 81       	ldd	r30, Y+1	; 0x01
    2a52:	fa 81       	ldd	r31, Y+2	; 0x02
    2a54:	81 81       	ldd	r24, Z+1	; 0x01
    2a56:	81 30       	cpi	r24, 0x01	; 1
    2a58:	39 f4       	brne	.+14     	; 0x2a68 <TIMER0_init+0x7c>
		/*Enable interrupt for compare mode*/
		TIMSK |= (1 << OCIE0);
    2a5a:	a9 e5       	ldi	r26, 0x59	; 89
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e9 e5       	ldi	r30, 0x59	; 89
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	82 60       	ori	r24, 0x02	; 2
    2a66:	8c 93       	st	X, r24
	}

	/*configure the mode of the timer*/
	TCCR0 =  (TCCR0 & ~(0x48) ) | ( ( (Config_Ptr->mode) << WGM00) & 0x48 ) ;
    2a68:	a3 e5       	ldi	r26, 0x53	; 83
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	e3 e5       	ldi	r30, 0x53	; 83
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	28 2f       	mov	r18, r24
    2a74:	27 7b       	andi	r18, 0xB7	; 183
    2a76:	e9 81       	ldd	r30, Y+1	; 0x01
    2a78:	fa 81       	ldd	r31, Y+2	; 0x02
    2a7a:	81 81       	ldd	r24, Z+1	; 0x01
    2a7c:	88 2f       	mov	r24, r24
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	00 24       	eor	r0, r0
    2a82:	96 95       	lsr	r25
    2a84:	87 95       	ror	r24
    2a86:	07 94       	ror	r0
    2a88:	96 95       	lsr	r25
    2a8a:	87 95       	ror	r24
    2a8c:	07 94       	ror	r0
    2a8e:	98 2f       	mov	r25, r24
    2a90:	80 2d       	mov	r24, r0
    2a92:	88 74       	andi	r24, 0x48	; 72
    2a94:	82 2b       	or	r24, r18
    2a96:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR0 = (TCCR0 & 0XCF) | ( ( (Config_Ptr->compare_output) & 0X03) << COM00 );
    2a98:	a3 e5       	ldi	r26, 0x53	; 83
    2a9a:	b0 e0       	ldi	r27, 0x00	; 0
    2a9c:	e3 e5       	ldi	r30, 0x53	; 83
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
    2aa2:	28 2f       	mov	r18, r24
    2aa4:	2f 7c       	andi	r18, 0xCF	; 207
    2aa6:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	88 2f       	mov	r24, r24
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	83 70       	andi	r24, 0x03	; 3
    2ab2:	90 70       	andi	r25, 0x00	; 0
    2ab4:	82 95       	swap	r24
    2ab6:	92 95       	swap	r25
    2ab8:	90 7f       	andi	r25, 0xF0	; 240
    2aba:	98 27       	eor	r25, r24
    2abc:	80 7f       	andi	r24, 0xF0	; 240
    2abe:	98 27       	eor	r25, r24
    2ac0:	82 2b       	or	r24, r18
    2ac2:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->clock & 0X07);
    2ac4:	a3 e5       	ldi	r26, 0x53	; 83
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	e3 e5       	ldi	r30, 0x53	; 83
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	98 2f       	mov	r25, r24
    2ad0:	98 7f       	andi	r25, 0xF8	; 248
    2ad2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad6:	80 81       	ld	r24, Z
    2ad8:	87 70       	andi	r24, 0x07	; 7
    2ada:	89 2b       	or	r24, r25
    2adc:	8c 93       	st	X, r24
}
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <TIMER1_init>:

void TIMER1_init(const Timer_ConfigType * Config_Ptr)
{
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <TIMER1_init+0x6>
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	9a 83       	std	Y+2, r25	; 0x02
    2af4:	89 83       	std	Y+1, r24	; 0x01
/*			TCNT1  = 0;
			OCR1A  = 0;
			OCR1B  = 0;
*/
	/*set the initial value*/
	TCNT1 = ( (Config_Ptr -> initial) );
    2af6:	ac e4       	ldi	r26, 0x4C	; 76
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	e9 81       	ldd	r30, Y+1	; 0x01
    2afc:	fa 81       	ldd	r31, Y+2	; 0x02
    2afe:	84 81       	ldd	r24, Z+4	; 0x04
    2b00:	95 81       	ldd	r25, Z+5	; 0x05
    2b02:	11 96       	adiw	r26, 0x01	; 1
    2b04:	9c 93       	st	X, r25
    2b06:	8e 93       	st	-X, r24
	/*  Non PWM Mode */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    2b08:	ef e4       	ldi	r30, 0x4F	; 79
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	8c e0       	ldi	r24, 0x0C	; 12
    2b0e:	80 83       	st	Z, r24
	if((Config_Ptr -> OutputPin) == OC1A){
    2b10:	e9 81       	ldd	r30, Y+1	; 0x01
    2b12:	fa 81       	ldd	r31, Y+2	; 0x02
    2b14:	83 81       	ldd	r24, Z+3	; 0x03
    2b16:	85 30       	cpi	r24, 0x05	; 5
    2b18:	41 f4       	brne	.+16     	; 0x2b2a <TIMER1_init+0x42>
	// configure the output pin PD5 in compare mode
		DDRD |= (1 << OC1A);
    2b1a:	a1 e3       	ldi	r26, 0x31	; 49
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	e1 e3       	ldi	r30, 0x31	; 49
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	80 62       	ori	r24, 0x20	; 32
    2b26:	8c 93       	st	X, r24
    2b28:	0c c0       	rjmp	.+24     	; 0x2b42 <TIMER1_init+0x5a>
	}

	/* Check for OC1B */
	else if ((Config_Ptr -> OutputPin) == OC1B){
    2b2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2e:	83 81       	ldd	r24, Z+3	; 0x03
    2b30:	84 30       	cpi	r24, 0x04	; 4
    2b32:	39 f4       	brne	.+14     	; 0x2b42 <TIMER1_init+0x5a>
		// configure the output pin PD4 in compare mode
		DDRD |= (1 << OC1B);
    2b34:	a1 e3       	ldi	r26, 0x31	; 49
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	e1 e3       	ldi	r30, 0x31	; 49
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	80 61       	ori	r24, 0x10	; 16
    2b40:	8c 93       	st	X, r24
	}
	if( (Config_Ptr->mode ) == NORMAL_MODE)
    2b42:	e9 81       	ldd	r30, Y+1	; 0x01
    2b44:	fa 81       	ldd	r31, Y+2	; 0x02
    2b46:	81 81       	ldd	r24, Z+1	; 0x01
    2b48:	88 23       	and	r24, r24
    2b4a:	41 f4       	brne	.+16     	; 0x2b5c <TIMER1_init+0x74>
	{
		/* Enable interrupt FOR normal mode */
		TIMSK |= (1 << TOIE1);
    2b4c:	a9 e5       	ldi	r26, 0x59	; 89
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	e9 e5       	ldi	r30, 0x59	; 89
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	84 60       	ori	r24, 0x04	; 4
    2b58:	8c 93       	st	X, r24
    2b5a:	56 c0       	rjmp	.+172    	; 0x2c08 <TIMER1_init+0x120>
	}
	else if ((Config_Ptr->mode) == CTC_MODE_CHANNEL_A)
    2b5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b60:	81 81       	ldd	r24, Z+1	; 0x01
    2b62:	82 30       	cpi	r24, 0x02	; 2
    2b64:	41 f5       	brne	.+80     	; 0x2bb6 <TIMER1_init+0xce>
	{
		/*set compare value for compare mode channel A*/
		OCR1A  = ((Config_Ptr->compare_value));
    2b66:	aa e4       	ldi	r26, 0x4A	; 74
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b6e:	86 81       	ldd	r24, Z+6	; 0x06
    2b70:	97 81       	ldd	r25, Z+7	; 0x07
    2b72:	11 96       	adiw	r26, 0x01	; 1
    2b74:	9c 93       	st	X, r25
    2b76:	8e 93       	st	-X, r24
		/* Enable interrupt for compare mode channel A */
		TIMSK |= (1 << OCIE1A);
    2b78:	a9 e5       	ldi	r26, 0x59	; 89
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	e9 e5       	ldi	r30, 0x59	; 89
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	80 61       	ori	r24, 0x10	; 16
    2b84:	8c 93       	st	X, r24
		/* Choose the operation that should be done in compare match occurs in channel A */
		TCCR1A = ( (TCCR1A & 0x3F) | ( (Config_Ptr -> compare_output) << COM1A0) );
    2b86:	af e4       	ldi	r26, 0x4F	; 79
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	ef e4       	ldi	r30, 0x4F	; 79
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	28 2f       	mov	r18, r24
    2b92:	2f 73       	andi	r18, 0x3F	; 63
    2b94:	e9 81       	ldd	r30, Y+1	; 0x01
    2b96:	fa 81       	ldd	r31, Y+2	; 0x02
    2b98:	82 81       	ldd	r24, Z+2	; 0x02
    2b9a:	88 2f       	mov	r24, r24
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	00 24       	eor	r0, r0
    2ba0:	96 95       	lsr	r25
    2ba2:	87 95       	ror	r24
    2ba4:	07 94       	ror	r0
    2ba6:	96 95       	lsr	r25
    2ba8:	87 95       	ror	r24
    2baa:	07 94       	ror	r0
    2bac:	98 2f       	mov	r25, r24
    2bae:	80 2d       	mov	r24, r0
    2bb0:	82 2b       	or	r24, r18
    2bb2:	8c 93       	st	X, r24
    2bb4:	29 c0       	rjmp	.+82     	; 0x2c08 <TIMER1_init+0x120>
	}

	else if ( (Config_Ptr->mode) == CTC_MODE_CHANNEL_B){
    2bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bba:	81 81       	ldd	r24, Z+1	; 0x01
    2bbc:	83 30       	cpi	r24, 0x03	; 3
    2bbe:	21 f5       	brne	.+72     	; 0x2c08 <TIMER1_init+0x120>
		/*set compare value for compare mode channel B*/
		OCR1B  = ((Config_Ptr -> compare_value));
    2bc0:	a8 e4       	ldi	r26, 0x48	; 72
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc6:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc8:	86 81       	ldd	r24, Z+6	; 0x06
    2bca:	97 81       	ldd	r25, Z+7	; 0x07
    2bcc:	11 96       	adiw	r26, 0x01	; 1
    2bce:	9c 93       	st	X, r25
    2bd0:	8e 93       	st	-X, r24

		/* Enable interrupt for compare mode channel B */
		TIMSK |= (1 << OCIE1B);
    2bd2:	a9 e5       	ldi	r26, 0x59	; 89
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	e9 e5       	ldi	r30, 0x59	; 89
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	88 60       	ori	r24, 0x08	; 8
    2bde:	8c 93       	st	X, r24
		/* Choose the operation that should be done in compare match occurs in channel B */
		TCCR1A = ( (TCCR1A & 0xCF) | ( (Config_Ptr -> compare_output) << COM1B0) );
    2be0:	af e4       	ldi	r26, 0x4F	; 79
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	ef e4       	ldi	r30, 0x4F	; 79
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	28 2f       	mov	r18, r24
    2bec:	2f 7c       	andi	r18, 0xCF	; 207
    2bee:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf2:	82 81       	ldd	r24, Z+2	; 0x02
    2bf4:	88 2f       	mov	r24, r24
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	82 95       	swap	r24
    2bfa:	92 95       	swap	r25
    2bfc:	90 7f       	andi	r25, 0xF0	; 240
    2bfe:	98 27       	eor	r25, r24
    2c00:	80 7f       	andi	r24, 0xF0	; 240
    2c02:	98 27       	eor	r25, r24
    2c04:	82 2b       	or	r24, r18
    2c06:	8c 93       	st	X, r24

	}

	/*configure the mode of the timer*/
	TCCR1B = ( ( TCCR1B & 0xE7 ) |  ( ( (Config_Ptr -> mode) >> 1) << WGM12)  );
    2c08:	ae e4       	ldi	r26, 0x4E	; 78
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	ee e4       	ldi	r30, 0x4E	; 78
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	28 2f       	mov	r18, r24
    2c14:	27 7e       	andi	r18, 0xE7	; 231
    2c16:	e9 81       	ldd	r30, Y+1	; 0x01
    2c18:	fa 81       	ldd	r31, Y+2	; 0x02
    2c1a:	81 81       	ldd	r24, Z+1	; 0x01
    2c1c:	86 95       	lsr	r24
    2c1e:	88 2f       	mov	r24, r24
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	82 2b       	or	r24, r18
    2c30:	8c 93       	st	X, r24
		/* choose the timer clock (F_CPU / prescaler)*/
	TCCR1B = ( ( TCCR1B & 0xF8 ) | (Config_Ptr -> clock) );
    2c32:	ae e4       	ldi	r26, 0x4E	; 78
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	ee e4       	ldi	r30, 0x4E	; 78
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	98 2f       	mov	r25, r24
    2c3e:	98 7f       	andi	r25, 0xF8	; 248
    2c40:	e9 81       	ldd	r30, Y+1	; 0x01
    2c42:	fa 81       	ldd	r31, Y+2	; 0x02
    2c44:	80 81       	ld	r24, Z
    2c46:	89 2b       	or	r24, r25
    2c48:	8c 93       	st	X, r24
}
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	cf 91       	pop	r28
    2c50:	df 91       	pop	r29
    2c52:	08 95       	ret

00002c54 <TIMER2_init>:

void TIMER2_init(const Timer_ConfigType * Config_Ptr)
{
    2c54:	df 93       	push	r29
    2c56:	cf 93       	push	r28
    2c58:	00 d0       	rcall	.+0      	; 0x2c5a <TIMER2_init+0x6>
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	9a 83       	std	Y+2, r25	; 0x02
    2c60:	89 83       	std	Y+1, r24	; 0x01
	/* Clear Registers before do anything */
/*	TCCR2 &= 0x00;
	TCNT2 &= 0x00;
*/
	/*set the initail value of the timer*/
	TCNT2 = Config_Ptr->initial;
    2c62:	a4 e4       	ldi	r26, 0x44	; 68
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	e9 81       	ldd	r30, Y+1	; 0x01
    2c68:	fa 81       	ldd	r31, Y+2	; 0x02
    2c6a:	84 81       	ldd	r24, Z+4	; 0x04
    2c6c:	95 81       	ldd	r25, Z+5	; 0x05
    2c6e:	8c 93       	st	X, r24
	/*set the compare value of the compare mode timer*/
	OCR2 = Config_Ptr->compare_value;
    2c70:	a3 e4       	ldi	r26, 0x43	; 67
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	e9 81       	ldd	r30, Y+1	; 0x01
    2c76:	fa 81       	ldd	r31, Y+2	; 0x02
    2c78:	86 81       	ldd	r24, Z+6	; 0x06
    2c7a:	97 81       	ldd	r25, Z+7	; 0x07
    2c7c:	8c 93       	st	X, r24
	/*non PWM mode*/
	TCCR2 = (1<<FOC2);
    2c7e:	e5 e4       	ldi	r30, 0x45	; 69
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 e8       	ldi	r24, 0x80	; 128
    2c84:	80 83       	st	Z, r24

	/* Check which timer mode is chosen */
	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    2c86:	e9 81       	ldd	r30, Y+1	; 0x01
    2c88:	fa 81       	ldd	r31, Y+2	; 0x02
    2c8a:	81 81       	ldd	r24, Z+1	; 0x01
    2c8c:	88 23       	and	r24, r24
    2c8e:	41 f4       	brne	.+16     	; 0x2ca0 <TIMER2_init+0x4c>
	/*	Enable interrupt for normal mode */
		TIMSK |= (1 << TOIE2);
    2c90:	a9 e5       	ldi	r26, 0x59	; 89
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e9 e5       	ldi	r30, 0x59	; 89
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	80 64       	ori	r24, 0x40	; 64
    2c9c:	8c 93       	st	X, r24
    2c9e:	0c c0       	rjmp	.+24     	; 0x2cb8 <TIMER2_init+0x64>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    2ca0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ca2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ca4:	81 81       	ldd	r24, Z+1	; 0x01
    2ca6:	81 30       	cpi	r24, 0x01	; 1
    2ca8:	39 f4       	brne	.+14     	; 0x2cb8 <TIMER2_init+0x64>

		/*	 Enable interrupt for compare mode */
		TIMSK |= (1 << OCIE2);
    2caa:	a9 e5       	ldi	r26, 0x59	; 89
    2cac:	b0 e0       	ldi	r27, 0x00	; 0
    2cae:	e9 e5       	ldi	r30, 0x59	; 89
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	80 68       	ori	r24, 0x80	; 128
    2cb6:	8c 93       	st	X, r24
	}
	/*configure the mode of the timer*/
	TCCR2 = (TCCR2 & 0XB7) | ((Config_Ptr->mode & 0X48)<< WGM20);
    2cb8:	a5 e4       	ldi	r26, 0x45	; 69
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e5 e4       	ldi	r30, 0x45	; 69
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	28 2f       	mov	r18, r24
    2cc4:	27 7b       	andi	r18, 0xB7	; 183
    2cc6:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc8:	fa 81       	ldd	r31, Y+2	; 0x02
    2cca:	81 81       	ldd	r24, Z+1	; 0x01
    2ccc:	88 2f       	mov	r24, r24
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	88 74       	andi	r24, 0x48	; 72
    2cd2:	90 70       	andi	r25, 0x00	; 0
    2cd4:	00 24       	eor	r0, r0
    2cd6:	96 95       	lsr	r25
    2cd8:	87 95       	ror	r24
    2cda:	07 94       	ror	r0
    2cdc:	96 95       	lsr	r25
    2cde:	87 95       	ror	r24
    2ce0:	07 94       	ror	r0
    2ce2:	98 2f       	mov	r25, r24
    2ce4:	80 2d       	mov	r24, r0
    2ce6:	82 2b       	or	r24, r18
    2ce8:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR2 = (TCCR2 & 0XCF) | ((Config_Ptr->compare_output & 0X03)<<COM20);
    2cea:	a5 e4       	ldi	r26, 0x45	; 69
    2cec:	b0 e0       	ldi	r27, 0x00	; 0
    2cee:	e5 e4       	ldi	r30, 0x45	; 69
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	2f 7c       	andi	r18, 0xCF	; 207
    2cf8:	e9 81       	ldd	r30, Y+1	; 0x01
    2cfa:	fa 81       	ldd	r31, Y+2	; 0x02
    2cfc:	82 81       	ldd	r24, Z+2	; 0x02
    2cfe:	88 2f       	mov	r24, r24
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	83 70       	andi	r24, 0x03	; 3
    2d04:	90 70       	andi	r25, 0x00	; 0
    2d06:	82 95       	swap	r24
    2d08:	92 95       	swap	r25
    2d0a:	90 7f       	andi	r25, 0xF0	; 240
    2d0c:	98 27       	eor	r25, r24
    2d0e:	80 7f       	andi	r24, 0xF0	; 240
    2d10:	98 27       	eor	r25, r24
    2d12:	82 2b       	or	r24, r18
    2d14:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->clock & 0X07);
    2d16:	a5 e4       	ldi	r26, 0x45	; 69
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	e5 e4       	ldi	r30, 0x45	; 69
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	98 2f       	mov	r25, r24
    2d22:	98 7f       	andi	r25, 0xF8	; 248
    2d24:	e9 81       	ldd	r30, Y+1	; 0x01
    2d26:	fa 81       	ldd	r31, Y+2	; 0x02
    2d28:	80 81       	ld	r24, Z
    2d2a:	87 70       	andi	r24, 0x07	; 7
    2d2c:	89 2b       	or	r24, r25
    2d2e:	8c 93       	st	X, r24
}
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	08 95       	ret

00002d3a <Timer0_Stop>:

void Timer0_Stop()
{
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000; // stop the clock
    2d42:	a3 e5       	ldi	r26, 0x53	; 83
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e3 e5       	ldi	r30, 0x53	; 83
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	88 7f       	andi	r24, 0xF8	; 248
    2d4e:	8c 93       	st	X, r24
}
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	08 95       	ret

00002d56 <Timer1_Stop>:

void Timer1_Stop(){
    2d56:	df 93       	push	r29
    2d58:	cf 93       	push	r28
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000; // stop the clock
    2d5e:	ae e4       	ldi	r26, 0x4E	; 78
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	ee e4       	ldi	r30, 0x4E	; 78
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	88 7f       	andi	r24, 0xF8	; 248
    2d6a:	8c 93       	st	X, r24
}
    2d6c:	cf 91       	pop	r28
    2d6e:	df 91       	pop	r29
    2d70:	08 95       	ret

00002d72 <Timer2_Stop>:

void Timer2_Stop(){
    2d72:	df 93       	push	r29
    2d74:	cf 93       	push	r28
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0b11111000; // stop the clock
    2d7a:	a5 e4       	ldi	r26, 0x45	; 69
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	e5 e4       	ldi	r30, 0x45	; 69
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	88 7f       	andi	r24, 0xF8	; 248
    2d86:	8c 93       	st	X, r24
}
    2d88:	cf 91       	pop	r28
    2d8a:	df 91       	pop	r29
    2d8c:	08 95       	ret

00002d8e <Timer0_setCallBack>:



void Timer0_setCallBack(void(*a_ptr)(void))
{
    2d8e:	df 93       	push	r29
    2d90:	cf 93       	push	r28
    2d92:	00 d0       	rcall	.+0      	; 0x2d94 <Timer0_setCallBack+0x6>
    2d94:	cd b7       	in	r28, 0x3d	; 61
    2d96:	de b7       	in	r29, 0x3e	; 62
    2d98:	9a 83       	std	Y+2, r25	; 0x02
    2d9a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer0_callBackPtr = a_ptr;
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2da0:	90 93 fb 00 	sts	0x00FB, r25
    2da4:	80 93 fa 00 	sts	0x00FA, r24
}
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2db2:	df 93       	push	r29
    2db4:	cf 93       	push	r28
    2db6:	00 d0       	rcall	.+0      	; 0x2db8 <Timer1_setCallBack+0x6>
    2db8:	cd b7       	in	r28, 0x3d	; 61
    2dba:	de b7       	in	r29, 0x3e	; 62
    2dbc:	9a 83       	std	Y+2, r25	; 0x02
    2dbe:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer1_callBackPtr = a_ptr;
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc4:	90 93 fd 00 	sts	0x00FD, r25
    2dc8:	80 93 fc 00 	sts	0x00FC, r24
}
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	08 95       	ret

00002dd6 <Timer2_setCallBack>:
void Timer2_setCallBack(void(*a_ptr)(void))
{
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <Timer2_setCallBack+0x6>
    2ddc:	cd b7       	in	r28, 0x3d	; 61
    2dde:	de b7       	in	r29, 0x3e	; 62
    2de0:	9a 83       	std	Y+2, r25	; 0x02
    2de2:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer2_callBackPtr = a_ptr;
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	9a 81       	ldd	r25, Y+2	; 0x02
    2de8:	90 93 ff 00 	sts	0x00FF, r25
    2dec:	80 93 fe 00 	sts	0x00FE, r24
}
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	cf 91       	pop	r28
    2df6:	df 91       	pop	r29
    2df8:	08 95       	ret

00002dfa <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    2dfa:	df 93       	push	r29
    2dfc:	cf 93       	push	r28
    2dfe:	00 d0       	rcall	.+0      	; 0x2e00 <UART_init+0x6>
    2e00:	00 d0       	rcall	.+0      	; 0x2e02 <UART_init+0x8>
    2e02:	00 d0       	rcall	.+0      	; 0x2e04 <UART_init+0xa>
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	6b 83       	std	Y+3, r22	; 0x03
    2e0a:	7c 83       	std	Y+4, r23	; 0x04
    2e0c:	8d 83       	std	Y+5, r24	; 0x05
    2e0e:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    2e10:	1a 82       	std	Y+2, r1	; 0x02
    2e12:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2e14:	eb e2       	ldi	r30, 0x2B	; 43
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	82 e0       	ldi	r24, 0x02	; 2
    2e1a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2e1c:	ea e2       	ldi	r30, 0x2A	; 42
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	88 e1       	ldi	r24, 0x18	; 24
    2e22:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2e24:	e0 e4       	ldi	r30, 0x40	; 64
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	86 e8       	ldi	r24, 0x86	; 134
    2e2a:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    2e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e30:	ad 81       	ldd	r26, Y+5	; 0x05
    2e32:	be 81       	ldd	r27, Y+6	; 0x06
    2e34:	88 0f       	add	r24, r24
    2e36:	99 1f       	adc	r25, r25
    2e38:	aa 1f       	adc	r26, r26
    2e3a:	bb 1f       	adc	r27, r27
    2e3c:	88 0f       	add	r24, r24
    2e3e:	99 1f       	adc	r25, r25
    2e40:	aa 1f       	adc	r26, r26
    2e42:	bb 1f       	adc	r27, r27
    2e44:	88 0f       	add	r24, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	aa 1f       	adc	r26, r26
    2e4a:	bb 1f       	adc	r27, r27
    2e4c:	9c 01       	movw	r18, r24
    2e4e:	ad 01       	movw	r20, r26
    2e50:	80 e4       	ldi	r24, 0x40	; 64
    2e52:	92 e4       	ldi	r25, 0x42	; 66
    2e54:	af e0       	ldi	r26, 0x0F	; 15
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <__udivmodsi4>
    2e60:	da 01       	movw	r26, r20
    2e62:	c9 01       	movw	r24, r18
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	9a 83       	std	Y+2, r25	; 0x02
    2e68:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2e6a:	e0 e4       	ldi	r30, 0x40	; 64
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
    2e70:	9a 81       	ldd	r25, Y+2	; 0x02
    2e72:	89 2f       	mov	r24, r25
    2e74:	99 27       	eor	r25, r25
    2e76:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2e78:	e9 e2       	ldi	r30, 0x29	; 41
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	80 83       	st	Z, r24
}
    2e80:	26 96       	adiw	r28, 0x06	; 6
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	de bf       	out	0x3e, r29	; 62
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	cd bf       	out	0x3d, r28	; 61
    2e8c:	cf 91       	pop	r28
    2e8e:	df 91       	pop	r29
    2e90:	08 95       	ret

00002e92 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2e92:	df 93       	push	r29
    2e94:	cf 93       	push	r28
    2e96:	0f 92       	push	r0
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2e9e:	eb e2       	ldi	r30, 0x2B	; 43
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	88 2f       	mov	r24, r24
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	80 72       	andi	r24, 0x20	; 32
    2eaa:	90 70       	andi	r25, 0x00	; 0
    2eac:	00 97       	sbiw	r24, 0x00	; 0
    2eae:	b9 f3       	breq	.-18     	; 0x2e9e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2eb0:	ec e2       	ldi	r30, 0x2C	; 44
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2eb8:	0f 90       	pop	r0
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2ec8:	eb e2       	ldi	r30, 0x2B	; 43
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	88 23       	and	r24, r24
    2ed0:	dc f7       	brge	.-10     	; 0x2ec8 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2ed2:	ec e2       	ldi	r30, 0x2C	; 44
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
}
    2ed8:	cf 91       	pop	r28
    2eda:	df 91       	pop	r29
    2edc:	08 95       	ret

00002ede <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2ede:	df 93       	push	r29
    2ee0:	cf 93       	push	r28
    2ee2:	00 d0       	rcall	.+0      	; 0x2ee4 <UART_sendString+0x6>
    2ee4:	0f 92       	push	r0
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	9b 83       	std	Y+3, r25	; 0x03
    2eec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2eee:	19 82       	std	Y+1, r1	; 0x01
    2ef0:	0e c0       	rjmp	.+28     	; 0x2f0e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    2efa:	9b 81       	ldd	r25, Y+3	; 0x03
    2efc:	fc 01       	movw	r30, r24
    2efe:	e2 0f       	add	r30, r18
    2f00:	f3 1f       	adc	r31, r19
    2f02:	80 81       	ld	r24, Z
    2f04:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_sendByte>
		i++;
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	8f 5f       	subi	r24, 0xFF	; 255
    2f0c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	28 2f       	mov	r18, r24
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	8a 81       	ldd	r24, Y+2	; 0x02
    2f16:	9b 81       	ldd	r25, Y+3	; 0x03
    2f18:	fc 01       	movw	r30, r24
    2f1a:	e2 0f       	add	r30, r18
    2f1c:	f3 1f       	adc	r31, r19
    2f1e:	80 81       	ld	r24, Z
    2f20:	88 23       	and	r24, r24
    2f22:	39 f7       	brne	.-50     	; 0x2ef2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	cf 91       	pop	r28
    2f2c:	df 91       	pop	r29
    2f2e:	08 95       	ret

00002f30 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2f30:	0f 93       	push	r16
    2f32:	1f 93       	push	r17
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	00 d0       	rcall	.+0      	; 0x2f3a <UART_receiveString+0xa>
    2f3a:	0f 92       	push	r0
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	9b 83       	std	Y+3, r25	; 0x03
    2f42:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f44:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	28 2f       	mov	r18, r24
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f50:	8c 01       	movw	r16, r24
    2f52:	02 0f       	add	r16, r18
    2f54:	13 1f       	adc	r17, r19
    2f56:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <UART_recieveByte>
    2f5a:	f8 01       	movw	r30, r16
    2f5c:	80 83       	st	Z, r24
    2f5e:	0f c0       	rjmp	.+30     	; 0x2f7e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	8f 5f       	subi	r24, 0xFF	; 255
    2f64:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	28 2f       	mov	r18, r24
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f70:	8c 01       	movw	r16, r24
    2f72:	02 0f       	add	r16, r18
    2f74:	13 1f       	adc	r17, r19
    2f76:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <UART_recieveByte>
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
    2f80:	28 2f       	mov	r18, r24
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	8a 81       	ldd	r24, Y+2	; 0x02
    2f86:	9b 81       	ldd	r25, Y+3	; 0x03
    2f88:	fc 01       	movw	r30, r24
    2f8a:	e2 0f       	add	r30, r18
    2f8c:	f3 1f       	adc	r31, r19
    2f8e:	80 81       	ld	r24, Z
    2f90:	83 32       	cpi	r24, 0x23	; 35
    2f92:	31 f7       	brne	.-52     	; 0x2f60 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	28 2f       	mov	r18, r24
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	e2 0f       	add	r30, r18
    2fa2:	f3 1f       	adc	r31, r19
    2fa4:	10 82       	st	Z, r1
}
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	cf 91       	pop	r28
    2fae:	df 91       	pop	r29
    2fb0:	1f 91       	pop	r17
    2fb2:	0f 91       	pop	r16
    2fb4:	08 95       	ret

00002fb6 <__udivmodsi4>:
    2fb6:	a1 e2       	ldi	r26, 0x21	; 33
    2fb8:	1a 2e       	mov	r1, r26
    2fba:	aa 1b       	sub	r26, r26
    2fbc:	bb 1b       	sub	r27, r27
    2fbe:	fd 01       	movw	r30, r26
    2fc0:	0d c0       	rjmp	.+26     	; 0x2fdc <__udivmodsi4_ep>

00002fc2 <__udivmodsi4_loop>:
    2fc2:	aa 1f       	adc	r26, r26
    2fc4:	bb 1f       	adc	r27, r27
    2fc6:	ee 1f       	adc	r30, r30
    2fc8:	ff 1f       	adc	r31, r31
    2fca:	a2 17       	cp	r26, r18
    2fcc:	b3 07       	cpc	r27, r19
    2fce:	e4 07       	cpc	r30, r20
    2fd0:	f5 07       	cpc	r31, r21
    2fd2:	20 f0       	brcs	.+8      	; 0x2fdc <__udivmodsi4_ep>
    2fd4:	a2 1b       	sub	r26, r18
    2fd6:	b3 0b       	sbc	r27, r19
    2fd8:	e4 0b       	sbc	r30, r20
    2fda:	f5 0b       	sbc	r31, r21

00002fdc <__udivmodsi4_ep>:
    2fdc:	66 1f       	adc	r22, r22
    2fde:	77 1f       	adc	r23, r23
    2fe0:	88 1f       	adc	r24, r24
    2fe2:	99 1f       	adc	r25, r25
    2fe4:	1a 94       	dec	r1
    2fe6:	69 f7       	brne	.-38     	; 0x2fc2 <__udivmodsi4_loop>
    2fe8:	60 95       	com	r22
    2fea:	70 95       	com	r23
    2fec:	80 95       	com	r24
    2fee:	90 95       	com	r25
    2ff0:	9b 01       	movw	r18, r22
    2ff2:	ac 01       	movw	r20, r24
    2ff4:	bd 01       	movw	r22, r26
    2ff6:	cf 01       	movw	r24, r30
    2ff8:	08 95       	ret

00002ffa <__prologue_saves__>:
    2ffa:	2f 92       	push	r2
    2ffc:	3f 92       	push	r3
    2ffe:	4f 92       	push	r4
    3000:	5f 92       	push	r5
    3002:	6f 92       	push	r6
    3004:	7f 92       	push	r7
    3006:	8f 92       	push	r8
    3008:	9f 92       	push	r9
    300a:	af 92       	push	r10
    300c:	bf 92       	push	r11
    300e:	cf 92       	push	r12
    3010:	df 92       	push	r13
    3012:	ef 92       	push	r14
    3014:	ff 92       	push	r15
    3016:	0f 93       	push	r16
    3018:	1f 93       	push	r17
    301a:	cf 93       	push	r28
    301c:	df 93       	push	r29
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	ca 1b       	sub	r28, r26
    3024:	db 0b       	sbc	r29, r27
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	f8 94       	cli
    302a:	de bf       	out	0x3e, r29	; 62
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	cd bf       	out	0x3d, r28	; 61
    3030:	09 94       	ijmp

00003032 <__epilogue_restores__>:
    3032:	2a 88       	ldd	r2, Y+18	; 0x12
    3034:	39 88       	ldd	r3, Y+17	; 0x11
    3036:	48 88       	ldd	r4, Y+16	; 0x10
    3038:	5f 84       	ldd	r5, Y+15	; 0x0f
    303a:	6e 84       	ldd	r6, Y+14	; 0x0e
    303c:	7d 84       	ldd	r7, Y+13	; 0x0d
    303e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3040:	9b 84       	ldd	r9, Y+11	; 0x0b
    3042:	aa 84       	ldd	r10, Y+10	; 0x0a
    3044:	b9 84       	ldd	r11, Y+9	; 0x09
    3046:	c8 84       	ldd	r12, Y+8	; 0x08
    3048:	df 80       	ldd	r13, Y+7	; 0x07
    304a:	ee 80       	ldd	r14, Y+6	; 0x06
    304c:	fd 80       	ldd	r15, Y+5	; 0x05
    304e:	0c 81       	ldd	r16, Y+4	; 0x04
    3050:	1b 81       	ldd	r17, Y+3	; 0x03
    3052:	aa 81       	ldd	r26, Y+2	; 0x02
    3054:	b9 81       	ldd	r27, Y+1	; 0x01
    3056:	ce 0f       	add	r28, r30
    3058:	d1 1d       	adc	r29, r1
    305a:	0f b6       	in	r0, 0x3f	; 63
    305c:	f8 94       	cli
    305e:	de bf       	out	0x3e, r29	; 62
    3060:	0f be       	out	0x3f, r0	; 63
    3062:	cd bf       	out	0x3d, r28	; 61
    3064:	ed 01       	movw	r28, r26
    3066:	08 95       	ret

00003068 <itoa>:
    3068:	fb 01       	movw	r30, r22
    306a:	9f 01       	movw	r18, r30
    306c:	e8 94       	clt
    306e:	42 30       	cpi	r20, 0x02	; 2
    3070:	c4 f0       	brlt	.+48     	; 0x30a2 <itoa+0x3a>
    3072:	45 32       	cpi	r20, 0x25	; 37
    3074:	b4 f4       	brge	.+44     	; 0x30a2 <itoa+0x3a>
    3076:	4a 30       	cpi	r20, 0x0A	; 10
    3078:	29 f4       	brne	.+10     	; 0x3084 <itoa+0x1c>
    307a:	97 fb       	bst	r25, 7
    307c:	1e f4       	brtc	.+6      	; 0x3084 <itoa+0x1c>
    307e:	90 95       	com	r25
    3080:	81 95       	neg	r24
    3082:	9f 4f       	sbci	r25, 0xFF	; 255
    3084:	64 2f       	mov	r22, r20
    3086:	77 27       	eor	r23, r23
    3088:	0e 94 65 18 	call	0x30ca	; 0x30ca <__udivmodhi4>
    308c:	80 5d       	subi	r24, 0xD0	; 208
    308e:	8a 33       	cpi	r24, 0x3A	; 58
    3090:	0c f0       	brlt	.+2      	; 0x3094 <itoa+0x2c>
    3092:	89 5d       	subi	r24, 0xD9	; 217
    3094:	81 93       	st	Z+, r24
    3096:	cb 01       	movw	r24, r22
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	a1 f7       	brne	.-24     	; 0x3084 <itoa+0x1c>
    309c:	16 f4       	brtc	.+4      	; 0x30a2 <itoa+0x3a>
    309e:	5d e2       	ldi	r21, 0x2D	; 45
    30a0:	51 93       	st	Z+, r21
    30a2:	10 82       	st	Z, r1
    30a4:	c9 01       	movw	r24, r18
    30a6:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <strrev>

000030aa <strrev>:
    30aa:	dc 01       	movw	r26, r24
    30ac:	fc 01       	movw	r30, r24
    30ae:	67 2f       	mov	r22, r23
    30b0:	71 91       	ld	r23, Z+
    30b2:	77 23       	and	r23, r23
    30b4:	e1 f7       	brne	.-8      	; 0x30ae <strrev+0x4>
    30b6:	32 97       	sbiw	r30, 0x02	; 2
    30b8:	04 c0       	rjmp	.+8      	; 0x30c2 <strrev+0x18>
    30ba:	7c 91       	ld	r23, X
    30bc:	6d 93       	st	X+, r22
    30be:	70 83       	st	Z, r23
    30c0:	62 91       	ld	r22, -Z
    30c2:	ae 17       	cp	r26, r30
    30c4:	bf 07       	cpc	r27, r31
    30c6:	c8 f3       	brcs	.-14     	; 0x30ba <strrev+0x10>
    30c8:	08 95       	ret

000030ca <__udivmodhi4>:
    30ca:	aa 1b       	sub	r26, r26
    30cc:	bb 1b       	sub	r27, r27
    30ce:	51 e1       	ldi	r21, 0x11	; 17
    30d0:	07 c0       	rjmp	.+14     	; 0x30e0 <__udivmodhi4_ep>

000030d2 <__udivmodhi4_loop>:
    30d2:	aa 1f       	adc	r26, r26
    30d4:	bb 1f       	adc	r27, r27
    30d6:	a6 17       	cp	r26, r22
    30d8:	b7 07       	cpc	r27, r23
    30da:	10 f0       	brcs	.+4      	; 0x30e0 <__udivmodhi4_ep>
    30dc:	a6 1b       	sub	r26, r22
    30de:	b7 0b       	sbc	r27, r23

000030e0 <__udivmodhi4_ep>:
    30e0:	88 1f       	adc	r24, r24
    30e2:	99 1f       	adc	r25, r25
    30e4:	5a 95       	dec	r21
    30e6:	a9 f7       	brne	.-22     	; 0x30d2 <__udivmodhi4_loop>
    30e8:	80 95       	com	r24
    30ea:	90 95       	com	r25
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	08 95       	ret

000030f2 <_exit>:
    30f2:	f8 94       	cli

000030f4 <__stop_program>:
    30f4:	ff cf       	rjmp	.-2      	; 0x30f4 <__stop_program>
