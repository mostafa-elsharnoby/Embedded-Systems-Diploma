
MiniProject3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e56  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00002e56  00002eca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e24  00000000  00000000  00002fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e45  00000000  00000000  00004e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000220  00000000  00000000  00005c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000278  00000000  00000000  00005e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a72  00000000  00000000  000060ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000177d  00000000  00000000  00008b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015b6  00000000  00000000  0000a2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  0000b894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000361  00000000  00000000  0000bad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000df4  00000000  00000000  0000be35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000cc29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <main>
      7a:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__ashldi3>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	df 93       	push	r29
      8a:	cf 93       	push	r28
      8c:	cd b7       	in	r28, 0x3d	; 61
      8e:	de b7       	in	r29, 0x3e	; 62
      90:	60 97       	sbiw	r28, 0x10	; 16
      92:	0f b6       	in	r0, 0x3f	; 63
      94:	f8 94       	cli
      96:	de bf       	out	0x3e, r29	; 62
      98:	0f be       	out	0x3f, r0	; 63
      9a:	cd bf       	out	0x3d, r28	; 61
      9c:	a8 2f       	mov	r26, r24
      9e:	00 23       	and	r16, r16
      a0:	09 f4       	brne	.+2      	; 0xa4 <__ashldi3+0x22>
      a2:	61 c0       	rjmp	.+194    	; 0x166 <__ashldi3+0xe4>
      a4:	7e 01       	movw	r14, r28
      a6:	08 94       	sec
      a8:	e1 1c       	adc	r14, r1
      aa:	f1 1c       	adc	r15, r1
      ac:	88 e0       	ldi	r24, 0x08	; 8
      ae:	f7 01       	movw	r30, r14
      b0:	11 92       	st	Z+, r1
      b2:	8a 95       	dec	r24
      b4:	e9 f7       	brne	.-6      	; 0xb0 <__ashldi3+0x2e>
      b6:	29 83       	std	Y+1, r18	; 0x01
      b8:	3a 83       	std	Y+2, r19	; 0x02
      ba:	4b 83       	std	Y+3, r20	; 0x03
      bc:	5c 83       	std	Y+4, r21	; 0x04
      be:	6d 83       	std	Y+5, r22	; 0x05
      c0:	7e 83       	std	Y+6, r23	; 0x06
      c2:	af 83       	std	Y+7, r26	; 0x07
      c4:	98 87       	std	Y+8, r25	; 0x08
      c6:	80 e2       	ldi	r24, 0x20	; 32
      c8:	80 1b       	sub	r24, r16
      ca:	e8 2f       	mov	r30, r24
      cc:	ff 27       	eor	r31, r31
      ce:	e7 fd       	sbrc	r30, 7
      d0:	f0 95       	com	r31
      d2:	49 81       	ldd	r20, Y+1	; 0x01
      d4:	5a 81       	ldd	r21, Y+2	; 0x02
      d6:	6b 81       	ldd	r22, Y+3	; 0x03
      d8:	7c 81       	ldd	r23, Y+4	; 0x04
      da:	18 16       	cp	r1, r24
      dc:	84 f0       	brlt	.+32     	; 0xfe <__ashldi3+0x7c>
      de:	19 86       	std	Y+9, r1	; 0x09
      e0:	1a 86       	std	Y+10, r1	; 0x0a
      e2:	1b 86       	std	Y+11, r1	; 0x0b
      e4:	1c 86       	std	Y+12, r1	; 0x0c
      e6:	88 27       	eor	r24, r24
      e8:	99 27       	eor	r25, r25
      ea:	8e 1b       	sub	r24, r30
      ec:	9f 0b       	sbc	r25, r31
      ee:	04 c0       	rjmp	.+8      	; 0xf8 <__ashldi3+0x76>
      f0:	44 0f       	add	r20, r20
      f2:	55 1f       	adc	r21, r21
      f4:	66 1f       	adc	r22, r22
      f6:	77 1f       	adc	r23, r23
      f8:	8a 95       	dec	r24
      fa:	d2 f7       	brpl	.-12     	; 0xf0 <__ashldi3+0x6e>
      fc:	28 c0       	rjmp	.+80     	; 0x14e <__ashldi3+0xcc>
      fe:	20 2f       	mov	r18, r16
     100:	33 27       	eor	r19, r19
     102:	27 fd       	sbrc	r18, 7
     104:	30 95       	com	r19
     106:	db 01       	movw	r26, r22
     108:	ca 01       	movw	r24, r20
     10a:	02 2e       	mov	r0, r18
     10c:	04 c0       	rjmp	.+8      	; 0x116 <__ashldi3+0x94>
     10e:	88 0f       	add	r24, r24
     110:	99 1f       	adc	r25, r25
     112:	aa 1f       	adc	r26, r26
     114:	bb 1f       	adc	r27, r27
     116:	0a 94       	dec	r0
     118:	d2 f7       	brpl	.-12     	; 0x10e <__ashldi3+0x8c>
     11a:	89 87       	std	Y+9, r24	; 0x09
     11c:	9a 87       	std	Y+10, r25	; 0x0a
     11e:	ab 87       	std	Y+11, r26	; 0x0b
     120:	bc 87       	std	Y+12, r27	; 0x0c
     122:	04 c0       	rjmp	.+8      	; 0x12c <__ashldi3+0xaa>
     124:	76 95       	lsr	r23
     126:	67 95       	ror	r22
     128:	57 95       	ror	r21
     12a:	47 95       	ror	r20
     12c:	ea 95       	dec	r30
     12e:	d2 f7       	brpl	.-12     	; 0x124 <__ashldi3+0xa2>
     130:	8d 81       	ldd	r24, Y+5	; 0x05
     132:	9e 81       	ldd	r25, Y+6	; 0x06
     134:	af 81       	ldd	r26, Y+7	; 0x07
     136:	b8 85       	ldd	r27, Y+8	; 0x08
     138:	04 c0       	rjmp	.+8      	; 0x142 <__ashldi3+0xc0>
     13a:	88 0f       	add	r24, r24
     13c:	99 1f       	adc	r25, r25
     13e:	aa 1f       	adc	r26, r26
     140:	bb 1f       	adc	r27, r27
     142:	2a 95       	dec	r18
     144:	d2 f7       	brpl	.-12     	; 0x13a <__ashldi3+0xb8>
     146:	48 2b       	or	r20, r24
     148:	59 2b       	or	r21, r25
     14a:	6a 2b       	or	r22, r26
     14c:	7b 2b       	or	r23, r27
     14e:	4d 87       	std	Y+13, r20	; 0x0d
     150:	5e 87       	std	Y+14, r21	; 0x0e
     152:	6f 87       	std	Y+15, r22	; 0x0f
     154:	78 8b       	std	Y+16, r23	; 0x10
     156:	29 85       	ldd	r18, Y+9	; 0x09
     158:	3a 85       	ldd	r19, Y+10	; 0x0a
     15a:	4b 85       	ldd	r20, Y+11	; 0x0b
     15c:	5c 85       	ldd	r21, Y+12	; 0x0c
     15e:	6d 85       	ldd	r22, Y+13	; 0x0d
     160:	7e 85       	ldd	r23, Y+14	; 0x0e
     162:	af 85       	ldd	r26, Y+15	; 0x0f
     164:	98 89       	ldd	r25, Y+16	; 0x10
     166:	8a 2f       	mov	r24, r26
     168:	60 96       	adiw	r28, 0x10	; 16
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	f8 94       	cli
     16e:	de bf       	out	0x3e, r29	; 62
     170:	0f be       	out	0x3f, r0	; 63
     172:	cd bf       	out	0x3d, r28	; 61
     174:	cf 91       	pop	r28
     176:	df 91       	pop	r29
     178:	0f 91       	pop	r16
     17a:	ff 90       	pop	r15
     17c:	ef 90       	pop	r14
     17e:	08 95       	ret

00000180 <__fixunssfsi>:
     180:	ef 92       	push	r14
     182:	ff 92       	push	r15
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	7b 01       	movw	r14, r22
     18a:	8c 01       	movw	r16, r24
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	40 e0       	ldi	r20, 0x00	; 0
     192:	5f e4       	ldi	r21, 0x4F	; 79
     194:	0e 94 48 05 	call	0xa90	; 0xa90 <__gesf2>
     198:	88 23       	and	r24, r24
     19a:	8c f0       	brlt	.+34     	; 0x1be <__fixunssfsi+0x3e>
     19c:	c8 01       	movw	r24, r16
     19e:	b7 01       	movw	r22, r14
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	5f e4       	ldi	r21, 0x4F	; 79
     1a8:	0e 94 14 03 	call	0x628	; 0x628 <__subsf3>
     1ac:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fixsfsi>
     1b0:	9b 01       	movw	r18, r22
     1b2:	ac 01       	movw	r20, r24
     1b4:	20 50       	subi	r18, 0x00	; 0
     1b6:	30 40       	sbci	r19, 0x00	; 0
     1b8:	40 40       	sbci	r20, 0x00	; 0
     1ba:	50 48       	sbci	r21, 0x80	; 128
     1bc:	06 c0       	rjmp	.+12     	; 0x1ca <__fixunssfsi+0x4a>
     1be:	c8 01       	movw	r24, r16
     1c0:	b7 01       	movw	r22, r14
     1c2:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fixsfsi>
     1c6:	9b 01       	movw	r18, r22
     1c8:	ac 01       	movw	r20, r24
     1ca:	b9 01       	movw	r22, r18
     1cc:	ca 01       	movw	r24, r20
     1ce:	1f 91       	pop	r17
     1d0:	0f 91       	pop	r16
     1d2:	ff 90       	pop	r15
     1d4:	ef 90       	pop	r14
     1d6:	08 95       	ret

000001d8 <__floatundisf>:
     1d8:	a2 e0       	ldi	r26, 0x02	; 2
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	e2 ef       	ldi	r30, 0xF2	; 242
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__>
     1e4:	12 2f       	mov	r17, r18
     1e6:	b3 2e       	mov	r11, r19
     1e8:	a4 2e       	mov	r10, r20
     1ea:	95 2e       	mov	r9, r21
     1ec:	86 2e       	mov	r8, r22
     1ee:	37 2e       	mov	r3, r23
     1f0:	28 2e       	mov	r2, r24
     1f2:	9a 83       	std	Y+2, r25	; 0x02
     1f4:	c2 2e       	mov	r12, r18
     1f6:	d3 2e       	mov	r13, r19
     1f8:	e4 2e       	mov	r14, r20
     1fa:	f5 2e       	mov	r15, r21
     1fc:	a7 01       	movw	r20, r14
     1fe:	96 01       	movw	r18, r12
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	21 17       	cp	r18, r17
     20a:	a1 f4       	brne	.+40     	; 0x234 <__floatundisf+0x5c>
     20c:	3b 15       	cp	r19, r11
     20e:	91 f4       	brne	.+36     	; 0x234 <__floatundisf+0x5c>
     210:	4a 15       	cp	r20, r10
     212:	81 f4       	brne	.+32     	; 0x234 <__floatundisf+0x5c>
     214:	59 15       	cp	r21, r9
     216:	71 f4       	brne	.+28     	; 0x234 <__floatundisf+0x5c>
     218:	68 15       	cp	r22, r8
     21a:	61 f4       	brne	.+24     	; 0x234 <__floatundisf+0x5c>
     21c:	73 15       	cp	r23, r3
     21e:	51 f4       	brne	.+20     	; 0x234 <__floatundisf+0x5c>
     220:	82 15       	cp	r24, r2
     222:	41 f4       	brne	.+16     	; 0x234 <__floatundisf+0x5c>
     224:	aa 81       	ldd	r26, Y+2	; 0x02
     226:	9a 17       	cp	r25, r26
     228:	29 f4       	brne	.+10     	; 0x234 <__floatundisf+0x5c>
     22a:	c7 01       	movw	r24, r14
     22c:	b6 01       	movw	r22, r12
     22e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__floatunsisf>
     232:	aa c0       	rjmp	.+340    	; 0x388 <__floatundisf+0x1b0>
     234:	21 2f       	mov	r18, r17
     236:	3b 2d       	mov	r19, r11
     238:	4a 2d       	mov	r20, r10
     23a:	59 2d       	mov	r21, r9
     23c:	68 2d       	mov	r22, r8
     23e:	73 2d       	mov	r23, r3
     240:	82 2d       	mov	r24, r2
     242:	9a 81       	ldd	r25, Y+2	; 0x02
     244:	00 e2       	ldi	r16, 0x20	; 32
     246:	0e 94 d3 06 	call	0xda6	; 0xda6 <__lshrdi3>
     24a:	c9 01       	movw	r24, r18
     24c:	da 01       	movw	r26, r20
     24e:	80 30       	cpi	r24, 0x00	; 0
     250:	e0 e0       	ldi	r30, 0x00	; 0
     252:	9e 07       	cpc	r25, r30
     254:	e1 e0       	ldi	r30, 0x01	; 1
     256:	ae 07       	cpc	r26, r30
     258:	e0 e0       	ldi	r30, 0x00	; 0
     25a:	be 07       	cpc	r27, r30
     25c:	80 f4       	brcc	.+32     	; 0x27e <__floatundisf+0xa6>
     25e:	8f 3f       	cpi	r24, 0xFF	; 255
     260:	91 05       	cpc	r25, r1
     262:	a1 05       	cpc	r26, r1
     264:	b1 05       	cpc	r27, r1
     266:	31 f0       	breq	.+12     	; 0x274 <__floatundisf+0x9c>
     268:	28 f0       	brcs	.+10     	; 0x274 <__floatundisf+0x9c>
     26a:	28 e0       	ldi	r18, 0x08	; 8
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	40 e0       	ldi	r20, 0x00	; 0
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	16 c0       	rjmp	.+44     	; 0x2a0 <__floatundisf+0xc8>
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	11 c0       	rjmp	.+34     	; 0x2a0 <__floatundisf+0xc8>
     27e:	80 30       	cpi	r24, 0x00	; 0
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	9f 07       	cpc	r25, r31
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	af 07       	cpc	r26, r31
     288:	f1 e0       	ldi	r31, 0x01	; 1
     28a:	bf 07       	cpc	r27, r31
     28c:	28 f0       	brcs	.+10     	; 0x298 <__floatundisf+0xc0>
     28e:	28 e1       	ldi	r18, 0x18	; 24
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	04 c0       	rjmp	.+8      	; 0x2a0 <__floatundisf+0xc8>
     298:	20 e1       	ldi	r18, 0x10	; 16
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	02 2e       	mov	r0, r18
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <__floatundisf+0xd4>
     2a4:	b6 95       	lsr	r27
     2a6:	a7 95       	ror	r26
     2a8:	97 95       	ror	r25
     2aa:	87 95       	ror	r24
     2ac:	0a 94       	dec	r0
     2ae:	d2 f7       	brpl	.-12     	; 0x2a4 <__floatundisf+0xcc>
     2b0:	fc 01       	movw	r30, r24
     2b2:	ee 57       	subi	r30, 0x7E	; 126
     2b4:	ff 4f       	sbci	r31, 0xFF	; 255
     2b6:	80 81       	ld	r24, Z
     2b8:	29 01       	movw	r4, r18
     2ba:	3a 01       	movw	r6, r20
     2bc:	48 0e       	add	r4, r24
     2be:	51 1c       	adc	r5, r1
     2c0:	61 1c       	adc	r6, r1
     2c2:	71 1c       	adc	r7, r1
     2c4:	49 82       	std	Y+1, r4	; 0x01
     2c6:	21 2f       	mov	r18, r17
     2c8:	3b 2d       	mov	r19, r11
     2ca:	4a 2d       	mov	r20, r10
     2cc:	59 2d       	mov	r21, r9
     2ce:	68 2d       	mov	r22, r8
     2d0:	73 2d       	mov	r23, r3
     2d2:	82 2d       	mov	r24, r2
     2d4:	9a 81       	ldd	r25, Y+2	; 0x02
     2d6:	04 2d       	mov	r16, r4
     2d8:	0e 94 d3 06 	call	0xda6	; 0xda6 <__lshrdi3>
     2dc:	c9 01       	movw	r24, r18
     2de:	da 01       	movw	r26, r20
     2e0:	4c 01       	movw	r8, r24
     2e2:	5d 01       	movw	r10, r26
     2e4:	80 e2       	ldi	r24, 0x20	; 32
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	84 19       	sub	r24, r4
     2ea:	95 09       	sbc	r25, r5
     2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <__floatundisf+0x11e>
     2ee:	cc 0c       	add	r12, r12
     2f0:	dd 1c       	adc	r13, r13
     2f2:	ee 1c       	adc	r14, r14
     2f4:	ff 1c       	adc	r15, r15
     2f6:	8a 95       	dec	r24
     2f8:	d2 f7       	brpl	.-12     	; 0x2ee <__floatundisf+0x116>
     2fa:	c1 14       	cp	r12, r1
     2fc:	d1 04       	cpc	r13, r1
     2fe:	e1 04       	cpc	r14, r1
     300:	f1 04       	cpc	r15, r1
     302:	41 f0       	breq	.+16     	; 0x314 <__floatundisf+0x13c>
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	a0 e0       	ldi	r26, 0x00	; 0
     30a:	b0 e0       	ldi	r27, 0x00	; 0
     30c:	88 2a       	or	r8, r24
     30e:	99 2a       	or	r9, r25
     310:	aa 2a       	or	r10, r26
     312:	bb 2a       	or	r11, r27
     314:	90 e2       	ldi	r25, 0x20	; 32
     316:	49 16       	cp	r4, r25
     318:	51 04       	cpc	r5, r1
     31a:	61 04       	cpc	r6, r1
     31c:	71 04       	cpc	r7, r1
     31e:	59 f4       	brne	.+22     	; 0x336 <__floatundisf+0x15e>
     320:	0f 2e       	mov	r0, r31
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	ef 2e       	mov	r14, r31
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	ff 2e       	mov	r15, r31
     32a:	f0 e8       	ldi	r31, 0x80	; 128
     32c:	0f 2f       	mov	r16, r31
     32e:	ff e4       	ldi	r31, 0x4F	; 79
     330:	1f 2f       	mov	r17, r31
     332:	f0 2d       	mov	r31, r0
     334:	21 c0       	rjmp	.+66     	; 0x378 <__floatundisf+0x1a0>
     336:	af e1       	ldi	r26, 0x1F	; 31
     338:	4a 16       	cp	r4, r26
     33a:	51 04       	cpc	r5, r1
     33c:	61 04       	cpc	r6, r1
     33e:	71 04       	cpc	r7, r1
     340:	59 f4       	brne	.+22     	; 0x358 <__floatundisf+0x180>
     342:	0f 2e       	mov	r0, r31
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	ef 2e       	mov	r14, r31
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	ff 2e       	mov	r15, r31
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	0f 2f       	mov	r16, r31
     350:	ff e4       	ldi	r31, 0x4F	; 79
     352:	1f 2f       	mov	r17, r31
     354:	f0 2d       	mov	r31, r0
     356:	10 c0       	rjmp	.+32     	; 0x378 <__floatundisf+0x1a0>
     358:	61 e0       	ldi	r22, 0x01	; 1
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	09 80       	ldd	r0, Y+1	; 0x01
     362:	04 c0       	rjmp	.+8      	; 0x36c <__floatundisf+0x194>
     364:	66 0f       	add	r22, r22
     366:	77 1f       	adc	r23, r23
     368:	88 1f       	adc	r24, r24
     36a:	99 1f       	adc	r25, r25
     36c:	0a 94       	dec	r0
     36e:	d2 f7       	brpl	.-12     	; 0x364 <__floatundisf+0x18c>
     370:	0e 94 a8 05 	call	0xb50	; 0xb50 <__floatsisf>
     374:	7b 01       	movw	r14, r22
     376:	8c 01       	movw	r16, r24
     378:	c5 01       	movw	r24, r10
     37a:	b4 01       	movw	r22, r8
     37c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__floatunsisf>
     380:	a8 01       	movw	r20, r16
     382:	97 01       	movw	r18, r14
     384:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
     388:	22 96       	adiw	r28, 0x02	; 2
     38a:	e2 e1       	ldi	r30, 0x12	; 18
     38c:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__>

00000390 <_fpadd_parts>:
     390:	a0 e0       	ldi	r26, 0x00	; 0
     392:	b0 e0       	ldi	r27, 0x00	; 0
     394:	ee ec       	ldi	r30, 0xCE	; 206
     396:	f1 e0       	ldi	r31, 0x01	; 1
     398:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__>
     39c:	dc 01       	movw	r26, r24
     39e:	2b 01       	movw	r4, r22
     3a0:	fa 01       	movw	r30, r20
     3a2:	9c 91       	ld	r25, X
     3a4:	92 30       	cpi	r25, 0x02	; 2
     3a6:	08 f4       	brcc	.+2      	; 0x3aa <_fpadd_parts+0x1a>
     3a8:	39 c1       	rjmp	.+626    	; 0x61c <__stack+0x1bd>
     3aa:	eb 01       	movw	r28, r22
     3ac:	88 81       	ld	r24, Y
     3ae:	82 30       	cpi	r24, 0x02	; 2
     3b0:	08 f4       	brcc	.+2      	; 0x3b4 <_fpadd_parts+0x24>
     3b2:	33 c1       	rjmp	.+614    	; 0x61a <__stack+0x1bb>
     3b4:	94 30       	cpi	r25, 0x04	; 4
     3b6:	69 f4       	brne	.+26     	; 0x3d2 <_fpadd_parts+0x42>
     3b8:	84 30       	cpi	r24, 0x04	; 4
     3ba:	09 f0       	breq	.+2      	; 0x3be <_fpadd_parts+0x2e>
     3bc:	2f c1       	rjmp	.+606    	; 0x61c <__stack+0x1bd>
     3be:	11 96       	adiw	r26, 0x01	; 1
     3c0:	9c 91       	ld	r25, X
     3c2:	11 97       	sbiw	r26, 0x01	; 1
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	98 17       	cp	r25, r24
     3c8:	09 f4       	brne	.+2      	; 0x3cc <_fpadd_parts+0x3c>
     3ca:	28 c1       	rjmp	.+592    	; 0x61c <__stack+0x1bd>
     3cc:	aa e7       	ldi	r26, 0x7A	; 122
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	25 c1       	rjmp	.+586    	; 0x61c <__stack+0x1bd>
     3d2:	84 30       	cpi	r24, 0x04	; 4
     3d4:	09 f4       	brne	.+2      	; 0x3d8 <_fpadd_parts+0x48>
     3d6:	21 c1       	rjmp	.+578    	; 0x61a <__stack+0x1bb>
     3d8:	82 30       	cpi	r24, 0x02	; 2
     3da:	a9 f4       	brne	.+42     	; 0x406 <_fpadd_parts+0x76>
     3dc:	92 30       	cpi	r25, 0x02	; 2
     3de:	09 f0       	breq	.+2      	; 0x3e2 <_fpadd_parts+0x52>
     3e0:	1d c1       	rjmp	.+570    	; 0x61c <__stack+0x1bd>
     3e2:	9a 01       	movw	r18, r20
     3e4:	ad 01       	movw	r20, r26
     3e6:	88 e0       	ldi	r24, 0x08	; 8
     3e8:	ea 01       	movw	r28, r20
     3ea:	09 90       	ld	r0, Y+
     3ec:	ae 01       	movw	r20, r28
     3ee:	e9 01       	movw	r28, r18
     3f0:	09 92       	st	Y+, r0
     3f2:	9e 01       	movw	r18, r28
     3f4:	81 50       	subi	r24, 0x01	; 1
     3f6:	c1 f7       	brne	.-16     	; 0x3e8 <_fpadd_parts+0x58>
     3f8:	e2 01       	movw	r28, r4
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	11 96       	adiw	r26, 0x01	; 1
     3fe:	9c 91       	ld	r25, X
     400:	89 23       	and	r24, r25
     402:	81 83       	std	Z+1, r24	; 0x01
     404:	08 c1       	rjmp	.+528    	; 0x616 <__stack+0x1b7>
     406:	92 30       	cpi	r25, 0x02	; 2
     408:	09 f4       	brne	.+2      	; 0x40c <_fpadd_parts+0x7c>
     40a:	07 c1       	rjmp	.+526    	; 0x61a <__stack+0x1bb>
     40c:	12 96       	adiw	r26, 0x02	; 2
     40e:	2d 90       	ld	r2, X+
     410:	3c 90       	ld	r3, X
     412:	13 97       	sbiw	r26, 0x03	; 3
     414:	eb 01       	movw	r28, r22
     416:	8a 81       	ldd	r24, Y+2	; 0x02
     418:	9b 81       	ldd	r25, Y+3	; 0x03
     41a:	14 96       	adiw	r26, 0x04	; 4
     41c:	ad 90       	ld	r10, X+
     41e:	bd 90       	ld	r11, X+
     420:	cd 90       	ld	r12, X+
     422:	dc 90       	ld	r13, X
     424:	17 97       	sbiw	r26, 0x07	; 7
     426:	ec 80       	ldd	r14, Y+4	; 0x04
     428:	fd 80       	ldd	r15, Y+5	; 0x05
     42a:	0e 81       	ldd	r16, Y+6	; 0x06
     42c:	1f 81       	ldd	r17, Y+7	; 0x07
     42e:	91 01       	movw	r18, r2
     430:	28 1b       	sub	r18, r24
     432:	39 0b       	sbc	r19, r25
     434:	b9 01       	movw	r22, r18
     436:	37 ff       	sbrs	r19, 7
     438:	04 c0       	rjmp	.+8      	; 0x442 <_fpadd_parts+0xb2>
     43a:	66 27       	eor	r22, r22
     43c:	77 27       	eor	r23, r23
     43e:	62 1b       	sub	r22, r18
     440:	73 0b       	sbc	r23, r19
     442:	60 32       	cpi	r22, 0x20	; 32
     444:	71 05       	cpc	r23, r1
     446:	0c f0       	brlt	.+2      	; 0x44a <_fpadd_parts+0xba>
     448:	61 c0       	rjmp	.+194    	; 0x50c <__stack+0xad>
     44a:	12 16       	cp	r1, r18
     44c:	13 06       	cpc	r1, r19
     44e:	6c f5       	brge	.+90     	; 0x4aa <__stack+0x4b>
     450:	37 01       	movw	r6, r14
     452:	48 01       	movw	r8, r16
     454:	06 2e       	mov	r0, r22
     456:	04 c0       	rjmp	.+8      	; 0x460 <__stack+0x1>
     458:	96 94       	lsr	r9
     45a:	87 94       	ror	r8
     45c:	77 94       	ror	r7
     45e:	67 94       	ror	r6
     460:	0a 94       	dec	r0
     462:	d2 f7       	brpl	.-12     	; 0x458 <_fpadd_parts+0xc8>
     464:	21 e0       	ldi	r18, 0x01	; 1
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	04 c0       	rjmp	.+8      	; 0x476 <__stack+0x17>
     46e:	22 0f       	add	r18, r18
     470:	33 1f       	adc	r19, r19
     472:	44 1f       	adc	r20, r20
     474:	55 1f       	adc	r21, r21
     476:	6a 95       	dec	r22
     478:	d2 f7       	brpl	.-12     	; 0x46e <__stack+0xf>
     47a:	21 50       	subi	r18, 0x01	; 1
     47c:	30 40       	sbci	r19, 0x00	; 0
     47e:	40 40       	sbci	r20, 0x00	; 0
     480:	50 40       	sbci	r21, 0x00	; 0
     482:	2e 21       	and	r18, r14
     484:	3f 21       	and	r19, r15
     486:	40 23       	and	r20, r16
     488:	51 23       	and	r21, r17
     48a:	21 15       	cp	r18, r1
     48c:	31 05       	cpc	r19, r1
     48e:	41 05       	cpc	r20, r1
     490:	51 05       	cpc	r21, r1
     492:	21 f0       	breq	.+8      	; 0x49c <__stack+0x3d>
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	79 01       	movw	r14, r18
     49e:	8a 01       	movw	r16, r20
     4a0:	e6 28       	or	r14, r6
     4a2:	f7 28       	or	r15, r7
     4a4:	08 29       	or	r16, r8
     4a6:	19 29       	or	r17, r9
     4a8:	3c c0       	rjmp	.+120    	; 0x522 <__stack+0xc3>
     4aa:	23 2b       	or	r18, r19
     4ac:	d1 f1       	breq	.+116    	; 0x522 <__stack+0xc3>
     4ae:	26 0e       	add	r2, r22
     4b0:	37 1e       	adc	r3, r23
     4b2:	35 01       	movw	r6, r10
     4b4:	46 01       	movw	r8, r12
     4b6:	06 2e       	mov	r0, r22
     4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <__stack+0x63>
     4ba:	96 94       	lsr	r9
     4bc:	87 94       	ror	r8
     4be:	77 94       	ror	r7
     4c0:	67 94       	ror	r6
     4c2:	0a 94       	dec	r0
     4c4:	d2 f7       	brpl	.-12     	; 0x4ba <__stack+0x5b>
     4c6:	21 e0       	ldi	r18, 0x01	; 1
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e0       	ldi	r20, 0x00	; 0
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <__stack+0x79>
     4d0:	22 0f       	add	r18, r18
     4d2:	33 1f       	adc	r19, r19
     4d4:	44 1f       	adc	r20, r20
     4d6:	55 1f       	adc	r21, r21
     4d8:	6a 95       	dec	r22
     4da:	d2 f7       	brpl	.-12     	; 0x4d0 <__stack+0x71>
     4dc:	21 50       	subi	r18, 0x01	; 1
     4de:	30 40       	sbci	r19, 0x00	; 0
     4e0:	40 40       	sbci	r20, 0x00	; 0
     4e2:	50 40       	sbci	r21, 0x00	; 0
     4e4:	2a 21       	and	r18, r10
     4e6:	3b 21       	and	r19, r11
     4e8:	4c 21       	and	r20, r12
     4ea:	5d 21       	and	r21, r13
     4ec:	21 15       	cp	r18, r1
     4ee:	31 05       	cpc	r19, r1
     4f0:	41 05       	cpc	r20, r1
     4f2:	51 05       	cpc	r21, r1
     4f4:	21 f0       	breq	.+8      	; 0x4fe <__stack+0x9f>
     4f6:	21 e0       	ldi	r18, 0x01	; 1
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	59 01       	movw	r10, r18
     500:	6a 01       	movw	r12, r20
     502:	a6 28       	or	r10, r6
     504:	b7 28       	or	r11, r7
     506:	c8 28       	or	r12, r8
     508:	d9 28       	or	r13, r9
     50a:	0b c0       	rjmp	.+22     	; 0x522 <__stack+0xc3>
     50c:	82 15       	cp	r24, r2
     50e:	93 05       	cpc	r25, r3
     510:	2c f0       	brlt	.+10     	; 0x51c <__stack+0xbd>
     512:	1c 01       	movw	r2, r24
     514:	aa 24       	eor	r10, r10
     516:	bb 24       	eor	r11, r11
     518:	65 01       	movw	r12, r10
     51a:	03 c0       	rjmp	.+6      	; 0x522 <__stack+0xc3>
     51c:	ee 24       	eor	r14, r14
     51e:	ff 24       	eor	r15, r15
     520:	87 01       	movw	r16, r14
     522:	11 96       	adiw	r26, 0x01	; 1
     524:	9c 91       	ld	r25, X
     526:	d2 01       	movw	r26, r4
     528:	11 96       	adiw	r26, 0x01	; 1
     52a:	8c 91       	ld	r24, X
     52c:	98 17       	cp	r25, r24
     52e:	09 f4       	brne	.+2      	; 0x532 <__stack+0xd3>
     530:	45 c0       	rjmp	.+138    	; 0x5bc <__stack+0x15d>
     532:	99 23       	and	r25, r25
     534:	39 f0       	breq	.+14     	; 0x544 <__stack+0xe5>
     536:	a8 01       	movw	r20, r16
     538:	97 01       	movw	r18, r14
     53a:	2a 19       	sub	r18, r10
     53c:	3b 09       	sbc	r19, r11
     53e:	4c 09       	sbc	r20, r12
     540:	5d 09       	sbc	r21, r13
     542:	06 c0       	rjmp	.+12     	; 0x550 <__stack+0xf1>
     544:	a6 01       	movw	r20, r12
     546:	95 01       	movw	r18, r10
     548:	2e 19       	sub	r18, r14
     54a:	3f 09       	sbc	r19, r15
     54c:	40 0b       	sbc	r20, r16
     54e:	51 0b       	sbc	r21, r17
     550:	57 fd       	sbrc	r21, 7
     552:	08 c0       	rjmp	.+16     	; 0x564 <__stack+0x105>
     554:	11 82       	std	Z+1, r1	; 0x01
     556:	33 82       	std	Z+3, r3	; 0x03
     558:	22 82       	std	Z+2, r2	; 0x02
     55a:	24 83       	std	Z+4, r18	; 0x04
     55c:	35 83       	std	Z+5, r19	; 0x05
     55e:	46 83       	std	Z+6, r20	; 0x06
     560:	57 83       	std	Z+7, r21	; 0x07
     562:	1d c0       	rjmp	.+58     	; 0x59e <__stack+0x13f>
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	81 83       	std	Z+1, r24	; 0x01
     568:	33 82       	std	Z+3, r3	; 0x03
     56a:	22 82       	std	Z+2, r2	; 0x02
     56c:	88 27       	eor	r24, r24
     56e:	99 27       	eor	r25, r25
     570:	dc 01       	movw	r26, r24
     572:	82 1b       	sub	r24, r18
     574:	93 0b       	sbc	r25, r19
     576:	a4 0b       	sbc	r26, r20
     578:	b5 0b       	sbc	r27, r21
     57a:	84 83       	std	Z+4, r24	; 0x04
     57c:	95 83       	std	Z+5, r25	; 0x05
     57e:	a6 83       	std	Z+6, r26	; 0x06
     580:	b7 83       	std	Z+7, r27	; 0x07
     582:	0d c0       	rjmp	.+26     	; 0x59e <__stack+0x13f>
     584:	22 0f       	add	r18, r18
     586:	33 1f       	adc	r19, r19
     588:	44 1f       	adc	r20, r20
     58a:	55 1f       	adc	r21, r21
     58c:	24 83       	std	Z+4, r18	; 0x04
     58e:	35 83       	std	Z+5, r19	; 0x05
     590:	46 83       	std	Z+6, r20	; 0x06
     592:	57 83       	std	Z+7, r21	; 0x07
     594:	82 81       	ldd	r24, Z+2	; 0x02
     596:	93 81       	ldd	r25, Z+3	; 0x03
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	93 83       	std	Z+3, r25	; 0x03
     59c:	82 83       	std	Z+2, r24	; 0x02
     59e:	24 81       	ldd	r18, Z+4	; 0x04
     5a0:	35 81       	ldd	r19, Z+5	; 0x05
     5a2:	46 81       	ldd	r20, Z+6	; 0x06
     5a4:	57 81       	ldd	r21, Z+7	; 0x07
     5a6:	da 01       	movw	r26, r20
     5a8:	c9 01       	movw	r24, r18
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	a1 09       	sbc	r26, r1
     5ae:	b1 09       	sbc	r27, r1
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	9f 4f       	sbci	r25, 0xFF	; 255
     5b4:	af 4f       	sbci	r26, 0xFF	; 255
     5b6:	bf 43       	sbci	r27, 0x3F	; 63
     5b8:	28 f3       	brcs	.-54     	; 0x584 <__stack+0x125>
     5ba:	0b c0       	rjmp	.+22     	; 0x5d2 <__stack+0x173>
     5bc:	91 83       	std	Z+1, r25	; 0x01
     5be:	33 82       	std	Z+3, r3	; 0x03
     5c0:	22 82       	std	Z+2, r2	; 0x02
     5c2:	ea 0c       	add	r14, r10
     5c4:	fb 1c       	adc	r15, r11
     5c6:	0c 1d       	adc	r16, r12
     5c8:	1d 1d       	adc	r17, r13
     5ca:	e4 82       	std	Z+4, r14	; 0x04
     5cc:	f5 82       	std	Z+5, r15	; 0x05
     5ce:	06 83       	std	Z+6, r16	; 0x06
     5d0:	17 83       	std	Z+7, r17	; 0x07
     5d2:	83 e0       	ldi	r24, 0x03	; 3
     5d4:	80 83       	st	Z, r24
     5d6:	24 81       	ldd	r18, Z+4	; 0x04
     5d8:	35 81       	ldd	r19, Z+5	; 0x05
     5da:	46 81       	ldd	r20, Z+6	; 0x06
     5dc:	57 81       	ldd	r21, Z+7	; 0x07
     5de:	57 ff       	sbrs	r21, 7
     5e0:	1a c0       	rjmp	.+52     	; 0x616 <__stack+0x1b7>
     5e2:	c9 01       	movw	r24, r18
     5e4:	aa 27       	eor	r26, r26
     5e6:	97 fd       	sbrc	r25, 7
     5e8:	a0 95       	com	r26
     5ea:	ba 2f       	mov	r27, r26
     5ec:	81 70       	andi	r24, 0x01	; 1
     5ee:	90 70       	andi	r25, 0x00	; 0
     5f0:	a0 70       	andi	r26, 0x00	; 0
     5f2:	b0 70       	andi	r27, 0x00	; 0
     5f4:	56 95       	lsr	r21
     5f6:	47 95       	ror	r20
     5f8:	37 95       	ror	r19
     5fa:	27 95       	ror	r18
     5fc:	82 2b       	or	r24, r18
     5fe:	93 2b       	or	r25, r19
     600:	a4 2b       	or	r26, r20
     602:	b5 2b       	or	r27, r21
     604:	84 83       	std	Z+4, r24	; 0x04
     606:	95 83       	std	Z+5, r25	; 0x05
     608:	a6 83       	std	Z+6, r26	; 0x06
     60a:	b7 83       	std	Z+7, r27	; 0x07
     60c:	82 81       	ldd	r24, Z+2	; 0x02
     60e:	93 81       	ldd	r25, Z+3	; 0x03
     610:	01 96       	adiw	r24, 0x01	; 1
     612:	93 83       	std	Z+3, r25	; 0x03
     614:	82 83       	std	Z+2, r24	; 0x02
     616:	df 01       	movw	r26, r30
     618:	01 c0       	rjmp	.+2      	; 0x61c <__stack+0x1bd>
     61a:	d2 01       	movw	r26, r4
     61c:	cd 01       	movw	r24, r26
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	e2 e1       	ldi	r30, 0x12	; 18
     624:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__>

00000628 <__subsf3>:
     628:	a0 e2       	ldi	r26, 0x20	; 32
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	ea e1       	ldi	r30, 0x1A	; 26
     62e:	f3 e0       	ldi	r31, 0x03	; 3
     630:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__+0x18>
     634:	69 83       	std	Y+1, r22	; 0x01
     636:	7a 83       	std	Y+2, r23	; 0x02
     638:	8b 83       	std	Y+3, r24	; 0x03
     63a:	9c 83       	std	Y+4, r25	; 0x04
     63c:	2d 83       	std	Y+5, r18	; 0x05
     63e:	3e 83       	std	Y+6, r19	; 0x06
     640:	4f 83       	std	Y+7, r20	; 0x07
     642:	58 87       	std	Y+8, r21	; 0x08
     644:	e9 e0       	ldi	r30, 0x09	; 9
     646:	ee 2e       	mov	r14, r30
     648:	f1 2c       	mov	r15, r1
     64a:	ec 0e       	add	r14, r28
     64c:	fd 1e       	adc	r15, r29
     64e:	ce 01       	movw	r24, r28
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	b7 01       	movw	r22, r14
     654:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     658:	8e 01       	movw	r16, r28
     65a:	0f 5e       	subi	r16, 0xEF	; 239
     65c:	1f 4f       	sbci	r17, 0xFF	; 255
     65e:	ce 01       	movw	r24, r28
     660:	05 96       	adiw	r24, 0x05	; 5
     662:	b8 01       	movw	r22, r16
     664:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     668:	8a 89       	ldd	r24, Y+18	; 0x12
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	89 27       	eor	r24, r25
     66e:	8a 8b       	std	Y+18, r24	; 0x12
     670:	c7 01       	movw	r24, r14
     672:	b8 01       	movw	r22, r16
     674:	ae 01       	movw	r20, r28
     676:	47 5e       	subi	r20, 0xE7	; 231
     678:	5f 4f       	sbci	r21, 0xFF	; 255
     67a:	0e 94 c8 01 	call	0x390	; 0x390 <_fpadd_parts>
     67e:	0e 94 a1 07 	call	0xf42	; 0xf42 <__pack_f>
     682:	a0 96       	adiw	r28, 0x20	; 32
     684:	e6 e0       	ldi	r30, 0x06	; 6
     686:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__+0x18>

0000068a <__addsf3>:
     68a:	a0 e2       	ldi	r26, 0x20	; 32
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	eb e4       	ldi	r30, 0x4B	; 75
     690:	f3 e0       	ldi	r31, 0x03	; 3
     692:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__+0x18>
     696:	69 83       	std	Y+1, r22	; 0x01
     698:	7a 83       	std	Y+2, r23	; 0x02
     69a:	8b 83       	std	Y+3, r24	; 0x03
     69c:	9c 83       	std	Y+4, r25	; 0x04
     69e:	2d 83       	std	Y+5, r18	; 0x05
     6a0:	3e 83       	std	Y+6, r19	; 0x06
     6a2:	4f 83       	std	Y+7, r20	; 0x07
     6a4:	58 87       	std	Y+8, r21	; 0x08
     6a6:	f9 e0       	ldi	r31, 0x09	; 9
     6a8:	ef 2e       	mov	r14, r31
     6aa:	f1 2c       	mov	r15, r1
     6ac:	ec 0e       	add	r14, r28
     6ae:	fd 1e       	adc	r15, r29
     6b0:	ce 01       	movw	r24, r28
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	b7 01       	movw	r22, r14
     6b6:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     6ba:	8e 01       	movw	r16, r28
     6bc:	0f 5e       	subi	r16, 0xEF	; 239
     6be:	1f 4f       	sbci	r17, 0xFF	; 255
     6c0:	ce 01       	movw	r24, r28
     6c2:	05 96       	adiw	r24, 0x05	; 5
     6c4:	b8 01       	movw	r22, r16
     6c6:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     6ca:	c7 01       	movw	r24, r14
     6cc:	b8 01       	movw	r22, r16
     6ce:	ae 01       	movw	r20, r28
     6d0:	47 5e       	subi	r20, 0xE7	; 231
     6d2:	5f 4f       	sbci	r21, 0xFF	; 255
     6d4:	0e 94 c8 01 	call	0x390	; 0x390 <_fpadd_parts>
     6d8:	0e 94 a1 07 	call	0xf42	; 0xf42 <__pack_f>
     6dc:	a0 96       	adiw	r28, 0x20	; 32
     6de:	e6 e0       	ldi	r30, 0x06	; 6
     6e0:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__+0x18>

000006e4 <__mulsf3>:
     6e4:	a0 e2       	ldi	r26, 0x20	; 32
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
     6e8:	e8 e7       	ldi	r30, 0x78	; 120
     6ea:	f3 e0       	ldi	r31, 0x03	; 3
     6ec:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__>
     6f0:	69 83       	std	Y+1, r22	; 0x01
     6f2:	7a 83       	std	Y+2, r23	; 0x02
     6f4:	8b 83       	std	Y+3, r24	; 0x03
     6f6:	9c 83       	std	Y+4, r25	; 0x04
     6f8:	2d 83       	std	Y+5, r18	; 0x05
     6fa:	3e 83       	std	Y+6, r19	; 0x06
     6fc:	4f 83       	std	Y+7, r20	; 0x07
     6fe:	58 87       	std	Y+8, r21	; 0x08
     700:	ce 01       	movw	r24, r28
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	be 01       	movw	r22, r28
     706:	67 5f       	subi	r22, 0xF7	; 247
     708:	7f 4f       	sbci	r23, 0xFF	; 255
     70a:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     70e:	ce 01       	movw	r24, r28
     710:	05 96       	adiw	r24, 0x05	; 5
     712:	be 01       	movw	r22, r28
     714:	6f 5e       	subi	r22, 0xEF	; 239
     716:	7f 4f       	sbci	r23, 0xFF	; 255
     718:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     71c:	99 85       	ldd	r25, Y+9	; 0x09
     71e:	92 30       	cpi	r25, 0x02	; 2
     720:	88 f0       	brcs	.+34     	; 0x744 <__mulsf3+0x60>
     722:	89 89       	ldd	r24, Y+17	; 0x11
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	c8 f0       	brcs	.+50     	; 0x75a <__mulsf3+0x76>
     728:	94 30       	cpi	r25, 0x04	; 4
     72a:	19 f4       	brne	.+6      	; 0x732 <__mulsf3+0x4e>
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	51 f4       	brne	.+20     	; 0x744 <__mulsf3+0x60>
     730:	04 c0       	rjmp	.+8      	; 0x73a <__mulsf3+0x56>
     732:	84 30       	cpi	r24, 0x04	; 4
     734:	29 f4       	brne	.+10     	; 0x740 <__mulsf3+0x5c>
     736:	92 30       	cpi	r25, 0x02	; 2
     738:	81 f4       	brne	.+32     	; 0x75a <__mulsf3+0x76>
     73a:	8a e7       	ldi	r24, 0x7A	; 122
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	c6 c0       	rjmp	.+396    	; 0x8cc <__mulsf3+0x1e8>
     740:	92 30       	cpi	r25, 0x02	; 2
     742:	49 f4       	brne	.+18     	; 0x756 <__mulsf3+0x72>
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	9a 85       	ldd	r25, Y+10	; 0x0a
     748:	8a 89       	ldd	r24, Y+18	; 0x12
     74a:	98 13       	cpse	r25, r24
     74c:	21 e0       	ldi	r18, 0x01	; 1
     74e:	2a 87       	std	Y+10, r18	; 0x0a
     750:	ce 01       	movw	r24, r28
     752:	09 96       	adiw	r24, 0x09	; 9
     754:	bb c0       	rjmp	.+374    	; 0x8cc <__mulsf3+0x1e8>
     756:	82 30       	cpi	r24, 0x02	; 2
     758:	49 f4       	brne	.+18     	; 0x76c <__mulsf3+0x88>
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	9a 85       	ldd	r25, Y+10	; 0x0a
     75e:	8a 89       	ldd	r24, Y+18	; 0x12
     760:	98 13       	cpse	r25, r24
     762:	21 e0       	ldi	r18, 0x01	; 1
     764:	2a 8b       	std	Y+18, r18	; 0x12
     766:	ce 01       	movw	r24, r28
     768:	41 96       	adiw	r24, 0x11	; 17
     76a:	b0 c0       	rjmp	.+352    	; 0x8cc <__mulsf3+0x1e8>
     76c:	2d 84       	ldd	r2, Y+13	; 0x0d
     76e:	3e 84       	ldd	r3, Y+14	; 0x0e
     770:	4f 84       	ldd	r4, Y+15	; 0x0f
     772:	58 88       	ldd	r5, Y+16	; 0x10
     774:	6d 88       	ldd	r6, Y+21	; 0x15
     776:	7e 88       	ldd	r7, Y+22	; 0x16
     778:	8f 88       	ldd	r8, Y+23	; 0x17
     77a:	98 8c       	ldd	r9, Y+24	; 0x18
     77c:	ee 24       	eor	r14, r14
     77e:	ff 24       	eor	r15, r15
     780:	87 01       	movw	r16, r14
     782:	aa 24       	eor	r10, r10
     784:	bb 24       	eor	r11, r11
     786:	65 01       	movw	r12, r10
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	e0 e0       	ldi	r30, 0x00	; 0
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	c1 01       	movw	r24, r2
     796:	81 70       	andi	r24, 0x01	; 1
     798:	90 70       	andi	r25, 0x00	; 0
     79a:	89 2b       	or	r24, r25
     79c:	e9 f0       	breq	.+58     	; 0x7d8 <__mulsf3+0xf4>
     79e:	e6 0c       	add	r14, r6
     7a0:	f7 1c       	adc	r15, r7
     7a2:	08 1d       	adc	r16, r8
     7a4:	19 1d       	adc	r17, r9
     7a6:	9a 01       	movw	r18, r20
     7a8:	ab 01       	movw	r20, r22
     7aa:	2a 0d       	add	r18, r10
     7ac:	3b 1d       	adc	r19, r11
     7ae:	4c 1d       	adc	r20, r12
     7b0:	5d 1d       	adc	r21, r13
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	a0 e0       	ldi	r26, 0x00	; 0
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	e6 14       	cp	r14, r6
     7bc:	f7 04       	cpc	r15, r7
     7be:	08 05       	cpc	r16, r8
     7c0:	19 05       	cpc	r17, r9
     7c2:	20 f4       	brcc	.+8      	; 0x7cc <__mulsf3+0xe8>
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	a0 e0       	ldi	r26, 0x00	; 0
     7ca:	b0 e0       	ldi	r27, 0x00	; 0
     7cc:	ba 01       	movw	r22, r20
     7ce:	a9 01       	movw	r20, r18
     7d0:	48 0f       	add	r20, r24
     7d2:	59 1f       	adc	r21, r25
     7d4:	6a 1f       	adc	r22, r26
     7d6:	7b 1f       	adc	r23, r27
     7d8:	aa 0c       	add	r10, r10
     7da:	bb 1c       	adc	r11, r11
     7dc:	cc 1c       	adc	r12, r12
     7de:	dd 1c       	adc	r13, r13
     7e0:	97 fe       	sbrs	r9, 7
     7e2:	08 c0       	rjmp	.+16     	; 0x7f4 <__mulsf3+0x110>
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	a0 e0       	ldi	r26, 0x00	; 0
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	a8 2a       	or	r10, r24
     7ee:	b9 2a       	or	r11, r25
     7f0:	ca 2a       	or	r12, r26
     7f2:	db 2a       	or	r13, r27
     7f4:	31 96       	adiw	r30, 0x01	; 1
     7f6:	e0 32       	cpi	r30, 0x20	; 32
     7f8:	f1 05       	cpc	r31, r1
     7fa:	49 f0       	breq	.+18     	; 0x80e <__mulsf3+0x12a>
     7fc:	66 0c       	add	r6, r6
     7fe:	77 1c       	adc	r7, r7
     800:	88 1c       	adc	r8, r8
     802:	99 1c       	adc	r9, r9
     804:	56 94       	lsr	r5
     806:	47 94       	ror	r4
     808:	37 94       	ror	r3
     80a:	27 94       	ror	r2
     80c:	c3 cf       	rjmp	.-122    	; 0x794 <__mulsf3+0xb0>
     80e:	fa 85       	ldd	r31, Y+10	; 0x0a
     810:	ea 89       	ldd	r30, Y+18	; 0x12
     812:	2b 89       	ldd	r18, Y+19	; 0x13
     814:	3c 89       	ldd	r19, Y+20	; 0x14
     816:	8b 85       	ldd	r24, Y+11	; 0x0b
     818:	9c 85       	ldd	r25, Y+12	; 0x0c
     81a:	28 0f       	add	r18, r24
     81c:	39 1f       	adc	r19, r25
     81e:	2e 5f       	subi	r18, 0xFE	; 254
     820:	3f 4f       	sbci	r19, 0xFF	; 255
     822:	17 c0       	rjmp	.+46     	; 0x852 <__mulsf3+0x16e>
     824:	ca 01       	movw	r24, r20
     826:	81 70       	andi	r24, 0x01	; 1
     828:	90 70       	andi	r25, 0x00	; 0
     82a:	89 2b       	or	r24, r25
     82c:	61 f0       	breq	.+24     	; 0x846 <__mulsf3+0x162>
     82e:	16 95       	lsr	r17
     830:	07 95       	ror	r16
     832:	f7 94       	ror	r15
     834:	e7 94       	ror	r14
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	a0 e0       	ldi	r26, 0x00	; 0
     83c:	b0 e8       	ldi	r27, 0x80	; 128
     83e:	e8 2a       	or	r14, r24
     840:	f9 2a       	or	r15, r25
     842:	0a 2b       	or	r16, r26
     844:	1b 2b       	or	r17, r27
     846:	76 95       	lsr	r23
     848:	67 95       	ror	r22
     84a:	57 95       	ror	r21
     84c:	47 95       	ror	r20
     84e:	2f 5f       	subi	r18, 0xFF	; 255
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	77 fd       	sbrc	r23, 7
     854:	e7 cf       	rjmp	.-50     	; 0x824 <__mulsf3+0x140>
     856:	0c c0       	rjmp	.+24     	; 0x870 <__mulsf3+0x18c>
     858:	44 0f       	add	r20, r20
     85a:	55 1f       	adc	r21, r21
     85c:	66 1f       	adc	r22, r22
     85e:	77 1f       	adc	r23, r23
     860:	17 fd       	sbrc	r17, 7
     862:	41 60       	ori	r20, 0x01	; 1
     864:	ee 0c       	add	r14, r14
     866:	ff 1c       	adc	r15, r15
     868:	00 1f       	adc	r16, r16
     86a:	11 1f       	adc	r17, r17
     86c:	21 50       	subi	r18, 0x01	; 1
     86e:	30 40       	sbci	r19, 0x00	; 0
     870:	40 30       	cpi	r20, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	59 07       	cpc	r21, r25
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	69 07       	cpc	r22, r25
     87a:	90 e4       	ldi	r25, 0x40	; 64
     87c:	79 07       	cpc	r23, r25
     87e:	60 f3       	brcs	.-40     	; 0x858 <__mulsf3+0x174>
     880:	2b 8f       	std	Y+27, r18	; 0x1b
     882:	3c 8f       	std	Y+28, r19	; 0x1c
     884:	db 01       	movw	r26, r22
     886:	ca 01       	movw	r24, r20
     888:	8f 77       	andi	r24, 0x7F	; 127
     88a:	90 70       	andi	r25, 0x00	; 0
     88c:	a0 70       	andi	r26, 0x00	; 0
     88e:	b0 70       	andi	r27, 0x00	; 0
     890:	80 34       	cpi	r24, 0x40	; 64
     892:	91 05       	cpc	r25, r1
     894:	a1 05       	cpc	r26, r1
     896:	b1 05       	cpc	r27, r1
     898:	61 f4       	brne	.+24     	; 0x8b2 <__mulsf3+0x1ce>
     89a:	47 fd       	sbrc	r20, 7
     89c:	0a c0       	rjmp	.+20     	; 0x8b2 <__mulsf3+0x1ce>
     89e:	e1 14       	cp	r14, r1
     8a0:	f1 04       	cpc	r15, r1
     8a2:	01 05       	cpc	r16, r1
     8a4:	11 05       	cpc	r17, r1
     8a6:	29 f0       	breq	.+10     	; 0x8b2 <__mulsf3+0x1ce>
     8a8:	40 5c       	subi	r20, 0xC0	; 192
     8aa:	5f 4f       	sbci	r21, 0xFF	; 255
     8ac:	6f 4f       	sbci	r22, 0xFF	; 255
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	40 78       	andi	r20, 0x80	; 128
     8b2:	1a 8e       	std	Y+26, r1	; 0x1a
     8b4:	fe 17       	cp	r31, r30
     8b6:	11 f0       	breq	.+4      	; 0x8bc <__mulsf3+0x1d8>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	8a 8f       	std	Y+26, r24	; 0x1a
     8bc:	4d 8f       	std	Y+29, r20	; 0x1d
     8be:	5e 8f       	std	Y+30, r21	; 0x1e
     8c0:	6f 8f       	std	Y+31, r22	; 0x1f
     8c2:	78 a3       	std	Y+32, r23	; 0x20
     8c4:	83 e0       	ldi	r24, 0x03	; 3
     8c6:	89 8f       	std	Y+25, r24	; 0x19
     8c8:	ce 01       	movw	r24, r28
     8ca:	49 96       	adiw	r24, 0x19	; 25
     8cc:	0e 94 a1 07 	call	0xf42	; 0xf42 <__pack_f>
     8d0:	a0 96       	adiw	r28, 0x20	; 32
     8d2:	e2 e1       	ldi	r30, 0x12	; 18
     8d4:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__>

000008d8 <__divsf3>:
     8d8:	a8 e1       	ldi	r26, 0x18	; 24
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	e2 e7       	ldi	r30, 0x72	; 114
     8de:	f4 e0       	ldi	r31, 0x04	; 4
     8e0:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__prologue_saves__+0x10>
     8e4:	69 83       	std	Y+1, r22	; 0x01
     8e6:	7a 83       	std	Y+2, r23	; 0x02
     8e8:	8b 83       	std	Y+3, r24	; 0x03
     8ea:	9c 83       	std	Y+4, r25	; 0x04
     8ec:	2d 83       	std	Y+5, r18	; 0x05
     8ee:	3e 83       	std	Y+6, r19	; 0x06
     8f0:	4f 83       	std	Y+7, r20	; 0x07
     8f2:	58 87       	std	Y+8, r21	; 0x08
     8f4:	b9 e0       	ldi	r27, 0x09	; 9
     8f6:	eb 2e       	mov	r14, r27
     8f8:	f1 2c       	mov	r15, r1
     8fa:	ec 0e       	add	r14, r28
     8fc:	fd 1e       	adc	r15, r29
     8fe:	ce 01       	movw	r24, r28
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	b7 01       	movw	r22, r14
     904:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     908:	8e 01       	movw	r16, r28
     90a:	0f 5e       	subi	r16, 0xEF	; 239
     90c:	1f 4f       	sbci	r17, 0xFF	; 255
     90e:	ce 01       	movw	r24, r28
     910:	05 96       	adiw	r24, 0x05	; 5
     912:	b8 01       	movw	r22, r16
     914:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     918:	29 85       	ldd	r18, Y+9	; 0x09
     91a:	22 30       	cpi	r18, 0x02	; 2
     91c:	08 f4       	brcc	.+2      	; 0x920 <__divsf3+0x48>
     91e:	7e c0       	rjmp	.+252    	; 0xa1c <__divsf3+0x144>
     920:	39 89       	ldd	r19, Y+17	; 0x11
     922:	32 30       	cpi	r19, 0x02	; 2
     924:	10 f4       	brcc	.+4      	; 0x92a <__divsf3+0x52>
     926:	b8 01       	movw	r22, r16
     928:	7c c0       	rjmp	.+248    	; 0xa22 <__divsf3+0x14a>
     92a:	8a 85       	ldd	r24, Y+10	; 0x0a
     92c:	9a 89       	ldd	r25, Y+18	; 0x12
     92e:	89 27       	eor	r24, r25
     930:	8a 87       	std	Y+10, r24	; 0x0a
     932:	24 30       	cpi	r18, 0x04	; 4
     934:	11 f0       	breq	.+4      	; 0x93a <__divsf3+0x62>
     936:	22 30       	cpi	r18, 0x02	; 2
     938:	31 f4       	brne	.+12     	; 0x946 <__divsf3+0x6e>
     93a:	23 17       	cp	r18, r19
     93c:	09 f0       	breq	.+2      	; 0x940 <__divsf3+0x68>
     93e:	6e c0       	rjmp	.+220    	; 0xa1c <__divsf3+0x144>
     940:	6a e7       	ldi	r22, 0x7A	; 122
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	6e c0       	rjmp	.+220    	; 0xa22 <__divsf3+0x14a>
     946:	34 30       	cpi	r19, 0x04	; 4
     948:	39 f4       	brne	.+14     	; 0x958 <__divsf3+0x80>
     94a:	1d 86       	std	Y+13, r1	; 0x0d
     94c:	1e 86       	std	Y+14, r1	; 0x0e
     94e:	1f 86       	std	Y+15, r1	; 0x0f
     950:	18 8a       	std	Y+16, r1	; 0x10
     952:	1c 86       	std	Y+12, r1	; 0x0c
     954:	1b 86       	std	Y+11, r1	; 0x0b
     956:	04 c0       	rjmp	.+8      	; 0x960 <__divsf3+0x88>
     958:	32 30       	cpi	r19, 0x02	; 2
     95a:	21 f4       	brne	.+8      	; 0x964 <__divsf3+0x8c>
     95c:	84 e0       	ldi	r24, 0x04	; 4
     95e:	89 87       	std	Y+9, r24	; 0x09
     960:	b7 01       	movw	r22, r14
     962:	5f c0       	rjmp	.+190    	; 0xa22 <__divsf3+0x14a>
     964:	2b 85       	ldd	r18, Y+11	; 0x0b
     966:	3c 85       	ldd	r19, Y+12	; 0x0c
     968:	8b 89       	ldd	r24, Y+19	; 0x13
     96a:	9c 89       	ldd	r25, Y+20	; 0x14
     96c:	28 1b       	sub	r18, r24
     96e:	39 0b       	sbc	r19, r25
     970:	3c 87       	std	Y+12, r19	; 0x0c
     972:	2b 87       	std	Y+11, r18	; 0x0b
     974:	ed 84       	ldd	r14, Y+13	; 0x0d
     976:	fe 84       	ldd	r15, Y+14	; 0x0e
     978:	0f 85       	ldd	r16, Y+15	; 0x0f
     97a:	18 89       	ldd	r17, Y+16	; 0x10
     97c:	ad 88       	ldd	r10, Y+21	; 0x15
     97e:	be 88       	ldd	r11, Y+22	; 0x16
     980:	cf 88       	ldd	r12, Y+23	; 0x17
     982:	d8 8c       	ldd	r13, Y+24	; 0x18
     984:	ea 14       	cp	r14, r10
     986:	fb 04       	cpc	r15, r11
     988:	0c 05       	cpc	r16, r12
     98a:	1d 05       	cpc	r17, r13
     98c:	40 f4       	brcc	.+16     	; 0x99e <__divsf3+0xc6>
     98e:	ee 0c       	add	r14, r14
     990:	ff 1c       	adc	r15, r15
     992:	00 1f       	adc	r16, r16
     994:	11 1f       	adc	r17, r17
     996:	21 50       	subi	r18, 0x01	; 1
     998:	30 40       	sbci	r19, 0x00	; 0
     99a:	3c 87       	std	Y+12, r19	; 0x0c
     99c:	2b 87       	std	Y+11, r18	; 0x0b
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e0       	ldi	r26, 0x00	; 0
     9ac:	b0 e4       	ldi	r27, 0x40	; 64
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	ea 14       	cp	r14, r10
     9b4:	fb 04       	cpc	r15, r11
     9b6:	0c 05       	cpc	r16, r12
     9b8:	1d 05       	cpc	r17, r13
     9ba:	40 f0       	brcs	.+16     	; 0x9cc <__divsf3+0xf4>
     9bc:	28 2b       	or	r18, r24
     9be:	39 2b       	or	r19, r25
     9c0:	4a 2b       	or	r20, r26
     9c2:	5b 2b       	or	r21, r27
     9c4:	ea 18       	sub	r14, r10
     9c6:	fb 08       	sbc	r15, r11
     9c8:	0c 09       	sbc	r16, r12
     9ca:	1d 09       	sbc	r17, r13
     9cc:	b6 95       	lsr	r27
     9ce:	a7 95       	ror	r26
     9d0:	97 95       	ror	r25
     9d2:	87 95       	ror	r24
     9d4:	ee 0c       	add	r14, r14
     9d6:	ff 1c       	adc	r15, r15
     9d8:	00 1f       	adc	r16, r16
     9da:	11 1f       	adc	r17, r17
     9dc:	6f 5f       	subi	r22, 0xFF	; 255
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	6f 31       	cpi	r22, 0x1F	; 31
     9e2:	71 05       	cpc	r23, r1
     9e4:	31 f7       	brne	.-52     	; 0x9b2 <__divsf3+0xda>
     9e6:	da 01       	movw	r26, r20
     9e8:	c9 01       	movw	r24, r18
     9ea:	8f 77       	andi	r24, 0x7F	; 127
     9ec:	90 70       	andi	r25, 0x00	; 0
     9ee:	a0 70       	andi	r26, 0x00	; 0
     9f0:	b0 70       	andi	r27, 0x00	; 0
     9f2:	80 34       	cpi	r24, 0x40	; 64
     9f4:	91 05       	cpc	r25, r1
     9f6:	a1 05       	cpc	r26, r1
     9f8:	b1 05       	cpc	r27, r1
     9fa:	61 f4       	brne	.+24     	; 0xa14 <__divsf3+0x13c>
     9fc:	27 fd       	sbrc	r18, 7
     9fe:	0a c0       	rjmp	.+20     	; 0xa14 <__divsf3+0x13c>
     a00:	e1 14       	cp	r14, r1
     a02:	f1 04       	cpc	r15, r1
     a04:	01 05       	cpc	r16, r1
     a06:	11 05       	cpc	r17, r1
     a08:	29 f0       	breq	.+10     	; 0xa14 <__divsf3+0x13c>
     a0a:	20 5c       	subi	r18, 0xC0	; 192
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	4f 4f       	sbci	r20, 0xFF	; 255
     a10:	5f 4f       	sbci	r21, 0xFF	; 255
     a12:	20 78       	andi	r18, 0x80	; 128
     a14:	2d 87       	std	Y+13, r18	; 0x0d
     a16:	3e 87       	std	Y+14, r19	; 0x0e
     a18:	4f 87       	std	Y+15, r20	; 0x0f
     a1a:	58 8b       	std	Y+16, r21	; 0x10
     a1c:	be 01       	movw	r22, r28
     a1e:	67 5f       	subi	r22, 0xF7	; 247
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	cb 01       	movw	r24, r22
     a24:	0e 94 a1 07 	call	0xf42	; 0xf42 <__pack_f>
     a28:	68 96       	adiw	r28, 0x18	; 24
     a2a:	ea e0       	ldi	r30, 0x0A	; 10
     a2c:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__epilogue_restores__+0x10>

00000a30 <__gtsf2>:
     a30:	a8 e1       	ldi	r26, 0x18	; 24
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	ee e1       	ldi	r30, 0x1E	; 30
     a36:	f5 e0       	ldi	r31, 0x05	; 5
     a38:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__+0x18>
     a3c:	69 83       	std	Y+1, r22	; 0x01
     a3e:	7a 83       	std	Y+2, r23	; 0x02
     a40:	8b 83       	std	Y+3, r24	; 0x03
     a42:	9c 83       	std	Y+4, r25	; 0x04
     a44:	2d 83       	std	Y+5, r18	; 0x05
     a46:	3e 83       	std	Y+6, r19	; 0x06
     a48:	4f 83       	std	Y+7, r20	; 0x07
     a4a:	58 87       	std	Y+8, r21	; 0x08
     a4c:	89 e0       	ldi	r24, 0x09	; 9
     a4e:	e8 2e       	mov	r14, r24
     a50:	f1 2c       	mov	r15, r1
     a52:	ec 0e       	add	r14, r28
     a54:	fd 1e       	adc	r15, r29
     a56:	ce 01       	movw	r24, r28
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	b7 01       	movw	r22, r14
     a5c:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     a60:	8e 01       	movw	r16, r28
     a62:	0f 5e       	subi	r16, 0xEF	; 239
     a64:	1f 4f       	sbci	r17, 0xFF	; 255
     a66:	ce 01       	movw	r24, r28
     a68:	05 96       	adiw	r24, 0x05	; 5
     a6a:	b8 01       	movw	r22, r16
     a6c:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     a70:	89 85       	ldd	r24, Y+9	; 0x09
     a72:	82 30       	cpi	r24, 0x02	; 2
     a74:	40 f0       	brcs	.+16     	; 0xa86 <__gtsf2+0x56>
     a76:	89 89       	ldd	r24, Y+17	; 0x11
     a78:	82 30       	cpi	r24, 0x02	; 2
     a7a:	28 f0       	brcs	.+10     	; 0xa86 <__gtsf2+0x56>
     a7c:	c7 01       	movw	r24, r14
     a7e:	b8 01       	movw	r22, r16
     a80:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fpcmp_parts_f>
     a84:	01 c0       	rjmp	.+2      	; 0xa88 <__gtsf2+0x58>
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	68 96       	adiw	r28, 0x18	; 24
     a8a:	e6 e0       	ldi	r30, 0x06	; 6
     a8c:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__+0x18>

00000a90 <__gesf2>:
     a90:	a8 e1       	ldi	r26, 0x18	; 24
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	ee e4       	ldi	r30, 0x4E	; 78
     a96:	f5 e0       	ldi	r31, 0x05	; 5
     a98:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__+0x18>
     a9c:	69 83       	std	Y+1, r22	; 0x01
     a9e:	7a 83       	std	Y+2, r23	; 0x02
     aa0:	8b 83       	std	Y+3, r24	; 0x03
     aa2:	9c 83       	std	Y+4, r25	; 0x04
     aa4:	2d 83       	std	Y+5, r18	; 0x05
     aa6:	3e 83       	std	Y+6, r19	; 0x06
     aa8:	4f 83       	std	Y+7, r20	; 0x07
     aaa:	58 87       	std	Y+8, r21	; 0x08
     aac:	89 e0       	ldi	r24, 0x09	; 9
     aae:	e8 2e       	mov	r14, r24
     ab0:	f1 2c       	mov	r15, r1
     ab2:	ec 0e       	add	r14, r28
     ab4:	fd 1e       	adc	r15, r29
     ab6:	ce 01       	movw	r24, r28
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	b7 01       	movw	r22, r14
     abc:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     ac0:	8e 01       	movw	r16, r28
     ac2:	0f 5e       	subi	r16, 0xEF	; 239
     ac4:	1f 4f       	sbci	r17, 0xFF	; 255
     ac6:	ce 01       	movw	r24, r28
     ac8:	05 96       	adiw	r24, 0x05	; 5
     aca:	b8 01       	movw	r22, r16
     acc:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     ad0:	89 85       	ldd	r24, Y+9	; 0x09
     ad2:	82 30       	cpi	r24, 0x02	; 2
     ad4:	40 f0       	brcs	.+16     	; 0xae6 <__gesf2+0x56>
     ad6:	89 89       	ldd	r24, Y+17	; 0x11
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	28 f0       	brcs	.+10     	; 0xae6 <__gesf2+0x56>
     adc:	c7 01       	movw	r24, r14
     ade:	b8 01       	movw	r22, r16
     ae0:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fpcmp_parts_f>
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <__gesf2+0x58>
     ae6:	8f ef       	ldi	r24, 0xFF	; 255
     ae8:	68 96       	adiw	r28, 0x18	; 24
     aea:	e6 e0       	ldi	r30, 0x06	; 6
     aec:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__+0x18>

00000af0 <__ltsf2>:
     af0:	a8 e1       	ldi	r26, 0x18	; 24
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	ee e7       	ldi	r30, 0x7E	; 126
     af6:	f5 e0       	ldi	r31, 0x05	; 5
     af8:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__+0x18>
     afc:	69 83       	std	Y+1, r22	; 0x01
     afe:	7a 83       	std	Y+2, r23	; 0x02
     b00:	8b 83       	std	Y+3, r24	; 0x03
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	2d 83       	std	Y+5, r18	; 0x05
     b06:	3e 83       	std	Y+6, r19	; 0x06
     b08:	4f 83       	std	Y+7, r20	; 0x07
     b0a:	58 87       	std	Y+8, r21	; 0x08
     b0c:	89 e0       	ldi	r24, 0x09	; 9
     b0e:	e8 2e       	mov	r14, r24
     b10:	f1 2c       	mov	r15, r1
     b12:	ec 0e       	add	r14, r28
     b14:	fd 1e       	adc	r15, r29
     b16:	ce 01       	movw	r24, r28
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	b7 01       	movw	r22, r14
     b1c:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     b20:	8e 01       	movw	r16, r28
     b22:	0f 5e       	subi	r16, 0xEF	; 239
     b24:	1f 4f       	sbci	r17, 0xFF	; 255
     b26:	ce 01       	movw	r24, r28
     b28:	05 96       	adiw	r24, 0x05	; 5
     b2a:	b8 01       	movw	r22, r16
     b2c:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     b30:	89 85       	ldd	r24, Y+9	; 0x09
     b32:	82 30       	cpi	r24, 0x02	; 2
     b34:	40 f0       	brcs	.+16     	; 0xb46 <__ltsf2+0x56>
     b36:	89 89       	ldd	r24, Y+17	; 0x11
     b38:	82 30       	cpi	r24, 0x02	; 2
     b3a:	28 f0       	brcs	.+10     	; 0xb46 <__ltsf2+0x56>
     b3c:	c7 01       	movw	r24, r14
     b3e:	b8 01       	movw	r22, r16
     b40:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fpcmp_parts_f>
     b44:	01 c0       	rjmp	.+2      	; 0xb48 <__ltsf2+0x58>
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	68 96       	adiw	r28, 0x18	; 24
     b4a:	e6 e0       	ldi	r30, 0x06	; 6
     b4c:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__+0x18>

00000b50 <__floatsisf>:
     b50:	a8 e0       	ldi	r26, 0x08	; 8
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	ee ea       	ldi	r30, 0xAE	; 174
     b56:	f5 e0       	ldi	r31, 0x05	; 5
     b58:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <__prologue_saves__+0x12>
     b5c:	9b 01       	movw	r18, r22
     b5e:	ac 01       	movw	r20, r24
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	da 01       	movw	r26, r20
     b66:	c9 01       	movw	r24, r18
     b68:	88 27       	eor	r24, r24
     b6a:	b7 fd       	sbrc	r27, 7
     b6c:	83 95       	inc	r24
     b6e:	99 27       	eor	r25, r25
     b70:	aa 27       	eor	r26, r26
     b72:	bb 27       	eor	r27, r27
     b74:	b8 2e       	mov	r11, r24
     b76:	21 15       	cp	r18, r1
     b78:	31 05       	cpc	r19, r1
     b7a:	41 05       	cpc	r20, r1
     b7c:	51 05       	cpc	r21, r1
     b7e:	19 f4       	brne	.+6      	; 0xb86 <__floatsisf+0x36>
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	89 83       	std	Y+1, r24	; 0x01
     b84:	3a c0       	rjmp	.+116    	; 0xbfa <__floatsisf+0xaa>
     b86:	88 23       	and	r24, r24
     b88:	a9 f0       	breq	.+42     	; 0xbb4 <__floatsisf+0x64>
     b8a:	20 30       	cpi	r18, 0x00	; 0
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	38 07       	cpc	r19, r24
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	48 07       	cpc	r20, r24
     b94:	80 e8       	ldi	r24, 0x80	; 128
     b96:	58 07       	cpc	r21, r24
     b98:	29 f4       	brne	.+10     	; 0xba4 <__floatsisf+0x54>
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	9f ec       	ldi	r25, 0xCF	; 207
     ba2:	30 c0       	rjmp	.+96     	; 0xc04 <__floatsisf+0xb4>
     ba4:	ee 24       	eor	r14, r14
     ba6:	ff 24       	eor	r15, r15
     ba8:	87 01       	movw	r16, r14
     baa:	e2 1a       	sub	r14, r18
     bac:	f3 0a       	sbc	r15, r19
     bae:	04 0b       	sbc	r16, r20
     bb0:	15 0b       	sbc	r17, r21
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <__floatsisf+0x68>
     bb4:	79 01       	movw	r14, r18
     bb6:	8a 01       	movw	r16, r20
     bb8:	8e e1       	ldi	r24, 0x1E	; 30
     bba:	c8 2e       	mov	r12, r24
     bbc:	d1 2c       	mov	r13, r1
     bbe:	dc 82       	std	Y+4, r13	; 0x04
     bc0:	cb 82       	std	Y+3, r12	; 0x03
     bc2:	ed 82       	std	Y+5, r14	; 0x05
     bc4:	fe 82       	std	Y+6, r15	; 0x06
     bc6:	0f 83       	std	Y+7, r16	; 0x07
     bc8:	18 87       	std	Y+8, r17	; 0x08
     bca:	c8 01       	movw	r24, r16
     bcc:	b7 01       	movw	r22, r14
     bce:	0e 94 52 07 	call	0xea4	; 0xea4 <__clzsi2>
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	18 16       	cp	r1, r24
     bd6:	19 06       	cpc	r1, r25
     bd8:	84 f4       	brge	.+32     	; 0xbfa <__floatsisf+0xaa>
     bda:	08 2e       	mov	r0, r24
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <__floatsisf+0x96>
     bde:	ee 0c       	add	r14, r14
     be0:	ff 1c       	adc	r15, r15
     be2:	00 1f       	adc	r16, r16
     be4:	11 1f       	adc	r17, r17
     be6:	0a 94       	dec	r0
     be8:	d2 f7       	brpl	.-12     	; 0xbde <__floatsisf+0x8e>
     bea:	ed 82       	std	Y+5, r14	; 0x05
     bec:	fe 82       	std	Y+6, r15	; 0x06
     bee:	0f 83       	std	Y+7, r16	; 0x07
     bf0:	18 87       	std	Y+8, r17	; 0x08
     bf2:	c8 1a       	sub	r12, r24
     bf4:	d9 0a       	sbc	r13, r25
     bf6:	dc 82       	std	Y+4, r13	; 0x04
     bf8:	cb 82       	std	Y+3, r12	; 0x03
     bfa:	ba 82       	std	Y+2, r11	; 0x02
     bfc:	ce 01       	movw	r24, r28
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	0e 94 a1 07 	call	0xf42	; 0xf42 <__pack_f>
     c04:	28 96       	adiw	r28, 0x08	; 8
     c06:	e9 e0       	ldi	r30, 0x09	; 9
     c08:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__epilogue_restores__+0x12>

00000c0c <__fixsfsi>:
     c0c:	ac e0       	ldi	r26, 0x0C	; 12
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	ec e0       	ldi	r30, 0x0C	; 12
     c12:	f6 e0       	ldi	r31, 0x06	; 6
     c14:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x20>
     c18:	69 83       	std	Y+1, r22	; 0x01
     c1a:	7a 83       	std	Y+2, r23	; 0x02
     c1c:	8b 83       	std	Y+3, r24	; 0x03
     c1e:	9c 83       	std	Y+4, r25	; 0x04
     c20:	ce 01       	movw	r24, r28
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	be 01       	movw	r22, r28
     c26:	6b 5f       	subi	r22, 0xFB	; 251
     c28:	7f 4f       	sbci	r23, 0xFF	; 255
     c2a:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     c2e:	8d 81       	ldd	r24, Y+5	; 0x05
     c30:	82 30       	cpi	r24, 0x02	; 2
     c32:	61 f1       	breq	.+88     	; 0xc8c <__fixsfsi+0x80>
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	50 f1       	brcs	.+84     	; 0xc8c <__fixsfsi+0x80>
     c38:	84 30       	cpi	r24, 0x04	; 4
     c3a:	21 f4       	brne	.+8      	; 0xc44 <__fixsfsi+0x38>
     c3c:	8e 81       	ldd	r24, Y+6	; 0x06
     c3e:	88 23       	and	r24, r24
     c40:	51 f1       	breq	.+84     	; 0xc96 <__fixsfsi+0x8a>
     c42:	2e c0       	rjmp	.+92     	; 0xca0 <__fixsfsi+0x94>
     c44:	2f 81       	ldd	r18, Y+7	; 0x07
     c46:	38 85       	ldd	r19, Y+8	; 0x08
     c48:	37 fd       	sbrc	r19, 7
     c4a:	20 c0       	rjmp	.+64     	; 0xc8c <__fixsfsi+0x80>
     c4c:	6e 81       	ldd	r22, Y+6	; 0x06
     c4e:	2f 31       	cpi	r18, 0x1F	; 31
     c50:	31 05       	cpc	r19, r1
     c52:	1c f0       	brlt	.+6      	; 0xc5a <__fixsfsi+0x4e>
     c54:	66 23       	and	r22, r22
     c56:	f9 f0       	breq	.+62     	; 0xc96 <__fixsfsi+0x8a>
     c58:	23 c0       	rjmp	.+70     	; 0xca0 <__fixsfsi+0x94>
     c5a:	8e e1       	ldi	r24, 0x1E	; 30
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	82 1b       	sub	r24, r18
     c60:	93 0b       	sbc	r25, r19
     c62:	29 85       	ldd	r18, Y+9	; 0x09
     c64:	3a 85       	ldd	r19, Y+10	; 0x0a
     c66:	4b 85       	ldd	r20, Y+11	; 0x0b
     c68:	5c 85       	ldd	r21, Y+12	; 0x0c
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <__fixsfsi+0x68>
     c6c:	56 95       	lsr	r21
     c6e:	47 95       	ror	r20
     c70:	37 95       	ror	r19
     c72:	27 95       	ror	r18
     c74:	8a 95       	dec	r24
     c76:	d2 f7       	brpl	.-12     	; 0xc6c <__fixsfsi+0x60>
     c78:	66 23       	and	r22, r22
     c7a:	b1 f0       	breq	.+44     	; 0xca8 <__fixsfsi+0x9c>
     c7c:	50 95       	com	r21
     c7e:	40 95       	com	r20
     c80:	30 95       	com	r19
     c82:	21 95       	neg	r18
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	0e c0       	rjmp	.+28     	; 0xca8 <__fixsfsi+0x9c>
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	40 e0       	ldi	r20, 0x00	; 0
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	09 c0       	rjmp	.+18     	; 0xca8 <__fixsfsi+0x9c>
     c96:	2f ef       	ldi	r18, 0xFF	; 255
     c98:	3f ef       	ldi	r19, 0xFF	; 255
     c9a:	4f ef       	ldi	r20, 0xFF	; 255
     c9c:	5f e7       	ldi	r21, 0x7F	; 127
     c9e:	04 c0       	rjmp	.+8      	; 0xca8 <__fixsfsi+0x9c>
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e8       	ldi	r21, 0x80	; 128
     ca8:	b9 01       	movw	r22, r18
     caa:	ca 01       	movw	r24, r20
     cac:	2c 96       	adiw	r28, 0x0c	; 12
     cae:	e2 e0       	ldi	r30, 0x02	; 2
     cb0:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x20>

00000cb4 <__floatunsisf>:
     cb4:	a8 e0       	ldi	r26, 0x08	; 8
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e0 e6       	ldi	r30, 0x60	; 96
     cba:	f6 e0       	ldi	r31, 0x06	; 6
     cbc:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__prologue_saves__+0x10>
     cc0:	7b 01       	movw	r14, r22
     cc2:	8c 01       	movw	r16, r24
     cc4:	61 15       	cp	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	81 05       	cpc	r24, r1
     cca:	91 05       	cpc	r25, r1
     ccc:	19 f4       	brne	.+6      	; 0xcd4 <__floatunsisf+0x20>
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	60 c0       	rjmp	.+192    	; 0xd94 <__floatunsisf+0xe0>
     cd4:	83 e0       	ldi	r24, 0x03	; 3
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	8e e1       	ldi	r24, 0x1E	; 30
     cda:	c8 2e       	mov	r12, r24
     cdc:	d1 2c       	mov	r13, r1
     cde:	dc 82       	std	Y+4, r13	; 0x04
     ce0:	cb 82       	std	Y+3, r12	; 0x03
     ce2:	ed 82       	std	Y+5, r14	; 0x05
     ce4:	fe 82       	std	Y+6, r15	; 0x06
     ce6:	0f 83       	std	Y+7, r16	; 0x07
     ce8:	18 87       	std	Y+8, r17	; 0x08
     cea:	c8 01       	movw	r24, r16
     cec:	b7 01       	movw	r22, r14
     cee:	0e 94 52 07 	call	0xea4	; 0xea4 <__clzsi2>
     cf2:	fc 01       	movw	r30, r24
     cf4:	31 97       	sbiw	r30, 0x01	; 1
     cf6:	f7 ff       	sbrs	r31, 7
     cf8:	3b c0       	rjmp	.+118    	; 0xd70 <__floatunsisf+0xbc>
     cfa:	22 27       	eor	r18, r18
     cfc:	33 27       	eor	r19, r19
     cfe:	2e 1b       	sub	r18, r30
     d00:	3f 0b       	sbc	r19, r31
     d02:	57 01       	movw	r10, r14
     d04:	68 01       	movw	r12, r16
     d06:	02 2e       	mov	r0, r18
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__floatunsisf+0x5e>
     d0a:	d6 94       	lsr	r13
     d0c:	c7 94       	ror	r12
     d0e:	b7 94       	ror	r11
     d10:	a7 94       	ror	r10
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <__floatunsisf+0x56>
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	a0 e0       	ldi	r26, 0x00	; 0
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	04 c0       	rjmp	.+8      	; 0xd30 <__floatunsisf+0x7c>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	aa 1f       	adc	r26, r26
     d2e:	bb 1f       	adc	r27, r27
     d30:	2a 95       	dec	r18
     d32:	d2 f7       	brpl	.-12     	; 0xd28 <__floatunsisf+0x74>
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	a1 09       	sbc	r26, r1
     d38:	b1 09       	sbc	r27, r1
     d3a:	8e 21       	and	r24, r14
     d3c:	9f 21       	and	r25, r15
     d3e:	a0 23       	and	r26, r16
     d40:	b1 23       	and	r27, r17
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	a1 05       	cpc	r26, r1
     d46:	b1 05       	cpc	r27, r1
     d48:	21 f0       	breq	.+8      	; 0xd52 <__floatunsisf+0x9e>
     d4a:	41 e0       	ldi	r20, 0x01	; 1
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	4a 29       	or	r20, r10
     d54:	5b 29       	or	r21, r11
     d56:	6c 29       	or	r22, r12
     d58:	7d 29       	or	r23, r13
     d5a:	4d 83       	std	Y+5, r20	; 0x05
     d5c:	5e 83       	std	Y+6, r21	; 0x06
     d5e:	6f 83       	std	Y+7, r22	; 0x07
     d60:	78 87       	std	Y+8, r23	; 0x08
     d62:	8e e1       	ldi	r24, 0x1E	; 30
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	8e 1b       	sub	r24, r30
     d68:	9f 0b       	sbc	r25, r31
     d6a:	9c 83       	std	Y+4, r25	; 0x04
     d6c:	8b 83       	std	Y+3, r24	; 0x03
     d6e:	12 c0       	rjmp	.+36     	; 0xd94 <__floatunsisf+0xe0>
     d70:	30 97       	sbiw	r30, 0x00	; 0
     d72:	81 f0       	breq	.+32     	; 0xd94 <__floatunsisf+0xe0>
     d74:	0e 2e       	mov	r0, r30
     d76:	04 c0       	rjmp	.+8      	; 0xd80 <__floatunsisf+0xcc>
     d78:	ee 0c       	add	r14, r14
     d7a:	ff 1c       	adc	r15, r15
     d7c:	00 1f       	adc	r16, r16
     d7e:	11 1f       	adc	r17, r17
     d80:	0a 94       	dec	r0
     d82:	d2 f7       	brpl	.-12     	; 0xd78 <__floatunsisf+0xc4>
     d84:	ed 82       	std	Y+5, r14	; 0x05
     d86:	fe 82       	std	Y+6, r15	; 0x06
     d88:	0f 83       	std	Y+7, r16	; 0x07
     d8a:	18 87       	std	Y+8, r17	; 0x08
     d8c:	ce 1a       	sub	r12, r30
     d8e:	df 0a       	sbc	r13, r31
     d90:	dc 82       	std	Y+4, r13	; 0x04
     d92:	cb 82       	std	Y+3, r12	; 0x03
     d94:	1a 82       	std	Y+2, r1	; 0x02
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	0e 94 a1 07 	call	0xf42	; 0xf42 <__pack_f>
     d9e:	28 96       	adiw	r28, 0x08	; 8
     da0:	ea e0       	ldi	r30, 0x0A	; 10
     da2:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__epilogue_restores__+0x10>

00000da6 <__lshrdi3>:
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	0f 93       	push	r16
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	60 97       	sbiw	r28, 0x10	; 16
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	a8 2f       	mov	r26, r24
     dc2:	00 23       	and	r16, r16
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <__lshrdi3+0x22>
     dc6:	61 c0       	rjmp	.+194    	; 0xe8a <__lshrdi3+0xe4>
     dc8:	7e 01       	movw	r14, r28
     dca:	08 94       	sec
     dcc:	e1 1c       	adc	r14, r1
     dce:	f1 1c       	adc	r15, r1
     dd0:	88 e0       	ldi	r24, 0x08	; 8
     dd2:	f7 01       	movw	r30, r14
     dd4:	11 92       	st	Z+, r1
     dd6:	8a 95       	dec	r24
     dd8:	e9 f7       	brne	.-6      	; 0xdd4 <__lshrdi3+0x2e>
     dda:	29 83       	std	Y+1, r18	; 0x01
     ddc:	3a 83       	std	Y+2, r19	; 0x02
     dde:	4b 83       	std	Y+3, r20	; 0x03
     de0:	5c 83       	std	Y+4, r21	; 0x04
     de2:	6d 83       	std	Y+5, r22	; 0x05
     de4:	7e 83       	std	Y+6, r23	; 0x06
     de6:	af 83       	std	Y+7, r26	; 0x07
     de8:	98 87       	std	Y+8, r25	; 0x08
     dea:	80 e2       	ldi	r24, 0x20	; 32
     dec:	80 1b       	sub	r24, r16
     dee:	e8 2f       	mov	r30, r24
     df0:	ff 27       	eor	r31, r31
     df2:	e7 fd       	sbrc	r30, 7
     df4:	f0 95       	com	r31
     df6:	4d 81       	ldd	r20, Y+5	; 0x05
     df8:	5e 81       	ldd	r21, Y+6	; 0x06
     dfa:	6f 81       	ldd	r22, Y+7	; 0x07
     dfc:	78 85       	ldd	r23, Y+8	; 0x08
     dfe:	18 16       	cp	r1, r24
     e00:	84 f0       	brlt	.+32     	; 0xe22 <__lshrdi3+0x7c>
     e02:	1d 86       	std	Y+13, r1	; 0x0d
     e04:	1e 86       	std	Y+14, r1	; 0x0e
     e06:	1f 86       	std	Y+15, r1	; 0x0f
     e08:	18 8a       	std	Y+16, r1	; 0x10
     e0a:	88 27       	eor	r24, r24
     e0c:	99 27       	eor	r25, r25
     e0e:	8e 1b       	sub	r24, r30
     e10:	9f 0b       	sbc	r25, r31
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <__lshrdi3+0x76>
     e14:	76 95       	lsr	r23
     e16:	67 95       	ror	r22
     e18:	57 95       	ror	r21
     e1a:	47 95       	ror	r20
     e1c:	8a 95       	dec	r24
     e1e:	d2 f7       	brpl	.-12     	; 0xe14 <__lshrdi3+0x6e>
     e20:	28 c0       	rjmp	.+80     	; 0xe72 <__lshrdi3+0xcc>
     e22:	20 2f       	mov	r18, r16
     e24:	33 27       	eor	r19, r19
     e26:	27 fd       	sbrc	r18, 7
     e28:	30 95       	com	r19
     e2a:	db 01       	movw	r26, r22
     e2c:	ca 01       	movw	r24, r20
     e2e:	02 2e       	mov	r0, r18
     e30:	04 c0       	rjmp	.+8      	; 0xe3a <__lshrdi3+0x94>
     e32:	b6 95       	lsr	r27
     e34:	a7 95       	ror	r26
     e36:	97 95       	ror	r25
     e38:	87 95       	ror	r24
     e3a:	0a 94       	dec	r0
     e3c:	d2 f7       	brpl	.-12     	; 0xe32 <__lshrdi3+0x8c>
     e3e:	8d 87       	std	Y+13, r24	; 0x0d
     e40:	9e 87       	std	Y+14, r25	; 0x0e
     e42:	af 87       	std	Y+15, r26	; 0x0f
     e44:	b8 8b       	std	Y+16, r27	; 0x10
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <__lshrdi3+0xaa>
     e48:	44 0f       	add	r20, r20
     e4a:	55 1f       	adc	r21, r21
     e4c:	66 1f       	adc	r22, r22
     e4e:	77 1f       	adc	r23, r23
     e50:	ea 95       	dec	r30
     e52:	d2 f7       	brpl	.-12     	; 0xe48 <__lshrdi3+0xa2>
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	ab 81       	ldd	r26, Y+3	; 0x03
     e5a:	bc 81       	ldd	r27, Y+4	; 0x04
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <__lshrdi3+0xc0>
     e5e:	b6 95       	lsr	r27
     e60:	a7 95       	ror	r26
     e62:	97 95       	ror	r25
     e64:	87 95       	ror	r24
     e66:	2a 95       	dec	r18
     e68:	d2 f7       	brpl	.-12     	; 0xe5e <__lshrdi3+0xb8>
     e6a:	48 2b       	or	r20, r24
     e6c:	59 2b       	or	r21, r25
     e6e:	6a 2b       	or	r22, r26
     e70:	7b 2b       	or	r23, r27
     e72:	49 87       	std	Y+9, r20	; 0x09
     e74:	5a 87       	std	Y+10, r21	; 0x0a
     e76:	6b 87       	std	Y+11, r22	; 0x0b
     e78:	7c 87       	std	Y+12, r23	; 0x0c
     e7a:	29 85       	ldd	r18, Y+9	; 0x09
     e7c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e7e:	4b 85       	ldd	r20, Y+11	; 0x0b
     e80:	5c 85       	ldd	r21, Y+12	; 0x0c
     e82:	6d 85       	ldd	r22, Y+13	; 0x0d
     e84:	7e 85       	ldd	r23, Y+14	; 0x0e
     e86:	af 85       	ldd	r26, Y+15	; 0x0f
     e88:	98 89       	ldd	r25, Y+16	; 0x10
     e8a:	8a 2f       	mov	r24, r26
     e8c:	60 96       	adiw	r28, 0x10	; 16
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	08 95       	ret

00000ea4 <__clzsi2>:
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	7b 01       	movw	r14, r22
     eae:	8c 01       	movw	r16, r24
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	e8 16       	cp	r14, r24
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	f8 06       	cpc	r15, r24
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	08 07       	cpc	r16, r24
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	18 07       	cpc	r17, r24
     ec0:	88 f4       	brcc	.+34     	; 0xee4 <__clzsi2+0x40>
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
     ec4:	e8 16       	cp	r14, r24
     ec6:	f1 04       	cpc	r15, r1
     ec8:	01 05       	cpc	r16, r1
     eca:	11 05       	cpc	r17, r1
     ecc:	31 f0       	breq	.+12     	; 0xeda <__clzsi2+0x36>
     ece:	28 f0       	brcs	.+10     	; 0xeda <__clzsi2+0x36>
     ed0:	88 e0       	ldi	r24, 0x08	; 8
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	a0 e0       	ldi	r26, 0x00	; 0
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	17 c0       	rjmp	.+46     	; 0xf08 <__clzsi2+0x64>
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	a0 e0       	ldi	r26, 0x00	; 0
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	12 c0       	rjmp	.+36     	; 0xf08 <__clzsi2+0x64>
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	e8 16       	cp	r14, r24
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	f8 06       	cpc	r15, r24
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	08 07       	cpc	r16, r24
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	18 07       	cpc	r17, r24
     ef4:	28 f0       	brcs	.+10     	; 0xf00 <__clzsi2+0x5c>
     ef6:	88 e1       	ldi	r24, 0x18	; 24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	a0 e0       	ldi	r26, 0x00	; 0
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <__clzsi2+0x64>
     f00:	80 e1       	ldi	r24, 0x10	; 16
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	a0 e0       	ldi	r26, 0x00	; 0
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	20 e2       	ldi	r18, 0x20	; 32
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	28 1b       	sub	r18, r24
     f12:	39 0b       	sbc	r19, r25
     f14:	4a 0b       	sbc	r20, r26
     f16:	5b 0b       	sbc	r21, r27
     f18:	04 c0       	rjmp	.+8      	; 0xf22 <__clzsi2+0x7e>
     f1a:	16 95       	lsr	r17
     f1c:	07 95       	ror	r16
     f1e:	f7 94       	ror	r15
     f20:	e7 94       	ror	r14
     f22:	8a 95       	dec	r24
     f24:	d2 f7       	brpl	.-12     	; 0xf1a <__clzsi2+0x76>
     f26:	f7 01       	movw	r30, r14
     f28:	ee 57       	subi	r30, 0x7E	; 126
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	80 81       	ld	r24, Z
     f2e:	28 1b       	sub	r18, r24
     f30:	31 09       	sbc	r19, r1
     f32:	41 09       	sbc	r20, r1
     f34:	51 09       	sbc	r21, r1
     f36:	c9 01       	movw	r24, r18
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	ff 90       	pop	r15
     f3e:	ef 90       	pop	r14
     f40:	08 95       	ret

00000f42 <__pack_f>:
     f42:	df 92       	push	r13
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	fc 01       	movw	r30, r24
     f4e:	e4 80       	ldd	r14, Z+4	; 0x04
     f50:	f5 80       	ldd	r15, Z+5	; 0x05
     f52:	06 81       	ldd	r16, Z+6	; 0x06
     f54:	17 81       	ldd	r17, Z+7	; 0x07
     f56:	d1 80       	ldd	r13, Z+1	; 0x01
     f58:	80 81       	ld	r24, Z
     f5a:	82 30       	cpi	r24, 0x02	; 2
     f5c:	48 f4       	brcc	.+18     	; 0xf70 <__pack_f+0x2e>
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e1       	ldi	r26, 0x10	; 16
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e8 2a       	or	r14, r24
     f68:	f9 2a       	or	r15, r25
     f6a:	0a 2b       	or	r16, r26
     f6c:	1b 2b       	or	r17, r27
     f6e:	a5 c0       	rjmp	.+330    	; 0x10ba <__pack_f+0x178>
     f70:	84 30       	cpi	r24, 0x04	; 4
     f72:	09 f4       	brne	.+2      	; 0xf76 <__pack_f+0x34>
     f74:	9f c0       	rjmp	.+318    	; 0x10b4 <__pack_f+0x172>
     f76:	82 30       	cpi	r24, 0x02	; 2
     f78:	21 f4       	brne	.+8      	; 0xf82 <__pack_f+0x40>
     f7a:	ee 24       	eor	r14, r14
     f7c:	ff 24       	eor	r15, r15
     f7e:	87 01       	movw	r16, r14
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <__pack_f+0x4a>
     f82:	e1 14       	cp	r14, r1
     f84:	f1 04       	cpc	r15, r1
     f86:	01 05       	cpc	r16, r1
     f88:	11 05       	cpc	r17, r1
     f8a:	19 f4       	brne	.+6      	; 0xf92 <__pack_f+0x50>
     f8c:	e0 e0       	ldi	r30, 0x00	; 0
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	96 c0       	rjmp	.+300    	; 0x10be <__pack_f+0x17c>
     f92:	62 81       	ldd	r22, Z+2	; 0x02
     f94:	73 81       	ldd	r23, Z+3	; 0x03
     f96:	9f ef       	ldi	r25, 0xFF	; 255
     f98:	62 38       	cpi	r22, 0x82	; 130
     f9a:	79 07       	cpc	r23, r25
     f9c:	0c f0       	brlt	.+2      	; 0xfa0 <__pack_f+0x5e>
     f9e:	5b c0       	rjmp	.+182    	; 0x1056 <__pack_f+0x114>
     fa0:	22 e8       	ldi	r18, 0x82	; 130
     fa2:	3f ef       	ldi	r19, 0xFF	; 255
     fa4:	26 1b       	sub	r18, r22
     fa6:	37 0b       	sbc	r19, r23
     fa8:	2a 31       	cpi	r18, 0x1A	; 26
     faa:	31 05       	cpc	r19, r1
     fac:	2c f0       	brlt	.+10     	; 0xfb8 <__pack_f+0x76>
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	2a c0       	rjmp	.+84     	; 0x100c <__pack_f+0xca>
     fb8:	b8 01       	movw	r22, r16
     fba:	a7 01       	movw	r20, r14
     fbc:	02 2e       	mov	r0, r18
     fbe:	04 c0       	rjmp	.+8      	; 0xfc8 <__pack_f+0x86>
     fc0:	76 95       	lsr	r23
     fc2:	67 95       	ror	r22
     fc4:	57 95       	ror	r21
     fc6:	47 95       	ror	r20
     fc8:	0a 94       	dec	r0
     fca:	d2 f7       	brpl	.-12     	; 0xfc0 <__pack_f+0x7e>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	04 c0       	rjmp	.+8      	; 0xfde <__pack_f+0x9c>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	aa 1f       	adc	r26, r26
     fdc:	bb 1f       	adc	r27, r27
     fde:	2a 95       	dec	r18
     fe0:	d2 f7       	brpl	.-12     	; 0xfd6 <__pack_f+0x94>
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	a1 09       	sbc	r26, r1
     fe6:	b1 09       	sbc	r27, r1
     fe8:	8e 21       	and	r24, r14
     fea:	9f 21       	and	r25, r15
     fec:	a0 23       	and	r26, r16
     fee:	b1 23       	and	r27, r17
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	a1 05       	cpc	r26, r1
     ff4:	b1 05       	cpc	r27, r1
     ff6:	21 f0       	breq	.+8      	; 0x1000 <__pack_f+0xbe>
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	a0 e0       	ldi	r26, 0x00	; 0
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	9a 01       	movw	r18, r20
    1002:	ab 01       	movw	r20, r22
    1004:	28 2b       	or	r18, r24
    1006:	39 2b       	or	r19, r25
    1008:	4a 2b       	or	r20, r26
    100a:	5b 2b       	or	r21, r27
    100c:	da 01       	movw	r26, r20
    100e:	c9 01       	movw	r24, r18
    1010:	8f 77       	andi	r24, 0x7F	; 127
    1012:	90 70       	andi	r25, 0x00	; 0
    1014:	a0 70       	andi	r26, 0x00	; 0
    1016:	b0 70       	andi	r27, 0x00	; 0
    1018:	80 34       	cpi	r24, 0x40	; 64
    101a:	91 05       	cpc	r25, r1
    101c:	a1 05       	cpc	r26, r1
    101e:	b1 05       	cpc	r27, r1
    1020:	39 f4       	brne	.+14     	; 0x1030 <__pack_f+0xee>
    1022:	27 ff       	sbrs	r18, 7
    1024:	09 c0       	rjmp	.+18     	; 0x1038 <__pack_f+0xf6>
    1026:	20 5c       	subi	r18, 0xC0	; 192
    1028:	3f 4f       	sbci	r19, 0xFF	; 255
    102a:	4f 4f       	sbci	r20, 0xFF	; 255
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	04 c0       	rjmp	.+8      	; 0x1038 <__pack_f+0xf6>
    1030:	21 5c       	subi	r18, 0xC1	; 193
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	4f 4f       	sbci	r20, 0xFF	; 255
    1036:	5f 4f       	sbci	r21, 0xFF	; 255
    1038:	e0 e0       	ldi	r30, 0x00	; 0
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	20 30       	cpi	r18, 0x00	; 0
    103e:	a0 e0       	ldi	r26, 0x00	; 0
    1040:	3a 07       	cpc	r19, r26
    1042:	a0 e0       	ldi	r26, 0x00	; 0
    1044:	4a 07       	cpc	r20, r26
    1046:	a0 e4       	ldi	r26, 0x40	; 64
    1048:	5a 07       	cpc	r21, r26
    104a:	10 f0       	brcs	.+4      	; 0x1050 <__pack_f+0x10e>
    104c:	e1 e0       	ldi	r30, 0x01	; 1
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	79 01       	movw	r14, r18
    1052:	8a 01       	movw	r16, r20
    1054:	27 c0       	rjmp	.+78     	; 0x10a4 <__pack_f+0x162>
    1056:	60 38       	cpi	r22, 0x80	; 128
    1058:	71 05       	cpc	r23, r1
    105a:	64 f5       	brge	.+88     	; 0x10b4 <__pack_f+0x172>
    105c:	fb 01       	movw	r30, r22
    105e:	e1 58       	subi	r30, 0x81	; 129
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	d8 01       	movw	r26, r16
    1064:	c7 01       	movw	r24, r14
    1066:	8f 77       	andi	r24, 0x7F	; 127
    1068:	90 70       	andi	r25, 0x00	; 0
    106a:	a0 70       	andi	r26, 0x00	; 0
    106c:	b0 70       	andi	r27, 0x00	; 0
    106e:	80 34       	cpi	r24, 0x40	; 64
    1070:	91 05       	cpc	r25, r1
    1072:	a1 05       	cpc	r26, r1
    1074:	b1 05       	cpc	r27, r1
    1076:	39 f4       	brne	.+14     	; 0x1086 <__pack_f+0x144>
    1078:	e7 fe       	sbrs	r14, 7
    107a:	0d c0       	rjmp	.+26     	; 0x1096 <__pack_f+0x154>
    107c:	80 e4       	ldi	r24, 0x40	; 64
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	a0 e0       	ldi	r26, 0x00	; 0
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	04 c0       	rjmp	.+8      	; 0x108e <__pack_f+0x14c>
    1086:	8f e3       	ldi	r24, 0x3F	; 63
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	a0 e0       	ldi	r26, 0x00	; 0
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 0e       	add	r14, r24
    1090:	f9 1e       	adc	r15, r25
    1092:	0a 1f       	adc	r16, r26
    1094:	1b 1f       	adc	r17, r27
    1096:	17 ff       	sbrs	r17, 7
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <__pack_f+0x162>
    109a:	16 95       	lsr	r17
    109c:	07 95       	ror	r16
    109e:	f7 94       	ror	r15
    10a0:	e7 94       	ror	r14
    10a2:	31 96       	adiw	r30, 0x01	; 1
    10a4:	87 e0       	ldi	r24, 0x07	; 7
    10a6:	16 95       	lsr	r17
    10a8:	07 95       	ror	r16
    10aa:	f7 94       	ror	r15
    10ac:	e7 94       	ror	r14
    10ae:	8a 95       	dec	r24
    10b0:	d1 f7       	brne	.-12     	; 0x10a6 <__pack_f+0x164>
    10b2:	05 c0       	rjmp	.+10     	; 0x10be <__pack_f+0x17c>
    10b4:	ee 24       	eor	r14, r14
    10b6:	ff 24       	eor	r15, r15
    10b8:	87 01       	movw	r16, r14
    10ba:	ef ef       	ldi	r30, 0xFF	; 255
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	6e 2f       	mov	r22, r30
    10c0:	67 95       	ror	r22
    10c2:	66 27       	eor	r22, r22
    10c4:	67 95       	ror	r22
    10c6:	90 2f       	mov	r25, r16
    10c8:	9f 77       	andi	r25, 0x7F	; 127
    10ca:	d7 94       	ror	r13
    10cc:	dd 24       	eor	r13, r13
    10ce:	d7 94       	ror	r13
    10d0:	8e 2f       	mov	r24, r30
    10d2:	86 95       	lsr	r24
    10d4:	49 2f       	mov	r20, r25
    10d6:	46 2b       	or	r20, r22
    10d8:	58 2f       	mov	r21, r24
    10da:	5d 29       	or	r21, r13
    10dc:	b7 01       	movw	r22, r14
    10de:	ca 01       	movw	r24, r20
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	df 90       	pop	r13
    10ea:	08 95       	ret

000010ec <__unpack_f>:
    10ec:	fc 01       	movw	r30, r24
    10ee:	db 01       	movw	r26, r22
    10f0:	40 81       	ld	r20, Z
    10f2:	51 81       	ldd	r21, Z+1	; 0x01
    10f4:	22 81       	ldd	r18, Z+2	; 0x02
    10f6:	62 2f       	mov	r22, r18
    10f8:	6f 77       	andi	r22, 0x7F	; 127
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	22 1f       	adc	r18, r18
    10fe:	22 27       	eor	r18, r18
    1100:	22 1f       	adc	r18, r18
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	89 2f       	mov	r24, r25
    1106:	88 0f       	add	r24, r24
    1108:	82 2b       	or	r24, r18
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	99 1f       	adc	r25, r25
    1110:	99 27       	eor	r25, r25
    1112:	99 1f       	adc	r25, r25
    1114:	11 96       	adiw	r26, 0x01	; 1
    1116:	9c 93       	st	X, r25
    1118:	11 97       	sbiw	r26, 0x01	; 1
    111a:	21 15       	cp	r18, r1
    111c:	31 05       	cpc	r19, r1
    111e:	a9 f5       	brne	.+106    	; 0x118a <__unpack_f+0x9e>
    1120:	41 15       	cp	r20, r1
    1122:	51 05       	cpc	r21, r1
    1124:	61 05       	cpc	r22, r1
    1126:	71 05       	cpc	r23, r1
    1128:	11 f4       	brne	.+4      	; 0x112e <__unpack_f+0x42>
    112a:	82 e0       	ldi	r24, 0x02	; 2
    112c:	37 c0       	rjmp	.+110    	; 0x119c <__unpack_f+0xb0>
    112e:	82 e8       	ldi	r24, 0x82	; 130
    1130:	9f ef       	ldi	r25, 0xFF	; 255
    1132:	13 96       	adiw	r26, 0x03	; 3
    1134:	9c 93       	st	X, r25
    1136:	8e 93       	st	-X, r24
    1138:	12 97       	sbiw	r26, 0x02	; 2
    113a:	9a 01       	movw	r18, r20
    113c:	ab 01       	movw	r20, r22
    113e:	67 e0       	ldi	r22, 0x07	; 7
    1140:	22 0f       	add	r18, r18
    1142:	33 1f       	adc	r19, r19
    1144:	44 1f       	adc	r20, r20
    1146:	55 1f       	adc	r21, r21
    1148:	6a 95       	dec	r22
    114a:	d1 f7       	brne	.-12     	; 0x1140 <__unpack_f+0x54>
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8c 93       	st	X, r24
    1150:	0d c0       	rjmp	.+26     	; 0x116c <__unpack_f+0x80>
    1152:	22 0f       	add	r18, r18
    1154:	33 1f       	adc	r19, r19
    1156:	44 1f       	adc	r20, r20
    1158:	55 1f       	adc	r21, r21
    115a:	12 96       	adiw	r26, 0x02	; 2
    115c:	8d 91       	ld	r24, X+
    115e:	9c 91       	ld	r25, X
    1160:	13 97       	sbiw	r26, 0x03	; 3
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	13 96       	adiw	r26, 0x03	; 3
    1166:	9c 93       	st	X, r25
    1168:	8e 93       	st	-X, r24
    116a:	12 97       	sbiw	r26, 0x02	; 2
    116c:	20 30       	cpi	r18, 0x00	; 0
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	38 07       	cpc	r19, r24
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	48 07       	cpc	r20, r24
    1176:	80 e4       	ldi	r24, 0x40	; 64
    1178:	58 07       	cpc	r21, r24
    117a:	58 f3       	brcs	.-42     	; 0x1152 <__unpack_f+0x66>
    117c:	14 96       	adiw	r26, 0x04	; 4
    117e:	2d 93       	st	X+, r18
    1180:	3d 93       	st	X+, r19
    1182:	4d 93       	st	X+, r20
    1184:	5c 93       	st	X, r21
    1186:	17 97       	sbiw	r26, 0x07	; 7
    1188:	08 95       	ret
    118a:	2f 3f       	cpi	r18, 0xFF	; 255
    118c:	31 05       	cpc	r19, r1
    118e:	79 f4       	brne	.+30     	; 0x11ae <__unpack_f+0xc2>
    1190:	41 15       	cp	r20, r1
    1192:	51 05       	cpc	r21, r1
    1194:	61 05       	cpc	r22, r1
    1196:	71 05       	cpc	r23, r1
    1198:	19 f4       	brne	.+6      	; 0x11a0 <__unpack_f+0xb4>
    119a:	84 e0       	ldi	r24, 0x04	; 4
    119c:	8c 93       	st	X, r24
    119e:	08 95       	ret
    11a0:	64 ff       	sbrs	r22, 4
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <__unpack_f+0xbe>
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	8c 93       	st	X, r24
    11a8:	12 c0       	rjmp	.+36     	; 0x11ce <__unpack_f+0xe2>
    11aa:	1c 92       	st	X, r1
    11ac:	10 c0       	rjmp	.+32     	; 0x11ce <__unpack_f+0xe2>
    11ae:	2f 57       	subi	r18, 0x7F	; 127
    11b0:	30 40       	sbci	r19, 0x00	; 0
    11b2:	13 96       	adiw	r26, 0x03	; 3
    11b4:	3c 93       	st	X, r19
    11b6:	2e 93       	st	-X, r18
    11b8:	12 97       	sbiw	r26, 0x02	; 2
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	8c 93       	st	X, r24
    11be:	87 e0       	ldi	r24, 0x07	; 7
    11c0:	44 0f       	add	r20, r20
    11c2:	55 1f       	adc	r21, r21
    11c4:	66 1f       	adc	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	8a 95       	dec	r24
    11ca:	d1 f7       	brne	.-12     	; 0x11c0 <__unpack_f+0xd4>
    11cc:	70 64       	ori	r23, 0x40	; 64
    11ce:	14 96       	adiw	r26, 0x04	; 4
    11d0:	4d 93       	st	X+, r20
    11d2:	5d 93       	st	X+, r21
    11d4:	6d 93       	st	X+, r22
    11d6:	7c 93       	st	X, r23
    11d8:	17 97       	sbiw	r26, 0x07	; 7
    11da:	08 95       	ret

000011dc <__fpcmp_parts_f>:
    11dc:	1f 93       	push	r17
    11de:	dc 01       	movw	r26, r24
    11e0:	fb 01       	movw	r30, r22
    11e2:	9c 91       	ld	r25, X
    11e4:	92 30       	cpi	r25, 0x02	; 2
    11e6:	08 f4       	brcc	.+2      	; 0x11ea <__fpcmp_parts_f+0xe>
    11e8:	47 c0       	rjmp	.+142    	; 0x1278 <__fpcmp_parts_f+0x9c>
    11ea:	80 81       	ld	r24, Z
    11ec:	82 30       	cpi	r24, 0x02	; 2
    11ee:	08 f4       	brcc	.+2      	; 0x11f2 <__fpcmp_parts_f+0x16>
    11f0:	43 c0       	rjmp	.+134    	; 0x1278 <__fpcmp_parts_f+0x9c>
    11f2:	94 30       	cpi	r25, 0x04	; 4
    11f4:	51 f4       	brne	.+20     	; 0x120a <__fpcmp_parts_f+0x2e>
    11f6:	11 96       	adiw	r26, 0x01	; 1
    11f8:	1c 91       	ld	r17, X
    11fa:	84 30       	cpi	r24, 0x04	; 4
    11fc:	99 f5       	brne	.+102    	; 0x1264 <__fpcmp_parts_f+0x88>
    11fe:	81 81       	ldd	r24, Z+1	; 0x01
    1200:	68 2f       	mov	r22, r24
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	61 1b       	sub	r22, r17
    1206:	71 09       	sbc	r23, r1
    1208:	3f c0       	rjmp	.+126    	; 0x1288 <__fpcmp_parts_f+0xac>
    120a:	84 30       	cpi	r24, 0x04	; 4
    120c:	21 f0       	breq	.+8      	; 0x1216 <__fpcmp_parts_f+0x3a>
    120e:	92 30       	cpi	r25, 0x02	; 2
    1210:	31 f4       	brne	.+12     	; 0x121e <__fpcmp_parts_f+0x42>
    1212:	82 30       	cpi	r24, 0x02	; 2
    1214:	b9 f1       	breq	.+110    	; 0x1284 <__fpcmp_parts_f+0xa8>
    1216:	81 81       	ldd	r24, Z+1	; 0x01
    1218:	88 23       	and	r24, r24
    121a:	89 f1       	breq	.+98     	; 0x127e <__fpcmp_parts_f+0xa2>
    121c:	2d c0       	rjmp	.+90     	; 0x1278 <__fpcmp_parts_f+0x9c>
    121e:	11 96       	adiw	r26, 0x01	; 1
    1220:	1c 91       	ld	r17, X
    1222:	11 97       	sbiw	r26, 0x01	; 1
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	f1 f0       	breq	.+60     	; 0x1264 <__fpcmp_parts_f+0x88>
    1228:	81 81       	ldd	r24, Z+1	; 0x01
    122a:	18 17       	cp	r17, r24
    122c:	d9 f4       	brne	.+54     	; 0x1264 <__fpcmp_parts_f+0x88>
    122e:	12 96       	adiw	r26, 0x02	; 2
    1230:	2d 91       	ld	r18, X+
    1232:	3c 91       	ld	r19, X
    1234:	13 97       	sbiw	r26, 0x03	; 3
    1236:	82 81       	ldd	r24, Z+2	; 0x02
    1238:	93 81       	ldd	r25, Z+3	; 0x03
    123a:	82 17       	cp	r24, r18
    123c:	93 07       	cpc	r25, r19
    123e:	94 f0       	brlt	.+36     	; 0x1264 <__fpcmp_parts_f+0x88>
    1240:	28 17       	cp	r18, r24
    1242:	39 07       	cpc	r19, r25
    1244:	bc f0       	brlt	.+46     	; 0x1274 <__fpcmp_parts_f+0x98>
    1246:	14 96       	adiw	r26, 0x04	; 4
    1248:	8d 91       	ld	r24, X+
    124a:	9d 91       	ld	r25, X+
    124c:	0d 90       	ld	r0, X+
    124e:	bc 91       	ld	r27, X
    1250:	a0 2d       	mov	r26, r0
    1252:	24 81       	ldd	r18, Z+4	; 0x04
    1254:	35 81       	ldd	r19, Z+5	; 0x05
    1256:	46 81       	ldd	r20, Z+6	; 0x06
    1258:	57 81       	ldd	r21, Z+7	; 0x07
    125a:	28 17       	cp	r18, r24
    125c:	39 07       	cpc	r19, r25
    125e:	4a 07       	cpc	r20, r26
    1260:	5b 07       	cpc	r21, r27
    1262:	18 f4       	brcc	.+6      	; 0x126a <__fpcmp_parts_f+0x8e>
    1264:	11 23       	and	r17, r17
    1266:	41 f0       	breq	.+16     	; 0x1278 <__fpcmp_parts_f+0x9c>
    1268:	0a c0       	rjmp	.+20     	; 0x127e <__fpcmp_parts_f+0xa2>
    126a:	82 17       	cp	r24, r18
    126c:	93 07       	cpc	r25, r19
    126e:	a4 07       	cpc	r26, r20
    1270:	b5 07       	cpc	r27, r21
    1272:	40 f4       	brcc	.+16     	; 0x1284 <__fpcmp_parts_f+0xa8>
    1274:	11 23       	and	r17, r17
    1276:	19 f0       	breq	.+6      	; 0x127e <__fpcmp_parts_f+0xa2>
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <__fpcmp_parts_f+0xac>
    127e:	6f ef       	ldi	r22, 0xFF	; 255
    1280:	7f ef       	ldi	r23, 0xFF	; 255
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <__fpcmp_parts_f+0xac>
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	cb 01       	movw	r24, r22
    128a:	1f 91       	pop	r17
    128c:	08 95       	ret

0000128e <DcMotor_Init>:
 */

#include "DC_motor.h"

void DcMotor_Init(void)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
	/* setup port c as output and configure pin 0 , pin 1 to the motor */

	GPIO_setupPortDirection(PORTB_ID,PORT_OUTPUT);
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	6f ef       	ldi	r22, 0xFF	; 255
    129a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <GPIO_setupPortDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN0_ID,PIN_OUTPUT);
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	41 e0       	ldi	r20, 0x01	; 1
    12a4:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN1_ID,PIN_OUTPUT);
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	61 e0       	ldi	r22, 0x01	; 1
    12ac:	41 e0       	ldi	r20, 0x01	; 1
    12ae:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>

	/* start motor with stop state */

	GPIO_writePin(PORTB_ID,PIN0_ID,LOGIC_LOW);
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	GPIO_writePin(PORTB_ID,PIN1_ID,LOGIC_LOW);
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	40 e0       	ldi	r20, 0x00	; 0
    12c2:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>

}
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	08 95       	ret

000012cc <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <DcMotor_Rotate+0x6>
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_Init(speed);
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	0e 94 9e 09 	call	0x133c	; 0x133c <PWM_Timer0_Init>
	if(state == 0){
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	88 23       	and	r24, r24
    12e4:	59 f4       	brne	.+22     	; 0x12fc <DcMotor_Rotate+0x30>
		GPIO_writePin(PORTB_ID,PIN0_ID,LOGIC_LOW);
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	40 e0       	ldi	r20, 0x00	; 0
    12ec:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
		GPIO_writePin(PORTB_ID,PIN1_ID,LOGIC_LOW);
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    12fa:	1b c0       	rjmp	.+54     	; 0x1332 <DcMotor_Rotate+0x66>
	}
	else if(state == 1){
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	59 f4       	brne	.+22     	; 0x1318 <DcMotor_Rotate+0x4c>
		GPIO_writePin(PORTB_ID,PIN0_ID,LOGIC_LOW);
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
		GPIO_writePin(PORTB_ID,PIN1_ID,LOGIC_HIGH);
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	41 e0       	ldi	r20, 0x01	; 1
    1312:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    1316:	0d c0       	rjmp	.+26     	; 0x1332 <DcMotor_Rotate+0x66>
	}
	else if(state == 2){
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	82 30       	cpi	r24, 0x02	; 2
    131c:	51 f4       	brne	.+20     	; 0x1332 <DcMotor_Rotate+0x66>
		GPIO_writePin(PORTB_ID,PIN0_ID,LOGIC_HIGH);
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	41 e0       	ldi	r20, 0x01	; 1
    1324:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
		GPIO_writePin(PORTB_ID,PIN1_ID,LOGIC_LOW);
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	61 e0       	ldi	r22, 0x01	; 1
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	}
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <PWM_Timer0_Init>:
 */

#include "PWM_signal.h"

void PWM_Timer0_Init(unsigned char set_duty_cycle)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	0f 92       	push	r0
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	89 83       	std	Y+1, r24	; 0x01
	/* configure initial value for the timer */
	TCNT0 = 0;
    1348:	e2 e5       	ldi	r30, 0x52	; 82
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	10 82       	st	Z, r1

	/* configure compare value */
	OCR0  = set_duty_cycle;
    134e:	ec e5       	ldi	r30, 0x5C	; 92
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	80 83       	st	Z, r24

	/* configure PB3 as output pin. */
	DDRB  = DDRB | (1<<PB3);
    1356:	a7 e3       	ldi	r26, 0x37	; 55
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e7 e3       	ldi	r30, 0x37	; 55
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	88 60       	ori	r24, 0x08	; 8
    1362:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1364:	e3 e5       	ldi	r30, 0x53	; 83
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	8a e6       	ldi	r24, 0x6A	; 106
    136a:	80 83       	st	Z, r24
}
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <ADC_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType * Config_Ptr){
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <ADC_init+0x6>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	9a 83       	std	Y+2, r25	; 0x02
    1380:	89 83       	std	Y+1, r24	; 0x01
	 * REFS1:0 = 11 to choose Internal 2.56V Voltage Reference with external capacitor at AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	 
	ADMUX = 0;
    1382:	e7 e2       	ldi	r30, 0x27	; 39
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	10 82       	st	Z, r1
	ADMUX |= ((Config_Ptr->ref_volt)<<6);
    1388:	a7 e2       	ldi	r26, 0x27	; 39
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e7 e2       	ldi	r30, 0x27	; 39
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	28 2f       	mov	r18, r24
    1394:	e9 81       	ldd	r30, Y+1	; 0x01
    1396:	fa 81       	ldd	r31, Y+2	; 0x02
    1398:	80 81       	ld	r24, Z
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	00 24       	eor	r0, r0
    13a0:	96 95       	lsr	r25
    13a2:	87 95       	ror	r24
    13a4:	07 94       	ror	r0
    13a6:	96 95       	lsr	r25
    13a8:	87 95       	ror	r24
    13aa:	07 94       	ror	r0
    13ac:	98 2f       	mov	r25, r24
    13ae:	80 2d       	mov	r24, r0
    13b0:	82 2b       	or	r24, r18
    13b2:	8c 93       	st	X, r24
	ADMUX |= (1<<MUX1);
    13b4:	a7 e2       	ldi	r26, 0x27	; 39
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e7 e2       	ldi	r30, 0x27	; 39
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	82 60       	ori	r24, 0x02	; 2
    13c0:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = 0;
    13c2:	e6 e2       	ldi	r30, 0x26	; 38
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN) ;
    13c8:	a6 e2       	ldi	r26, 0x26	; 38
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e6 e2       	ldi	r30, 0x26	; 38
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	80 68       	ori	r24, 0x80	; 128
    13d4:	8c 93       	st	X, r24
	ADCSRA |= (Config_Ptr->prescaler);
    13d6:	a6 e2       	ldi	r26, 0x26	; 38
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e6 e2       	ldi	r30, 0x26	; 38
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	90 81       	ld	r25, Z
    13e0:	e9 81       	ldd	r30, Y+1	; 0x01
    13e2:	fa 81       	ldd	r31, Y+2	; 0x02
    13e4:	81 81       	ldd	r24, Z+1	; 0x01
    13e6:	89 2b       	or	r24, r25
    13e8:	8c 93       	st	X, r24
}
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	0f 92       	push	r0
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	87 70       	andi	r24, 0x07	; 7
    1404:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    1406:	a7 e2       	ldi	r26, 0x27	; 39
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e7 e2       	ldi	r30, 0x27	; 39
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	80 7e       	andi	r24, 0xE0	; 224
    1412:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    1414:	a7 e2       	ldi	r26, 0x27	; 39
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e7 e2       	ldi	r30, 0x27	; 39
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	90 81       	ld	r25, Z
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	89 2b       	or	r24, r25
    1422:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
    1424:	a6 e2       	ldi	r26, 0x26	; 38
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e6 e2       	ldi	r30, 0x26	; 38
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	80 64       	ori	r24, 0x40	; 64
    1430:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
    1432:	e6 e2       	ldi	r30, 0x26	; 38
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	88 2f       	mov	r24, r24
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	80 71       	andi	r24, 0x10	; 16
    143e:	90 70       	andi	r25, 0x00	; 0
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	b9 f3       	breq	.-18     	; 0x1432 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
    1444:	a6 e2       	ldi	r26, 0x26	; 38
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e6 e2       	ldi	r30, 0x26	; 38
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	80 61       	ori	r24, 0x10	; 16
    1450:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    1452:	e4 e2       	ldi	r30, 0x24	; 36
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	91 81       	ldd	r25, Z+1	; 0x01
}
    145a:	0f 90       	pop	r0
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	00 d0       	rcall	.+0      	; 0x1468 <GPIO_setupPinDirection+0x6>
    1468:	00 d0       	rcall	.+0      	; 0x146a <GPIO_setupPinDirection+0x8>
    146a:	0f 92       	push	r0
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	6a 83       	std	Y+2, r22	; 0x02
    1474:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	88 30       	cpi	r24, 0x08	; 8
    147a:	08 f0       	brcs	.+2      	; 0x147e <GPIO_setupPinDirection+0x1c>
    147c:	d5 c0       	rjmp	.+426    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	84 30       	cpi	r24, 0x04	; 4
    1482:	08 f0       	brcs	.+2      	; 0x1486 <GPIO_setupPinDirection+0x24>
    1484:	d1 c0       	rjmp	.+418    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	3d 83       	std	Y+5, r19	; 0x05
    148e:	2c 83       	std	Y+4, r18	; 0x04
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	9d 81       	ldd	r25, Y+5	; 0x05
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	91 05       	cpc	r25, r1
    1498:	09 f4       	brne	.+2      	; 0x149c <GPIO_setupPinDirection+0x3a>
    149a:	43 c0       	rjmp	.+134    	; 0x1522 <GPIO_setupPinDirection+0xc0>
    149c:	2c 81       	ldd	r18, Y+4	; 0x04
    149e:	3d 81       	ldd	r19, Y+5	; 0x05
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	2c f4       	brge	.+10     	; 0x14b0 <GPIO_setupPinDirection+0x4e>
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	9d 81       	ldd	r25, Y+5	; 0x05
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	71 f0       	breq	.+28     	; 0x14ca <GPIO_setupPinDirection+0x68>
    14ae:	bc c0       	rjmp	.+376    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
    14b0:	2c 81       	ldd	r18, Y+4	; 0x04
    14b2:	3d 81       	ldd	r19, Y+5	; 0x05
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <GPIO_setupPinDirection+0x5a>
    14ba:	5f c0       	rjmp	.+190    	; 0x157a <GPIO_setupPinDirection+0x118>
    14bc:	8c 81       	ldd	r24, Y+4	; 0x04
    14be:	9d 81       	ldd	r25, Y+5	; 0x05
    14c0:	83 30       	cpi	r24, 0x03	; 3
    14c2:	91 05       	cpc	r25, r1
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <GPIO_setupPinDirection+0x66>
    14c6:	85 c0       	rjmp	.+266    	; 0x15d2 <GPIO_setupPinDirection+0x170>
    14c8:	af c0       	rjmp	.+350    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	a1 f4       	brne	.+40     	; 0x14f8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14d0:	aa e3       	ldi	r26, 0x3A	; 58
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ea e3       	ldi	r30, 0x3A	; 58
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	48 2f       	mov	r20, r24
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	02 2e       	mov	r0, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <GPIO_setupPinDirection+0x8c>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	0a 94       	dec	r0
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <GPIO_setupPinDirection+0x88>
    14f2:	84 2b       	or	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	98 c0       	rjmp	.+304    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    14f8:	aa e3       	ldi	r26, 0x3A	; 58
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	ea e3       	ldi	r30, 0x3A	; 58
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <GPIO_setupPinDirection+0xb4>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <GPIO_setupPinDirection+0xb0>
    151a:	80 95       	com	r24
    151c:	84 23       	and	r24, r20
    151e:	8c 93       	st	X, r24
    1520:	83 c0       	rjmp	.+262    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	a1 f4       	brne	.+40     	; 0x1550 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1528:	a7 e3       	ldi	r26, 0x37	; 55
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e7 e3       	ldi	r30, 0x37	; 55
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <GPIO_setupPinDirection+0xe4>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <GPIO_setupPinDirection+0xe0>
    154a:	84 2b       	or	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	6c c0       	rjmp	.+216    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1550:	a7 e3       	ldi	r26, 0x37	; 55
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e7 e3       	ldi	r30, 0x37	; 55
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 2e       	mov	r0, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <GPIO_setupPinDirection+0x10c>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	0a 94       	dec	r0
    1570:	e2 f7       	brpl	.-8      	; 0x156a <GPIO_setupPinDirection+0x108>
    1572:	80 95       	com	r24
    1574:	84 23       	and	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	57 c0       	rjmp	.+174    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	a1 f4       	brne	.+40     	; 0x15a8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1580:	a4 e3       	ldi	r26, 0x34	; 52
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e4 e3       	ldi	r30, 0x34	; 52
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <GPIO_setupPinDirection+0x13c>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <GPIO_setupPinDirection+0x138>
    15a2:	84 2b       	or	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	40 c0       	rjmp	.+128    	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    15a8:	a4 e3       	ldi	r26, 0x34	; 52
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e4 e3       	ldi	r30, 0x34	; 52
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <GPIO_setupPinDirection+0x164>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <GPIO_setupPinDirection+0x160>
    15ca:	80 95       	com	r24
    15cc:	84 23       	and	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	2b c0       	rjmp	.+86     	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	a1 f4       	brne	.+40     	; 0x1600 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15d8:	a1 e3       	ldi	r26, 0x31	; 49
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e1 e3       	ldi	r30, 0x31	; 49
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 2e       	mov	r0, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <GPIO_setupPinDirection+0x194>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <GPIO_setupPinDirection+0x190>
    15fa:	84 2b       	or	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	14 c0       	rjmp	.+40     	; 0x1628 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1600:	a1 e3       	ldi	r26, 0x31	; 49
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e1 e3       	ldi	r30, 0x31	; 49
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <GPIO_setupPinDirection+0x1bc>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <GPIO_setupPinDirection+0x1b8>
    1622:	80 95       	com	r24
    1624:	84 23       	and	r24, r20
    1626:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	00 d0       	rcall	.+0      	; 0x163e <GPIO_writePin+0x6>
    163e:	00 d0       	rcall	.+0      	; 0x1640 <GPIO_writePin+0x8>
    1640:	0f 92       	push	r0
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	6a 83       	std	Y+2, r22	; 0x02
    164a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	88 30       	cpi	r24, 0x08	; 8
    1650:	08 f0       	brcs	.+2      	; 0x1654 <GPIO_writePin+0x1c>
    1652:	d5 c0       	rjmp	.+426    	; 0x17fe <GPIO_writePin+0x1c6>
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	84 30       	cpi	r24, 0x04	; 4
    1658:	08 f0       	brcs	.+2      	; 0x165c <GPIO_writePin+0x24>
    165a:	d1 c0       	rjmp	.+418    	; 0x17fe <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	3d 83       	std	Y+5, r19	; 0x05
    1664:	2c 83       	std	Y+4, r18	; 0x04
    1666:	8c 81       	ldd	r24, Y+4	; 0x04
    1668:	9d 81       	ldd	r25, Y+5	; 0x05
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	91 05       	cpc	r25, r1
    166e:	09 f4       	brne	.+2      	; 0x1672 <GPIO_writePin+0x3a>
    1670:	43 c0       	rjmp	.+134    	; 0x16f8 <GPIO_writePin+0xc0>
    1672:	2c 81       	ldd	r18, Y+4	; 0x04
    1674:	3d 81       	ldd	r19, Y+5	; 0x05
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	2c f4       	brge	.+10     	; 0x1686 <GPIO_writePin+0x4e>
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	9d 81       	ldd	r25, Y+5	; 0x05
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	71 f0       	breq	.+28     	; 0x16a0 <GPIO_writePin+0x68>
    1684:	bc c0       	rjmp	.+376    	; 0x17fe <GPIO_writePin+0x1c6>
    1686:	2c 81       	ldd	r18, Y+4	; 0x04
    1688:	3d 81       	ldd	r19, Y+5	; 0x05
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	09 f4       	brne	.+2      	; 0x1692 <GPIO_writePin+0x5a>
    1690:	5f c0       	rjmp	.+190    	; 0x1750 <GPIO_writePin+0x118>
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	9d 81       	ldd	r25, Y+5	; 0x05
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	91 05       	cpc	r25, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <GPIO_writePin+0x66>
    169c:	85 c0       	rjmp	.+266    	; 0x17a8 <GPIO_writePin+0x170>
    169e:	af c0       	rjmp	.+350    	; 0x17fe <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	a1 f4       	brne	.+40     	; 0x16ce <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    16a6:	ab e3       	ldi	r26, 0x3B	; 59
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	eb e3       	ldi	r30, 0x3B	; 59
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <GPIO_writePin+0x8c>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <GPIO_writePin+0x88>
    16c8:	84 2b       	or	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	98 c0       	rjmp	.+304    	; 0x17fe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16ce:	ab e3       	ldi	r26, 0x3B	; 59
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	eb e3       	ldi	r30, 0x3B	; 59
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <GPIO_writePin+0xb4>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <GPIO_writePin+0xb0>
    16f0:	80 95       	com	r24
    16f2:	84 23       	and	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	83 c0       	rjmp	.+262    	; 0x17fe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	a1 f4       	brne	.+40     	; 0x1726 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    16fe:	a8 e3       	ldi	r26, 0x38	; 56
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e8 e3       	ldi	r30, 0x38	; 56
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <GPIO_writePin+0xe4>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <GPIO_writePin+0xe0>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	6c c0       	rjmp	.+216    	; 0x17fe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1726:	a8 e3       	ldi	r26, 0x38	; 56
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e8 e3       	ldi	r30, 0x38	; 56
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <GPIO_writePin+0x10c>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <GPIO_writePin+0x108>
    1748:	80 95       	com	r24
    174a:	84 23       	and	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	57 c0       	rjmp	.+174    	; 0x17fe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	a1 f4       	brne	.+40     	; 0x177e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1756:	a5 e3       	ldi	r26, 0x35	; 53
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e5 e3       	ldi	r30, 0x35	; 53
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 2e       	mov	r0, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <GPIO_writePin+0x13c>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	0a 94       	dec	r0
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <GPIO_writePin+0x138>
    1778:	84 2b       	or	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	40 c0       	rjmp	.+128    	; 0x17fe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    177e:	a5 e3       	ldi	r26, 0x35	; 53
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e5 e3       	ldi	r30, 0x35	; 53
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <GPIO_writePin+0x164>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <GPIO_writePin+0x160>
    17a0:	80 95       	com	r24
    17a2:	84 23       	and	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	2b c0       	rjmp	.+86     	; 0x17fe <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	a1 f4       	brne	.+40     	; 0x17d6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    17ae:	a2 e3       	ldi	r26, 0x32	; 50
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e2 e3       	ldi	r30, 0x32	; 50
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 2e       	mov	r0, r18
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <GPIO_writePin+0x194>
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <GPIO_writePin+0x190>
    17d0:	84 2b       	or	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	14 c0       	rjmp	.+40     	; 0x17fe <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17d6:	a2 e3       	ldi	r26, 0x32	; 50
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e2 e3       	ldi	r30, 0x32	; 50
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	48 2f       	mov	r20, r24
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	02 2e       	mov	r0, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <GPIO_writePin+0x1bc>
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	0a 94       	dec	r0
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <GPIO_writePin+0x1b8>
    17f8:	80 95       	com	r24
    17fa:	84 23       	and	r24, r20
    17fc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <GPIO_readPin+0x6>
    1814:	00 d0       	rcall	.+0      	; 0x1816 <GPIO_readPin+0x8>
    1816:	0f 92       	push	r0
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	8a 83       	std	Y+2, r24	; 0x02
    181e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1820:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	88 30       	cpi	r24, 0x08	; 8
    1826:	08 f0       	brcs	.+2      	; 0x182a <GPIO_readPin+0x1c>
    1828:	84 c0       	rjmp	.+264    	; 0x1932 <GPIO_readPin+0x124>
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	84 30       	cpi	r24, 0x04	; 4
    182e:	08 f0       	brcs	.+2      	; 0x1832 <GPIO_readPin+0x24>
    1830:	80 c0       	rjmp	.+256    	; 0x1932 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	3d 83       	std	Y+5, r19	; 0x05
    183a:	2c 83       	std	Y+4, r18	; 0x04
    183c:	4c 81       	ldd	r20, Y+4	; 0x04
    183e:	5d 81       	ldd	r21, Y+5	; 0x05
    1840:	41 30       	cpi	r20, 0x01	; 1
    1842:	51 05       	cpc	r21, r1
    1844:	79 f1       	breq	.+94     	; 0x18a4 <GPIO_readPin+0x96>
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
    1848:	9d 81       	ldd	r25, Y+5	; 0x05
    184a:	82 30       	cpi	r24, 0x02	; 2
    184c:	91 05       	cpc	r25, r1
    184e:	34 f4       	brge	.+12     	; 0x185c <GPIO_readPin+0x4e>
    1850:	2c 81       	ldd	r18, Y+4	; 0x04
    1852:	3d 81       	ldd	r19, Y+5	; 0x05
    1854:	21 15       	cp	r18, r1
    1856:	31 05       	cpc	r19, r1
    1858:	69 f0       	breq	.+26     	; 0x1874 <GPIO_readPin+0x66>
    185a:	6b c0       	rjmp	.+214    	; 0x1932 <GPIO_readPin+0x124>
    185c:	4c 81       	ldd	r20, Y+4	; 0x04
    185e:	5d 81       	ldd	r21, Y+5	; 0x05
    1860:	42 30       	cpi	r20, 0x02	; 2
    1862:	51 05       	cpc	r21, r1
    1864:	b9 f1       	breq	.+110    	; 0x18d4 <GPIO_readPin+0xc6>
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	91 05       	cpc	r25, r1
    186e:	09 f4       	brne	.+2      	; 0x1872 <GPIO_readPin+0x64>
    1870:	49 c0       	rjmp	.+146    	; 0x1904 <GPIO_readPin+0xf6>
    1872:	5f c0       	rjmp	.+190    	; 0x1932 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1874:	e9 e3       	ldi	r30, 0x39	; 57
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	88 2f       	mov	r24, r24
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a9 01       	movw	r20, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <GPIO_readPin+0x7e>
    1888:	55 95       	asr	r21
    188a:	47 95       	ror	r20
    188c:	8a 95       	dec	r24
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <GPIO_readPin+0x7a>
    1890:	ca 01       	movw	r24, r20
    1892:	81 70       	andi	r24, 0x01	; 1
    1894:	90 70       	andi	r25, 0x00	; 0
    1896:	88 23       	and	r24, r24
    1898:	19 f0       	breq	.+6      	; 0x18a0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	49 c0       	rjmp	.+146    	; 0x1932 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18a0:	19 82       	std	Y+1, r1	; 0x01
    18a2:	47 c0       	rjmp	.+142    	; 0x1932 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    18a4:	e6 e3       	ldi	r30, 0x36	; 54
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a9 01       	movw	r20, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <GPIO_readPin+0xae>
    18b8:	55 95       	asr	r21
    18ba:	47 95       	ror	r20
    18bc:	8a 95       	dec	r24
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <GPIO_readPin+0xaa>
    18c0:	ca 01       	movw	r24, r20
    18c2:	81 70       	andi	r24, 0x01	; 1
    18c4:	90 70       	andi	r25, 0x00	; 0
    18c6:	88 23       	and	r24, r24
    18c8:	19 f0       	breq	.+6      	; 0x18d0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	31 c0       	rjmp	.+98     	; 0x1932 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18d0:	19 82       	std	Y+1, r1	; 0x01
    18d2:	2f c0       	rjmp	.+94     	; 0x1932 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18d4:	e3 e3       	ldi	r30, 0x33	; 51
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	88 2f       	mov	r24, r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a9 01       	movw	r20, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <GPIO_readPin+0xde>
    18e8:	55 95       	asr	r21
    18ea:	47 95       	ror	r20
    18ec:	8a 95       	dec	r24
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <GPIO_readPin+0xda>
    18f0:	ca 01       	movw	r24, r20
    18f2:	81 70       	andi	r24, 0x01	; 1
    18f4:	90 70       	andi	r25, 0x00	; 0
    18f6:	88 23       	and	r24, r24
    18f8:	19 f0       	breq	.+6      	; 0x1900 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	19 c0       	rjmp	.+50     	; 0x1932 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1900:	19 82       	std	Y+1, r1	; 0x01
    1902:	17 c0       	rjmp	.+46     	; 0x1932 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1904:	e0 e3       	ldi	r30, 0x30	; 48
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	8b 81       	ldd	r24, Y+3	; 0x03
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	a9 01       	movw	r20, r18
    1916:	02 c0       	rjmp	.+4      	; 0x191c <GPIO_readPin+0x10e>
    1918:	55 95       	asr	r21
    191a:	47 95       	ror	r20
    191c:	8a 95       	dec	r24
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <GPIO_readPin+0x10a>
    1920:	ca 01       	movw	r24, r20
    1922:	81 70       	andi	r24, 0x01	; 1
    1924:	90 70       	andi	r25, 0x00	; 0
    1926:	88 23       	and	r24, r24
    1928:	19 f0       	breq	.+6      	; 0x1930 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1930:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	00 d0       	rcall	.+0      	; 0x194a <GPIO_setupPortDirection+0x6>
    194a:	00 d0       	rcall	.+0      	; 0x194c <GPIO_setupPortDirection+0x8>
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	84 30       	cpi	r24, 0x04	; 4
    1958:	90 f5       	brcc	.+100    	; 0x19be <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	3c 83       	std	Y+4, r19	; 0x04
    1962:	2b 83       	std	Y+3, r18	; 0x03
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	81 30       	cpi	r24, 0x01	; 1
    196a:	91 05       	cpc	r25, r1
    196c:	d1 f0       	breq	.+52     	; 0x19a2 <GPIO_setupPortDirection+0x5e>
    196e:	2b 81       	ldd	r18, Y+3	; 0x03
    1970:	3c 81       	ldd	r19, Y+4	; 0x04
    1972:	22 30       	cpi	r18, 0x02	; 2
    1974:	31 05       	cpc	r19, r1
    1976:	2c f4       	brge	.+10     	; 0x1982 <GPIO_setupPortDirection+0x3e>
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	61 f0       	breq	.+24     	; 0x1998 <GPIO_setupPortDirection+0x54>
    1980:	1e c0       	rjmp	.+60     	; 0x19be <GPIO_setupPortDirection+0x7a>
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    1984:	3c 81       	ldd	r19, Y+4	; 0x04
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	81 f0       	breq	.+32     	; 0x19ac <GPIO_setupPortDirection+0x68>
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	83 30       	cpi	r24, 0x03	; 3
    1992:	91 05       	cpc	r25, r1
    1994:	81 f0       	breq	.+32     	; 0x19b6 <GPIO_setupPortDirection+0x72>
    1996:	13 c0       	rjmp	.+38     	; 0x19be <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1998:	ea e3       	ldi	r30, 0x3A	; 58
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	80 83       	st	Z, r24
    19a0:	0e c0       	rjmp	.+28     	; 0x19be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19a2:	e7 e3       	ldi	r30, 0x37	; 55
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	80 83       	st	Z, r24
    19aa:	09 c0       	rjmp	.+18     	; 0x19be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19ac:	e4 e3       	ldi	r30, 0x34	; 52
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	80 83       	st	Z, r24
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19b6:	e1 e3       	ldi	r30, 0x31	; 49
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	80 83       	st	Z, r24
			break;
		}
	}
}
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <GPIO_writePort+0x6>
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <GPIO_writePort+0x8>
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	84 30       	cpi	r24, 0x04	; 4
    19e0:	90 f5       	brcc	.+100    	; 0x1a46 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	3c 83       	std	Y+4, r19	; 0x04
    19ea:	2b 83       	std	Y+3, r18	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	81 30       	cpi	r24, 0x01	; 1
    19f2:	91 05       	cpc	r25, r1
    19f4:	d1 f0       	breq	.+52     	; 0x1a2a <GPIO_writePort+0x5e>
    19f6:	2b 81       	ldd	r18, Y+3	; 0x03
    19f8:	3c 81       	ldd	r19, Y+4	; 0x04
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	2c f4       	brge	.+10     	; 0x1a0a <GPIO_writePort+0x3e>
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	61 f0       	breq	.+24     	; 0x1a20 <GPIO_writePort+0x54>
    1a08:	1e c0       	rjmp	.+60     	; 0x1a46 <GPIO_writePort+0x7a>
    1a0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0e:	22 30       	cpi	r18, 0x02	; 2
    1a10:	31 05       	cpc	r19, r1
    1a12:	81 f0       	breq	.+32     	; 0x1a34 <GPIO_writePort+0x68>
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	83 30       	cpi	r24, 0x03	; 3
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	81 f0       	breq	.+32     	; 0x1a3e <GPIO_writePort+0x72>
    1a1e:	13 c0       	rjmp	.+38     	; 0x1a46 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a20:	eb e3       	ldi	r30, 0x3B	; 59
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	80 83       	st	Z, r24
    1a28:	0e c0       	rjmp	.+28     	; 0x1a46 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a2a:	e8 e3       	ldi	r30, 0x38	; 56
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	80 83       	st	Z, r24
    1a32:	09 c0       	rjmp	.+18     	; 0x1a46 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a34:	e5 e3       	ldi	r30, 0x35	; 53
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	80 83       	st	Z, r24
    1a3c:	04 c0       	rjmp	.+8      	; 0x1a46 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a3e:	e2 e3       	ldi	r30, 0x32	; 50
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <GPIO_readPort+0x6>
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <GPIO_readPort+0x8>
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a62:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	84 30       	cpi	r24, 0x04	; 4
    1a68:	90 f5       	brcc	.+100    	; 0x1ace <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	3c 83       	std	Y+4, r19	; 0x04
    1a72:	2b 83       	std	Y+3, r18	; 0x03
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	d1 f0       	breq	.+52     	; 0x1ab2 <GPIO_readPort+0x5e>
    1a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a80:	3c 81       	ldd	r19, Y+4	; 0x04
    1a82:	22 30       	cpi	r18, 0x02	; 2
    1a84:	31 05       	cpc	r19, r1
    1a86:	2c f4       	brge	.+10     	; 0x1a92 <GPIO_readPort+0x3e>
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	61 f0       	breq	.+24     	; 0x1aa8 <GPIO_readPort+0x54>
    1a90:	1e c0       	rjmp	.+60     	; 0x1ace <GPIO_readPort+0x7a>
    1a92:	2b 81       	ldd	r18, Y+3	; 0x03
    1a94:	3c 81       	ldd	r19, Y+4	; 0x04
    1a96:	22 30       	cpi	r18, 0x02	; 2
    1a98:	31 05       	cpc	r19, r1
    1a9a:	81 f0       	breq	.+32     	; 0x1abc <GPIO_readPort+0x68>
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	83 30       	cpi	r24, 0x03	; 3
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	81 f0       	breq	.+32     	; 0x1ac6 <GPIO_readPort+0x72>
    1aa6:	13 c0       	rjmp	.+38     	; 0x1ace <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1aa8:	e9 e3       	ldi	r30, 0x39	; 57
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	0e c0       	rjmp	.+28     	; 0x1ace <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ab2:	e6 e3       	ldi	r30, 0x36	; 54
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	09 c0       	rjmp	.+18     	; 0x1ace <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1abc:	e3 e3       	ldi	r30, 0x33	; 51
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	04 c0       	rjmp	.+8      	; 0x1ace <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ac6:	e0 e3       	ldi	r30, 0x30	; 48
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1ae6:	83 e0       	ldi	r24, 0x03	; 3
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1af0:	83 e0       	ldi	r24, 0x03	; 3
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	41 e0       	ldi	r20, 0x01	; 1
    1af6:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	62 e0       	ldi	r22, 0x02	; 2
    1afe:	41 e0       	ldi	r20, 0x01	; 1
    1b00:	0e 94 31 0a 	call	0x1462	; 0x1462 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1b04:	82 e0       	ldi	r24, 0x02	; 2
    1b06:	6f ef       	ldi	r22, 0xFF	; 255
    1b08:	0e 94 a2 0c 	call	0x1944	; 0x1944 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1b0c:	88 e3       	ldi	r24, 0x38	; 56
    1b0e:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1b12:	8c e0       	ldi	r24, 0x0C	; 12
    1b14:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <LCD_sendCommand>
}
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	ea 97       	sbiw	r28, 0x3a	; 58
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1b3a:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1b3c:	83 e0       	ldi	r24, 0x03	; 3
    1b3e:	60 e0       	ldi	r22, 0x00	; 0
    1b40:	40 e0       	ldi	r20, 0x00	; 0
    1b42:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	61 e0       	ldi	r22, 0x01	; 1
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a0 e8       	ldi	r26, 0x80	; 128
    1b56:	bf e3       	ldi	r27, 0x3F	; 63
    1b58:	8d ab       	std	Y+53, r24	; 0x35
    1b5a:	9e ab       	std	Y+54, r25	; 0x36
    1b5c:	af ab       	std	Y+55, r26	; 0x37
    1b5e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b60:	6d a9       	ldd	r22, Y+53	; 0x35
    1b62:	7e a9       	ldd	r23, Y+54	; 0x36
    1b64:	8f a9       	ldd	r24, Y+55	; 0x37
    1b66:	98 ad       	ldd	r25, Y+56	; 0x38
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	4a e7       	ldi	r20, 0x7A	; 122
    1b6e:	53 e4       	ldi	r21, 0x43	; 67
    1b70:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	89 ab       	std	Y+49, r24	; 0x31
    1b7a:	9a ab       	std	Y+50, r25	; 0x32
    1b7c:	ab ab       	std	Y+51, r26	; 0x33
    1b7e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b80:	69 a9       	ldd	r22, Y+49	; 0x31
    1b82:	7a a9       	ldd	r23, Y+50	; 0x32
    1b84:	8b a9       	ldd	r24, Y+51	; 0x33
    1b86:	9c a9       	ldd	r25, Y+52	; 0x34
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f e3       	ldi	r21, 0x3F	; 63
    1b90:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	98 ab       	std	Y+48, r25	; 0x30
    1b9e:	8f a7       	std	Y+47, r24	; 0x2f
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1ba2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba8:	9c a9       	ldd	r25, Y+52	; 0x34
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	3f ef       	ldi	r19, 0xFF	; 255
    1bae:	4f e7       	ldi	r20, 0x7F	; 127
    1bb0:	57 e4       	ldi	r21, 0x47	; 71
    1bb2:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	4c f5       	brge	.+82     	; 0x1c0c <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bba:	6d a9       	ldd	r22, Y+53	; 0x35
    1bbc:	7e a9       	ldd	r23, Y+54	; 0x36
    1bbe:	8f a9       	ldd	r24, Y+55	; 0x37
    1bc0:	98 ad       	ldd	r25, Y+56	; 0x38
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e2       	ldi	r20, 0x20	; 32
    1bc8:	51 e4       	ldi	r21, 0x41	; 65
    1bca:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	98 ab       	std	Y+48, r25	; 0x30
    1be0:	8f a7       	std	Y+47, r24	; 0x2f
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <LCD_sendCommand+0xde>
    1be4:	89 e1       	ldi	r24, 0x19	; 25
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9e a7       	std	Y+46, r25	; 0x2e
    1bea:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bec:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bee:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_sendCommand+0xcc>
    1bf4:	9e a7       	std	Y+46, r25	; 0x2e
    1bf6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bfa:	98 a9       	ldd	r25, Y+48	; 0x30
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	98 ab       	std	Y+48, r25	; 0x30
    1c00:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c04:	98 a9       	ldd	r25, Y+48	; 0x30
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	69 f7       	brne	.-38     	; 0x1be4 <LCD_sendCommand+0xc0>
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c10:	8b a9       	ldd	r24, Y+51	; 0x33
    1c12:	9c a9       	ldd	r25, Y+52	; 0x34
    1c14:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	98 ab       	std	Y+48, r25	; 0x30
    1c1e:	8f a7       	std	Y+47, r24	; 0x2f
    1c20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c22:	98 a9       	ldd	r25, Y+48	; 0x30
    1c24:	9c a7       	std	Y+44, r25	; 0x2c
    1c26:	8b a7       	std	Y+43, r24	; 0x2b
    1c28:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <LCD_sendCommand+0x108>
    1c30:	9c a7       	std	Y+44, r25	; 0x2c
    1c32:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	62 e0       	ldi	r22, 0x02	; 2
    1c38:	41 e0       	ldi	r20, 0x01	; 1
    1c3a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	a0 e8       	ldi	r26, 0x80	; 128
    1c44:	bf e3       	ldi	r27, 0x3F	; 63
    1c46:	8f a3       	std	Y+39, r24	; 0x27
    1c48:	98 a7       	std	Y+40, r25	; 0x28
    1c4a:	a9 a7       	std	Y+41, r26	; 0x29
    1c4c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4e:	6f a1       	ldd	r22, Y+39	; 0x27
    1c50:	78 a5       	ldd	r23, Y+40	; 0x28
    1c52:	89 a5       	ldd	r24, Y+41	; 0x29
    1c54:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4a e7       	ldi	r20, 0x7A	; 122
    1c5c:	53 e4       	ldi	r21, 0x43	; 67
    1c5e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	8b a3       	std	Y+35, r24	; 0x23
    1c68:	9c a3       	std	Y+36, r25	; 0x24
    1c6a:	ad a3       	std	Y+37, r26	; 0x25
    1c6c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c70:	7c a1       	ldd	r23, Y+36	; 0x24
    1c72:	8d a1       	ldd	r24, Y+37	; 0x25
    1c74:	9e a1       	ldd	r25, Y+38	; 0x26
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e8       	ldi	r20, 0x80	; 128
    1c7c:	5f e3       	ldi	r21, 0x3F	; 63
    1c7e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    1c82:	88 23       	and	r24, r24
    1c84:	2c f4       	brge	.+10     	; 0x1c90 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9a a3       	std	Y+34, r25	; 0x22
    1c8c:	89 a3       	std	Y+33, r24	; 0x21
    1c8e:	3f c0       	rjmp	.+126    	; 0x1d0e <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1c90:	6b a1       	ldd	r22, Y+35	; 0x23
    1c92:	7c a1       	ldd	r23, Y+36	; 0x24
    1c94:	8d a1       	ldd	r24, Y+37	; 0x25
    1c96:	9e a1       	ldd	r25, Y+38	; 0x26
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	3f ef       	ldi	r19, 0xFF	; 255
    1c9c:	4f e7       	ldi	r20, 0x7F	; 127
    1c9e:	57 e4       	ldi	r21, 0x47	; 71
    1ca0:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    1ca4:	18 16       	cp	r1, r24
    1ca6:	4c f5       	brge	.+82     	; 0x1cfa <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca8:	6f a1       	ldd	r22, Y+39	; 0x27
    1caa:	78 a5       	ldd	r23, Y+40	; 0x28
    1cac:	89 a5       	ldd	r24, Y+41	; 0x29
    1cae:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e2       	ldi	r20, 0x20	; 32
    1cb6:	51 e4       	ldi	r21, 0x41	; 65
    1cb8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	9a a3       	std	Y+34, r25	; 0x22
    1cce:	89 a3       	std	Y+33, r24	; 0x21
    1cd0:	0f c0       	rjmp	.+30     	; 0x1cf0 <LCD_sendCommand+0x1cc>
    1cd2:	89 e1       	ldi	r24, 0x19	; 25
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	98 a3       	std	Y+32, r25	; 0x20
    1cd8:	8f 8f       	std	Y+31, r24	; 0x1f
    1cda:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cdc:	98 a1       	ldd	r25, Y+32	; 0x20
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <LCD_sendCommand+0x1ba>
    1ce2:	98 a3       	std	Y+32, r25	; 0x20
    1ce4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce8:	9a a1       	ldd	r25, Y+34	; 0x22
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	9a a3       	std	Y+34, r25	; 0x22
    1cee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf0:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf2:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	69 f7       	brne	.-38     	; 0x1cd2 <LCD_sendCommand+0x1ae>
    1cf8:	14 c0       	rjmp	.+40     	; 0x1d22 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfa:	6b a1       	ldd	r22, Y+35	; 0x23
    1cfc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1d00:	9e a1       	ldd	r25, Y+38	; 0x26
    1d02:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	9a a3       	std	Y+34, r25	; 0x22
    1d0c:	89 a3       	std	Y+33, r24	; 0x21
    1d0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d10:	9a a1       	ldd	r25, Y+34	; 0x22
    1d12:	9e 8f       	std	Y+30, r25	; 0x1e
    1d14:	8d 8f       	std	Y+29, r24	; 0x1d
    1d16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <LCD_sendCommand+0x1f6>
    1d1e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d20:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	6a ad       	ldd	r22, Y+58	; 0x3a
    1d26:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <GPIO_writePort>
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a0 e8       	ldi	r26, 0x80	; 128
    1d30:	bf e3       	ldi	r27, 0x3F	; 63
    1d32:	89 8f       	std	Y+25, r24	; 0x19
    1d34:	9a 8f       	std	Y+26, r25	; 0x1a
    1d36:	ab 8f       	std	Y+27, r26	; 0x1b
    1d38:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	4a e7       	ldi	r20, 0x7A	; 122
    1d48:	53 e4       	ldi	r21, 0x43	; 67
    1d4a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	8d 8b       	std	Y+21, r24	; 0x15
    1d54:	9e 8b       	std	Y+22, r25	; 0x16
    1d56:	af 8b       	std	Y+23, r26	; 0x17
    1d58:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d60:	98 8d       	ldd	r25, Y+24	; 0x18
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e8       	ldi	r20, 0x80	; 128
    1d68:	5f e3       	ldi	r21, 0x3F	; 63
    1d6a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    1d6e:	88 23       	and	r24, r24
    1d70:	2c f4       	brge	.+10     	; 0x1d7c <LCD_sendCommand+0x258>
		__ticks = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9c 8b       	std	Y+20, r25	; 0x14
    1d78:	8b 8b       	std	Y+19, r24	; 0x13
    1d7a:	3f c0       	rjmp	.+126    	; 0x1dfa <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1d7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d80:	8f 89       	ldd	r24, Y+23	; 0x17
    1d82:	98 8d       	ldd	r25, Y+24	; 0x18
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	3f ef       	ldi	r19, 0xFF	; 255
    1d88:	4f e7       	ldi	r20, 0x7F	; 127
    1d8a:	57 e4       	ldi	r21, 0x47	; 71
    1d8c:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    1d90:	18 16       	cp	r1, r24
    1d92:	4c f5       	brge	.+82     	; 0x1de6 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d94:	69 8d       	ldd	r22, Y+25	; 0x19
    1d96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e2       	ldi	r20, 0x20	; 32
    1da2:	51 e4       	ldi	r21, 0x41	; 65
    1da4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	bc 01       	movw	r22, r24
    1dae:	cd 01       	movw	r24, r26
    1db0:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	9c 8b       	std	Y+20, r25	; 0x14
    1dba:	8b 8b       	std	Y+19, r24	; 0x13
    1dbc:	0f c0       	rjmp	.+30     	; 0x1ddc <LCD_sendCommand+0x2b8>
    1dbe:	89 e1       	ldi	r24, 0x19	; 25
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	9a 8b       	std	Y+18, r25	; 0x12
    1dc4:	89 8b       	std	Y+17, r24	; 0x11
    1dc6:	89 89       	ldd	r24, Y+17	; 0x11
    1dc8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <LCD_sendCommand+0x2a6>
    1dce:	9a 8b       	std	Y+18, r25	; 0x12
    1dd0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	9c 8b       	std	Y+20, r25	; 0x14
    1dda:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ddc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dde:	9c 89       	ldd	r25, Y+20	; 0x14
    1de0:	00 97       	sbiw	r24, 0x00	; 0
    1de2:	69 f7       	brne	.-38     	; 0x1dbe <LCD_sendCommand+0x29a>
    1de4:	14 c0       	rjmp	.+40     	; 0x1e0e <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de6:	6d 89       	ldd	r22, Y+21	; 0x15
    1de8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dea:	8f 89       	ldd	r24, Y+23	; 0x17
    1dec:	98 8d       	ldd	r25, Y+24	; 0x18
    1dee:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9c 8b       	std	Y+20, r25	; 0x14
    1df8:	8b 8b       	std	Y+19, r24	; 0x13
    1dfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfe:	98 8b       	std	Y+16, r25	; 0x10
    1e00:	8f 87       	std	Y+15, r24	; 0x0f
    1e02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e04:	98 89       	ldd	r25, Y+16	; 0x10
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	f1 f7       	brne	.-4      	; 0x1e06 <LCD_sendCommand+0x2e2>
    1e0a:	98 8b       	std	Y+16, r25	; 0x10
    1e0c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e0e:	83 e0       	ldi	r24, 0x03	; 3
    1e10:	62 e0       	ldi	r22, 0x02	; 2
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	a0 e8       	ldi	r26, 0x80	; 128
    1e1e:	bf e3       	ldi	r27, 0x3F	; 63
    1e20:	8b 87       	std	Y+11, r24	; 0x0b
    1e22:	9c 87       	std	Y+12, r25	; 0x0c
    1e24:	ad 87       	std	Y+13, r26	; 0x0d
    1e26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a e7       	ldi	r20, 0x7A	; 122
    1e36:	53 e4       	ldi	r21, 0x43	; 67
    1e38:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	8f 83       	std	Y+7, r24	; 0x07
    1e42:	98 87       	std	Y+8, r25	; 0x08
    1e44:	a9 87       	std	Y+9, r26	; 0x09
    1e46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e48:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4a:	78 85       	ldd	r23, Y+8	; 0x08
    1e4c:	89 85       	ldd	r24, Y+9	; 0x09
    1e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e8       	ldi	r20, 0x80	; 128
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    1e5c:	88 23       	and	r24, r24
    1e5e:	2c f4       	brge	.+10     	; 0x1e6a <LCD_sendCommand+0x346>
		__ticks = 1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9e 83       	std	Y+6, r25	; 0x06
    1e66:	8d 83       	std	Y+5, r24	; 0x05
    1e68:	3f c0       	rjmp	.+126    	; 0x1ee8 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    1e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6c:	78 85       	ldd	r23, Y+8	; 0x08
    1e6e:	89 85       	ldd	r24, Y+9	; 0x09
    1e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	3f ef       	ldi	r19, 0xFF	; 255
    1e76:	4f e7       	ldi	r20, 0x7F	; 127
    1e78:	57 e4       	ldi	r21, 0x47	; 71
    1e7a:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	4c f5       	brge	.+82     	; 0x1ed4 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e2       	ldi	r20, 0x20	; 32
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9e 83       	std	Y+6, r25	; 0x06
    1ea8:	8d 83       	std	Y+5, r24	; 0x05
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <LCD_sendCommand+0x3a6>
    1eac:	89 e1       	ldi	r24, 0x19	; 25
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9c 83       	std	Y+4, r25	; 0x04
    1eb2:	8b 83       	std	Y+3, r24	; 0x03
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <LCD_sendCommand+0x394>
    1ebc:	9c 83       	std	Y+4, r25	; 0x04
    1ebe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	69 f7       	brne	.-38     	; 0x1eac <LCD_sendCommand+0x388>
    1ed2:	14 c0       	rjmp	.+40     	; 0x1efc <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed6:	78 85       	ldd	r23, Y+8	; 0x08
    1ed8:	89 85       	ldd	r24, Y+9	; 0x09
    1eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1edc:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eea:	9e 81       	ldd	r25, Y+6	; 0x06
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <LCD_sendCommand+0x3d0>
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1efc:	ea 96       	adiw	r28, 0x3a	; 58
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	ea 97       	sbiw	r28, 0x3a	; 58
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1f24:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1f26:	83 e0       	ldi	r24, 0x03	; 3
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	41 e0       	ldi	r20, 0x01	; 1
    1f2c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1f30:	83 e0       	ldi	r24, 0x03	; 3
    1f32:	61 e0       	ldi	r22, 0x01	; 1
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	a0 e8       	ldi	r26, 0x80	; 128
    1f40:	bf e3       	ldi	r27, 0x3F	; 63
    1f42:	8d ab       	std	Y+53, r24	; 0x35
    1f44:	9e ab       	std	Y+54, r25	; 0x36
    1f46:	af ab       	std	Y+55, r26	; 0x37
    1f48:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f4c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f4e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f50:	98 ad       	ldd	r25, Y+56	; 0x38
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4a e7       	ldi	r20, 0x7A	; 122
    1f58:	53 e4       	ldi	r21, 0x43	; 67
    1f5a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	89 ab       	std	Y+49, r24	; 0x31
    1f64:	9a ab       	std	Y+50, r25	; 0x32
    1f66:	ab ab       	std	Y+51, r26	; 0x33
    1f68:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f70:	9c a9       	ldd	r25, Y+52	; 0x34
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e8       	ldi	r20, 0x80	; 128
    1f78:	5f e3       	ldi	r21, 0x3F	; 63
    1f7a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    1f7e:	88 23       	and	r24, r24
    1f80:	2c f4       	brge	.+10     	; 0x1f8c <LCD_displayCharacter+0x7e>
		__ticks = 1;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	98 ab       	std	Y+48, r25	; 0x30
    1f88:	8f a7       	std	Y+47, r24	; 0x2f
    1f8a:	3f c0       	rjmp	.+126    	; 0x200a <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    1f8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f90:	8b a9       	ldd	r24, Y+51	; 0x33
    1f92:	9c a9       	ldd	r25, Y+52	; 0x34
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	3f ef       	ldi	r19, 0xFF	; 255
    1f98:	4f e7       	ldi	r20, 0x7F	; 127
    1f9a:	57 e4       	ldi	r21, 0x47	; 71
    1f9c:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    1fa0:	18 16       	cp	r1, r24
    1fa2:	4c f5       	brge	.+82     	; 0x1ff6 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa4:	6d a9       	ldd	r22, Y+53	; 0x35
    1fa6:	7e a9       	ldd	r23, Y+54	; 0x36
    1fa8:	8f a9       	ldd	r24, Y+55	; 0x37
    1faa:	98 ad       	ldd	r25, Y+56	; 0x38
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e2       	ldi	r20, 0x20	; 32
    1fb2:	51 e4       	ldi	r21, 0x41	; 65
    1fb4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	98 ab       	std	Y+48, r25	; 0x30
    1fca:	8f a7       	std	Y+47, r24	; 0x2f
    1fcc:	0f c0       	rjmp	.+30     	; 0x1fec <LCD_displayCharacter+0xde>
    1fce:	89 e1       	ldi	r24, 0x19	; 25
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9e a7       	std	Y+46, r25	; 0x2e
    1fd4:	8d a7       	std	Y+45, r24	; 0x2d
    1fd6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fd8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_displayCharacter+0xcc>
    1fde:	9e a7       	std	Y+46, r25	; 0x2e
    1fe0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	98 ab       	std	Y+48, r25	; 0x30
    1fea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fee:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <LCD_displayCharacter+0xc0>
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ff8:	7a a9       	ldd	r23, Y+50	; 0x32
    1ffa:	8b a9       	ldd	r24, Y+51	; 0x33
    1ffc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ffe:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	98 ab       	std	Y+48, r25	; 0x30
    2008:	8f a7       	std	Y+47, r24	; 0x2f
    200a:	8f a5       	ldd	r24, Y+47	; 0x2f
    200c:	98 a9       	ldd	r25, Y+48	; 0x30
    200e:	9c a7       	std	Y+44, r25	; 0x2c
    2010:	8b a7       	std	Y+43, r24	; 0x2b
    2012:	8b a5       	ldd	r24, Y+43	; 0x2b
    2014:	9c a5       	ldd	r25, Y+44	; 0x2c
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <LCD_displayCharacter+0x108>
    201a:	9c a7       	std	Y+44, r25	; 0x2c
    201c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    201e:	83 e0       	ldi	r24, 0x03	; 3
    2020:	62 e0       	ldi	r22, 0x02	; 2
    2022:	41 e0       	ldi	r20, 0x01	; 1
    2024:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	a0 e8       	ldi	r26, 0x80	; 128
    202e:	bf e3       	ldi	r27, 0x3F	; 63
    2030:	8f a3       	std	Y+39, r24	; 0x27
    2032:	98 a7       	std	Y+40, r25	; 0x28
    2034:	a9 a7       	std	Y+41, r26	; 0x29
    2036:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2038:	6f a1       	ldd	r22, Y+39	; 0x27
    203a:	78 a5       	ldd	r23, Y+40	; 0x28
    203c:	89 a5       	ldd	r24, Y+41	; 0x29
    203e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	4a e7       	ldi	r20, 0x7A	; 122
    2046:	53 e4       	ldi	r21, 0x43	; 67
    2048:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	8b a3       	std	Y+35, r24	; 0x23
    2052:	9c a3       	std	Y+36, r25	; 0x24
    2054:	ad a3       	std	Y+37, r26	; 0x25
    2056:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2058:	6b a1       	ldd	r22, Y+35	; 0x23
    205a:	7c a1       	ldd	r23, Y+36	; 0x24
    205c:	8d a1       	ldd	r24, Y+37	; 0x25
    205e:	9e a1       	ldd	r25, Y+38	; 0x26
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e8       	ldi	r20, 0x80	; 128
    2066:	5f e3       	ldi	r21, 0x3F	; 63
    2068:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    206c:	88 23       	and	r24, r24
    206e:	2c f4       	brge	.+10     	; 0x207a <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	9a a3       	std	Y+34, r25	; 0x22
    2076:	89 a3       	std	Y+33, r24	; 0x21
    2078:	3f c0       	rjmp	.+126    	; 0x20f8 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    207a:	6b a1       	ldd	r22, Y+35	; 0x23
    207c:	7c a1       	ldd	r23, Y+36	; 0x24
    207e:	8d a1       	ldd	r24, Y+37	; 0x25
    2080:	9e a1       	ldd	r25, Y+38	; 0x26
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	3f ef       	ldi	r19, 0xFF	; 255
    2086:	4f e7       	ldi	r20, 0x7F	; 127
    2088:	57 e4       	ldi	r21, 0x47	; 71
    208a:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    208e:	18 16       	cp	r1, r24
    2090:	4c f5       	brge	.+82     	; 0x20e4 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2092:	6f a1       	ldd	r22, Y+39	; 0x27
    2094:	78 a5       	ldd	r23, Y+40	; 0x28
    2096:	89 a5       	ldd	r24, Y+41	; 0x29
    2098:	9a a5       	ldd	r25, Y+42	; 0x2a
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e2       	ldi	r20, 0x20	; 32
    20a0:	51 e4       	ldi	r21, 0x41	; 65
    20a2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9a a3       	std	Y+34, r25	; 0x22
    20b8:	89 a3       	std	Y+33, r24	; 0x21
    20ba:	0f c0       	rjmp	.+30     	; 0x20da <LCD_displayCharacter+0x1cc>
    20bc:	89 e1       	ldi	r24, 0x19	; 25
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	98 a3       	std	Y+32, r25	; 0x20
    20c2:	8f 8f       	std	Y+31, r24	; 0x1f
    20c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20c6:	98 a1       	ldd	r25, Y+32	; 0x20
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <LCD_displayCharacter+0x1ba>
    20cc:	98 a3       	std	Y+32, r25	; 0x20
    20ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d0:	89 a1       	ldd	r24, Y+33	; 0x21
    20d2:	9a a1       	ldd	r25, Y+34	; 0x22
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	9a a3       	std	Y+34, r25	; 0x22
    20d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20da:	89 a1       	ldd	r24, Y+33	; 0x21
    20dc:	9a a1       	ldd	r25, Y+34	; 0x22
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	69 f7       	brne	.-38     	; 0x20bc <LCD_displayCharacter+0x1ae>
    20e2:	14 c0       	rjmp	.+40     	; 0x210c <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e4:	6b a1       	ldd	r22, Y+35	; 0x23
    20e6:	7c a1       	ldd	r23, Y+36	; 0x24
    20e8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ea:	9e a1       	ldd	r25, Y+38	; 0x26
    20ec:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	9a a3       	std	Y+34, r25	; 0x22
    20f6:	89 a3       	std	Y+33, r24	; 0x21
    20f8:	89 a1       	ldd	r24, Y+33	; 0x21
    20fa:	9a a1       	ldd	r25, Y+34	; 0x22
    20fc:	9e 8f       	std	Y+30, r25	; 0x1e
    20fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2100:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2102:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <LCD_displayCharacter+0x1f6>
    2108:	9e 8f       	std	Y+30, r25	; 0x1e
    210a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    210c:	82 e0       	ldi	r24, 0x02	; 2
    210e:	6a ad       	ldd	r22, Y+58	; 0x3a
    2110:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <GPIO_writePort>
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	a0 e8       	ldi	r26, 0x80	; 128
    211a:	bf e3       	ldi	r27, 0x3F	; 63
    211c:	89 8f       	std	Y+25, r24	; 0x19
    211e:	9a 8f       	std	Y+26, r25	; 0x1a
    2120:	ab 8f       	std	Y+27, r26	; 0x1b
    2122:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2124:	69 8d       	ldd	r22, Y+25	; 0x19
    2126:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2128:	8b 8d       	ldd	r24, Y+27	; 0x1b
    212a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	4a e7       	ldi	r20, 0x7A	; 122
    2132:	53 e4       	ldi	r21, 0x43	; 67
    2134:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	8d 8b       	std	Y+21, r24	; 0x15
    213e:	9e 8b       	std	Y+22, r25	; 0x16
    2140:	af 8b       	std	Y+23, r26	; 0x17
    2142:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2144:	6d 89       	ldd	r22, Y+21	; 0x15
    2146:	7e 89       	ldd	r23, Y+22	; 0x16
    2148:	8f 89       	ldd	r24, Y+23	; 0x17
    214a:	98 8d       	ldd	r25, Y+24	; 0x18
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e8       	ldi	r20, 0x80	; 128
    2152:	5f e3       	ldi	r21, 0x3F	; 63
    2154:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    2158:	88 23       	and	r24, r24
    215a:	2c f4       	brge	.+10     	; 0x2166 <LCD_displayCharacter+0x258>
		__ticks = 1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	9c 8b       	std	Y+20, r25	; 0x14
    2162:	8b 8b       	std	Y+19, r24	; 0x13
    2164:	3f c0       	rjmp	.+126    	; 0x21e4 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2166:	6d 89       	ldd	r22, Y+21	; 0x15
    2168:	7e 89       	ldd	r23, Y+22	; 0x16
    216a:	8f 89       	ldd	r24, Y+23	; 0x17
    216c:	98 8d       	ldd	r25, Y+24	; 0x18
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	3f ef       	ldi	r19, 0xFF	; 255
    2172:	4f e7       	ldi	r20, 0x7F	; 127
    2174:	57 e4       	ldi	r21, 0x47	; 71
    2176:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    217a:	18 16       	cp	r1, r24
    217c:	4c f5       	brge	.+82     	; 0x21d0 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217e:	69 8d       	ldd	r22, Y+25	; 0x19
    2180:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e2       	ldi	r20, 0x20	; 32
    218c:	51 e4       	ldi	r21, 0x41	; 65
    218e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	9c 8b       	std	Y+20, r25	; 0x14
    21a4:	8b 8b       	std	Y+19, r24	; 0x13
    21a6:	0f c0       	rjmp	.+30     	; 0x21c6 <LCD_displayCharacter+0x2b8>
    21a8:	89 e1       	ldi	r24, 0x19	; 25
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9a 8b       	std	Y+18, r25	; 0x12
    21ae:	89 8b       	std	Y+17, r24	; 0x11
    21b0:	89 89       	ldd	r24, Y+17	; 0x11
    21b2:	9a 89       	ldd	r25, Y+18	; 0x12
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_displayCharacter+0x2a6>
    21b8:	9a 8b       	std	Y+18, r25	; 0x12
    21ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21bc:	8b 89       	ldd	r24, Y+19	; 0x13
    21be:	9c 89       	ldd	r25, Y+20	; 0x14
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	9c 8b       	std	Y+20, r25	; 0x14
    21c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c6:	8b 89       	ldd	r24, Y+19	; 0x13
    21c8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	69 f7       	brne	.-38     	; 0x21a8 <LCD_displayCharacter+0x29a>
    21ce:	14 c0       	rjmp	.+40     	; 0x21f8 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d0:	6d 89       	ldd	r22, Y+21	; 0x15
    21d2:	7e 89       	ldd	r23, Y+22	; 0x16
    21d4:	8f 89       	ldd	r24, Y+23	; 0x17
    21d6:	98 8d       	ldd	r25, Y+24	; 0x18
    21d8:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	9c 8b       	std	Y+20, r25	; 0x14
    21e2:	8b 8b       	std	Y+19, r24	; 0x13
    21e4:	8b 89       	ldd	r24, Y+19	; 0x13
    21e6:	9c 89       	ldd	r25, Y+20	; 0x14
    21e8:	98 8b       	std	Y+16, r25	; 0x10
    21ea:	8f 87       	std	Y+15, r24	; 0x0f
    21ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ee:	98 89       	ldd	r25, Y+16	; 0x10
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <LCD_displayCharacter+0x2e2>
    21f4:	98 8b       	std	Y+16, r25	; 0x10
    21f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    21f8:	83 e0       	ldi	r24, 0x03	; 3
    21fa:	62 e0       	ldi	r22, 0x02	; 2
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	0e 94 1c 0b 	call	0x1638	; 0x1638 <GPIO_writePin>
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	a0 e8       	ldi	r26, 0x80	; 128
    2208:	bf e3       	ldi	r27, 0x3F	; 63
    220a:	8b 87       	std	Y+11, r24	; 0x0b
    220c:	9c 87       	std	Y+12, r25	; 0x0c
    220e:	ad 87       	std	Y+13, r26	; 0x0d
    2210:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2212:	6b 85       	ldd	r22, Y+11	; 0x0b
    2214:	7c 85       	ldd	r23, Y+12	; 0x0c
    2216:	8d 85       	ldd	r24, Y+13	; 0x0d
    2218:	9e 85       	ldd	r25, Y+14	; 0x0e
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	4a e7       	ldi	r20, 0x7A	; 122
    2220:	53 e4       	ldi	r21, 0x43	; 67
    2222:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	8f 83       	std	Y+7, r24	; 0x07
    222c:	98 87       	std	Y+8, r25	; 0x08
    222e:	a9 87       	std	Y+9, r26	; 0x09
    2230:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2232:	6f 81       	ldd	r22, Y+7	; 0x07
    2234:	78 85       	ldd	r23, Y+8	; 0x08
    2236:	89 85       	ldd	r24, Y+9	; 0x09
    2238:	9a 85       	ldd	r25, Y+10	; 0x0a
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e8       	ldi	r20, 0x80	; 128
    2240:	5f e3       	ldi	r21, 0x3F	; 63
    2242:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    2246:	88 23       	and	r24, r24
    2248:	2c f4       	brge	.+10     	; 0x2254 <LCD_displayCharacter+0x346>
		__ticks = 1;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	9e 83       	std	Y+6, r25	; 0x06
    2250:	8d 83       	std	Y+5, r24	; 0x05
    2252:	3f c0       	rjmp	.+126    	; 0x22d2 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2254:	6f 81       	ldd	r22, Y+7	; 0x07
    2256:	78 85       	ldd	r23, Y+8	; 0x08
    2258:	89 85       	ldd	r24, Y+9	; 0x09
    225a:	9a 85       	ldd	r25, Y+10	; 0x0a
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	3f ef       	ldi	r19, 0xFF	; 255
    2260:	4f e7       	ldi	r20, 0x7F	; 127
    2262:	57 e4       	ldi	r21, 0x47	; 71
    2264:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    2268:	18 16       	cp	r1, r24
    226a:	4c f5       	brge	.+82     	; 0x22be <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226c:	6b 85       	ldd	r22, Y+11	; 0x0b
    226e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2270:	8d 85       	ldd	r24, Y+13	; 0x0d
    2272:	9e 85       	ldd	r25, Y+14	; 0x0e
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e2       	ldi	r20, 0x20	; 32
    227a:	51 e4       	ldi	r21, 0x41	; 65
    227c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	bc 01       	movw	r22, r24
    2286:	cd 01       	movw	r24, r26
    2288:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
    2294:	0f c0       	rjmp	.+30     	; 0x22b4 <LCD_displayCharacter+0x3a6>
    2296:	89 e1       	ldi	r24, 0x19	; 25
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	9c 83       	std	Y+4, r25	; 0x04
    229c:	8b 83       	std	Y+3, r24	; 0x03
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	9c 81       	ldd	r25, Y+4	; 0x04
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <LCD_displayCharacter+0x394>
    22a6:	9c 83       	std	Y+4, r25	; 0x04
    22a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	9e 81       	ldd	r25, Y+6	; 0x06
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	9e 83       	std	Y+6, r25	; 0x06
    22b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b4:	8d 81       	ldd	r24, Y+5	; 0x05
    22b6:	9e 81       	ldd	r25, Y+6	; 0x06
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	69 f7       	brne	.-38     	; 0x2296 <LCD_displayCharacter+0x388>
    22bc:	14 c0       	rjmp	.+40     	; 0x22e6 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22be:	6f 81       	ldd	r22, Y+7	; 0x07
    22c0:	78 85       	ldd	r23, Y+8	; 0x08
    22c2:	89 85       	ldd	r24, Y+9	; 0x09
    22c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c6:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	9e 83       	std	Y+6, r25	; 0x06
    22d0:	8d 83       	std	Y+5, r24	; 0x05
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	9e 81       	ldd	r25, Y+6	; 0x06
    22d6:	9a 83       	std	Y+2, r25	; 0x02
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	9a 81       	ldd	r25, Y+2	; 0x02
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <LCD_displayCharacter+0x3d0>
    22e2:	9a 83       	std	Y+2, r25	; 0x02
    22e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    22e6:	ea 96       	adiw	r28, 0x3a	; 58
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	de bf       	out	0x3e, r29	; 62
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	cd bf       	out	0x3d, r28	; 61
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <LCD_displayString+0x6>
    22fe:	0f 92       	push	r0
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	9b 83       	std	Y+3, r25	; 0x03
    2306:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2308:	19 82       	std	Y+1, r1	; 0x01
    230a:	0e c0       	rjmp	.+28     	; 0x2328 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	9b 81       	ldd	r25, Y+3	; 0x03
    2316:	fc 01       	movw	r30, r24
    2318:	e2 0f       	add	r30, r18
    231a:	f3 1f       	adc	r31, r19
    231c:	80 81       	ld	r24, Z
    231e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <LCD_displayCharacter>
		i++;
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	8f 5f       	subi	r24, 0xFF	; 255
    2326:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	9b 81       	ldd	r25, Y+3	; 0x03
    2332:	fc 01       	movw	r30, r24
    2334:	e2 0f       	add	r30, r18
    2336:	f3 1f       	adc	r31, r19
    2338:	80 81       	ld	r24, Z
    233a:	88 23       	and	r24, r24
    233c:	39 f7       	brne	.-50     	; 0x230c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	08 95       	ret

0000234a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    234a:	df 93       	push	r29
    234c:	cf 93       	push	r28
    234e:	00 d0       	rcall	.+0      	; 0x2350 <LCD_moveCursor+0x6>
    2350:	00 d0       	rcall	.+0      	; 0x2352 <LCD_moveCursor+0x8>
    2352:	0f 92       	push	r0
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	8a 83       	std	Y+2, r24	; 0x02
    235a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	3d 83       	std	Y+5, r19	; 0x05
    2364:	2c 83       	std	Y+4, r18	; 0x04
    2366:	8c 81       	ldd	r24, Y+4	; 0x04
    2368:	9d 81       	ldd	r25, Y+5	; 0x05
    236a:	81 30       	cpi	r24, 0x01	; 1
    236c:	91 05       	cpc	r25, r1
    236e:	c1 f0       	breq	.+48     	; 0x23a0 <LCD_moveCursor+0x56>
    2370:	2c 81       	ldd	r18, Y+4	; 0x04
    2372:	3d 81       	ldd	r19, Y+5	; 0x05
    2374:	22 30       	cpi	r18, 0x02	; 2
    2376:	31 05       	cpc	r19, r1
    2378:	2c f4       	brge	.+10     	; 0x2384 <LCD_moveCursor+0x3a>
    237a:	8c 81       	ldd	r24, Y+4	; 0x04
    237c:	9d 81       	ldd	r25, Y+5	; 0x05
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	61 f0       	breq	.+24     	; 0x239a <LCD_moveCursor+0x50>
    2382:	19 c0       	rjmp	.+50     	; 0x23b6 <LCD_moveCursor+0x6c>
    2384:	2c 81       	ldd	r18, Y+4	; 0x04
    2386:	3d 81       	ldd	r19, Y+5	; 0x05
    2388:	22 30       	cpi	r18, 0x02	; 2
    238a:	31 05       	cpc	r19, r1
    238c:	69 f0       	breq	.+26     	; 0x23a8 <LCD_moveCursor+0x5e>
    238e:	8c 81       	ldd	r24, Y+4	; 0x04
    2390:	9d 81       	ldd	r25, Y+5	; 0x05
    2392:	83 30       	cpi	r24, 0x03	; 3
    2394:	91 05       	cpc	r25, r1
    2396:	61 f0       	breq	.+24     	; 0x23b0 <LCD_moveCursor+0x66>
    2398:	0e c0       	rjmp	.+28     	; 0x23b6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	89 83       	std	Y+1, r24	; 0x01
    239e:	0b c0       	rjmp	.+22     	; 0x23b6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	80 5c       	subi	r24, 0xC0	; 192
    23a4:	89 83       	std	Y+1, r24	; 0x01
    23a6:	07 c0       	rjmp	.+14     	; 0x23b6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	80 5f       	subi	r24, 0xF0	; 240
    23ac:	89 83       	std	Y+1, r24	; 0x01
    23ae:	03 c0       	rjmp	.+6      	; 0x23b6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	80 5b       	subi	r24, 0xB0	; 176
    23b4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	80 68       	ori	r24, 0x80	; 128
    23ba:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <LCD_sendCommand>
}
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <LCD_displayStringRowColumn+0x6>
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <LCD_displayStringRowColumn+0x8>
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	6a 83       	std	Y+2, r22	; 0x02
    23de:	5c 83       	std	Y+4, r21	; 0x04
    23e0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	6a 81       	ldd	r22, Y+2	; 0x02
    23e6:	0e 94 a5 11 	call	0x234a	; 0x234a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_displayString>
}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	62 97       	sbiw	r28, 0x12	; 18
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
    2414:	9a 8b       	std	Y+18, r25	; 0x12
    2416:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2418:	89 89       	ldd	r24, Y+17	; 0x11
    241a:	9a 89       	ldd	r25, Y+18	; 0x12
    241c:	9e 01       	movw	r18, r28
    241e:	2f 5f       	subi	r18, 0xFF	; 255
    2420:	3f 4f       	sbci	r19, 0xFF	; 255
    2422:	b9 01       	movw	r22, r18
    2424:	4a e0       	ldi	r20, 0x0A	; 10
    2426:	50 e0       	ldi	r21, 0x00	; 0
    2428:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <itoa>
   LCD_displayString(buff); /* Display the string */
    242c:	ce 01       	movw	r24, r28
    242e:	01 96       	adiw	r24, 0x01	; 1
    2430:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_displayString>
}
    2434:	62 96       	adiw	r28, 0x12	; 18
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <LCD_sendCommand>
}
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	08 95       	ret

0000245a <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    245a:	af 92       	push	r10
    245c:	bf 92       	push	r11
    245e:	cf 92       	push	r12
    2460:	df 92       	push	r13
    2462:	ef 92       	push	r14
    2464:	ff 92       	push	r15
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	c3 55       	subi	r28, 0x53	; 83
    2474:	d0 40       	sbci	r29, 0x00	; 0
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
	uint8 temp_value = 0;
    2480:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    2482:	1a 82       	std	Y+2, r1	; 0x02
    2484:	19 82       	std	Y+1, r1	; 0x01

	ADC_ConfigType ADC_Config = { Internal , F_CPU_8 };
    2486:	83 e0       	ldi	r24, 0x03	; 3
    2488:	8c 83       	std	Y+4, r24	; 0x04
    248a:	82 e0       	ldi	r24, 0x02	; 2
    248c:	8d 83       	std	Y+5, r24	; 0x05

	/* initalize ADC driver */

	ADC_init(&ADC_Config);
    248e:	ce 01       	movw	r24, r28
    2490:	04 96       	adiw	r24, 0x04	; 4
    2492:	0e 94 ba 09 	call	0x1374	; 0x1374 <ADC_init>

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    2496:	82 e0       	ldi	r24, 0x02	; 2
    2498:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <ADC_readChannel>
    249c:	9a 83       	std	Y+2, r25	; 0x02
    249e:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint64)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	9c 01       	movw	r18, r24
    24a6:	40 e0       	ldi	r20, 0x00	; 0
    24a8:	50 e0       	ldi	r21, 0x00	; 0
    24aa:	60 e0       	ldi	r22, 0x00	; 0
    24ac:	70 e0       	ldi	r23, 0x00	; 0
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	a2 2e       	mov	r10, r18
    24b4:	b3 2e       	mov	r11, r19
    24b6:	c4 2e       	mov	r12, r20
    24b8:	d5 2e       	mov	r13, r21
    24ba:	e6 2e       	mov	r14, r22
    24bc:	f7 2e       	mov	r15, r23
    24be:	08 2f       	mov	r16, r24
    24c0:	19 2f       	mov	r17, r25
    24c2:	2a 2d       	mov	r18, r10
    24c4:	3b 2d       	mov	r19, r11
    24c6:	4c 2d       	mov	r20, r12
    24c8:	5d 2d       	mov	r21, r13
    24ca:	6e 2d       	mov	r22, r14
    24cc:	7f 2d       	mov	r23, r15
    24ce:	80 2f       	mov	r24, r16
    24d0:	91 2f       	mov	r25, r17
    24d2:	01 e0       	ldi	r16, 0x01	; 1
    24d4:	0e 94 41 00 	call	0x82	; 0x82 <__ashldi3>
    24d8:	2e 83       	std	Y+6, r18	; 0x06
    24da:	3f 83       	std	Y+7, r19	; 0x07
    24dc:	48 87       	std	Y+8, r20	; 0x08
    24de:	59 87       	std	Y+9, r21	; 0x09
    24e0:	6a 87       	std	Y+10, r22	; 0x0a
    24e2:	7b 87       	std	Y+11, r23	; 0x0b
    24e4:	8c 87       	std	Y+12, r24	; 0x0c
    24e6:	9d 87       	std	Y+13, r25	; 0x0d
    24e8:	2e 81       	ldd	r18, Y+6	; 0x06
    24ea:	3f 81       	ldd	r19, Y+7	; 0x07
    24ec:	48 85       	ldd	r20, Y+8	; 0x08
    24ee:	59 85       	ldd	r21, Y+9	; 0x09
    24f0:	6a 85       	ldd	r22, Y+10	; 0x0a
    24f2:	7b 85       	ldd	r23, Y+11	; 0x0b
    24f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    24f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    24f8:	02 e0       	ldi	r16, 0x02	; 2
    24fa:	0e 94 41 00 	call	0x82	; 0x82 <__ashldi3>
    24fe:	2e 87       	std	Y+14, r18	; 0x0e
    2500:	3f 87       	std	Y+15, r19	; 0x0f
    2502:	48 8b       	std	Y+16, r20	; 0x10
    2504:	59 8b       	std	Y+17, r21	; 0x11
    2506:	6a 8b       	std	Y+18, r22	; 0x12
    2508:	7b 8b       	std	Y+19, r23	; 0x13
    250a:	8c 8b       	std	Y+20, r24	; 0x14
    250c:	9d 8b       	std	Y+21, r25	; 0x15
    250e:	8e 81       	ldd	r24, Y+6	; 0x06
    2510:	9e 85       	ldd	r25, Y+14	; 0x0e
    2512:	89 0f       	add	r24, r25
    2514:	8e 8b       	std	Y+22, r24	; 0x16
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	8e 8f       	std	Y+30, r24	; 0x1e
    251a:	9e 89       	ldd	r25, Y+22	; 0x16
    251c:	8e 81       	ldd	r24, Y+6	; 0x06
    251e:	98 17       	cp	r25, r24
    2520:	08 f0       	brcs	.+2      	; 0x2524 <LM35_getTemperature+0xca>
    2522:	1e 8e       	std	Y+30, r1	; 0x1e
    2524:	9f 81       	ldd	r25, Y+7	; 0x07
    2526:	8f 85       	ldd	r24, Y+15	; 0x0f
    2528:	98 0f       	add	r25, r24
    252a:	9f 8b       	std	Y+23, r25	; 0x17
    252c:	91 e0       	ldi	r25, 0x01	; 1
    252e:	9f 8f       	std	Y+31, r25	; 0x1f
    2530:	8f 89       	ldd	r24, Y+23	; 0x17
    2532:	9f 81       	ldd	r25, Y+7	; 0x07
    2534:	89 17       	cp	r24, r25
    2536:	08 f0       	brcs	.+2      	; 0x253a <LM35_getTemperature+0xe0>
    2538:	1f 8e       	std	Y+31, r1	; 0x1f
    253a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    253c:	9f 89       	ldd	r25, Y+23	; 0x17
    253e:	89 0f       	add	r24, r25
    2540:	88 a3       	std	Y+32, r24	; 0x20
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	89 a3       	std	Y+33, r24	; 0x21
    2546:	98 a1       	ldd	r25, Y+32	; 0x20
    2548:	8f 89       	ldd	r24, Y+23	; 0x17
    254a:	98 17       	cp	r25, r24
    254c:	08 f0       	brcs	.+2      	; 0x2550 <LM35_getTemperature+0xf6>
    254e:	19 a2       	std	Y+33, r1	; 0x21
    2550:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2552:	89 a1       	ldd	r24, Y+33	; 0x21
    2554:	98 2b       	or	r25, r24
    2556:	9f 8f       	std	Y+31, r25	; 0x1f
    2558:	98 a1       	ldd	r25, Y+32	; 0x20
    255a:	9f 8b       	std	Y+23, r25	; 0x17
    255c:	88 85       	ldd	r24, Y+8	; 0x08
    255e:	98 89       	ldd	r25, Y+16	; 0x10
    2560:	89 0f       	add	r24, r25
    2562:	88 8f       	std	Y+24, r24	; 0x18
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	8a a3       	std	Y+34, r24	; 0x22
    2568:	98 8d       	ldd	r25, Y+24	; 0x18
    256a:	88 85       	ldd	r24, Y+8	; 0x08
    256c:	98 17       	cp	r25, r24
    256e:	08 f0       	brcs	.+2      	; 0x2572 <LM35_getTemperature+0x118>
    2570:	1a a2       	std	Y+34, r1	; 0x22
    2572:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2574:	88 8d       	ldd	r24, Y+24	; 0x18
    2576:	98 0f       	add	r25, r24
    2578:	9b a3       	std	Y+35, r25	; 0x23
    257a:	91 e0       	ldi	r25, 0x01	; 1
    257c:	9c a3       	std	Y+36, r25	; 0x24
    257e:	8b a1       	ldd	r24, Y+35	; 0x23
    2580:	98 8d       	ldd	r25, Y+24	; 0x18
    2582:	89 17       	cp	r24, r25
    2584:	08 f0       	brcs	.+2      	; 0x2588 <LM35_getTemperature+0x12e>
    2586:	1c a2       	std	Y+36, r1	; 0x24
    2588:	8a a1       	ldd	r24, Y+34	; 0x22
    258a:	9c a1       	ldd	r25, Y+36	; 0x24
    258c:	89 2b       	or	r24, r25
    258e:	8a a3       	std	Y+34, r24	; 0x22
    2590:	8b a1       	ldd	r24, Y+35	; 0x23
    2592:	88 8f       	std	Y+24, r24	; 0x18
    2594:	99 85       	ldd	r25, Y+9	; 0x09
    2596:	89 89       	ldd	r24, Y+17	; 0x11
    2598:	98 0f       	add	r25, r24
    259a:	99 8f       	std	Y+25, r25	; 0x19
    259c:	91 e0       	ldi	r25, 0x01	; 1
    259e:	9d a3       	std	Y+37, r25	; 0x25
    25a0:	89 8d       	ldd	r24, Y+25	; 0x19
    25a2:	99 85       	ldd	r25, Y+9	; 0x09
    25a4:	89 17       	cp	r24, r25
    25a6:	08 f0       	brcs	.+2      	; 0x25aa <LM35_getTemperature+0x150>
    25a8:	1d a2       	std	Y+37, r1	; 0x25
    25aa:	8a a1       	ldd	r24, Y+34	; 0x22
    25ac:	99 8d       	ldd	r25, Y+25	; 0x19
    25ae:	89 0f       	add	r24, r25
    25b0:	8e a3       	std	Y+38, r24	; 0x26
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	8f a3       	std	Y+39, r24	; 0x27
    25b6:	9e a1       	ldd	r25, Y+38	; 0x26
    25b8:	89 8d       	ldd	r24, Y+25	; 0x19
    25ba:	98 17       	cp	r25, r24
    25bc:	08 f0       	brcs	.+2      	; 0x25c0 <LM35_getTemperature+0x166>
    25be:	1f a2       	std	Y+39, r1	; 0x27
    25c0:	9d a1       	ldd	r25, Y+37	; 0x25
    25c2:	8f a1       	ldd	r24, Y+39	; 0x27
    25c4:	98 2b       	or	r25, r24
    25c6:	9d a3       	std	Y+37, r25	; 0x25
    25c8:	9e a1       	ldd	r25, Y+38	; 0x26
    25ca:	99 8f       	std	Y+25, r25	; 0x19
    25cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ce:	9a 89       	ldd	r25, Y+18	; 0x12
    25d0:	89 0f       	add	r24, r25
    25d2:	8a 8f       	std	Y+26, r24	; 0x1a
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	88 a7       	std	Y+40, r24	; 0x28
    25d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25da:	8a 85       	ldd	r24, Y+10	; 0x0a
    25dc:	98 17       	cp	r25, r24
    25de:	08 f0       	brcs	.+2      	; 0x25e2 <LM35_getTemperature+0x188>
    25e0:	18 a6       	std	Y+40, r1	; 0x28
    25e2:	9d a1       	ldd	r25, Y+37	; 0x25
    25e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25e6:	98 0f       	add	r25, r24
    25e8:	99 a7       	std	Y+41, r25	; 0x29
    25ea:	91 e0       	ldi	r25, 0x01	; 1
    25ec:	9a a7       	std	Y+42, r25	; 0x2a
    25ee:	89 a5       	ldd	r24, Y+41	; 0x29
    25f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25f2:	89 17       	cp	r24, r25
    25f4:	08 f0       	brcs	.+2      	; 0x25f8 <LM35_getTemperature+0x19e>
    25f6:	1a a6       	std	Y+42, r1	; 0x2a
    25f8:	88 a5       	ldd	r24, Y+40	; 0x28
    25fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    25fc:	89 2b       	or	r24, r25
    25fe:	88 a7       	std	Y+40, r24	; 0x28
    2600:	89 a5       	ldd	r24, Y+41	; 0x29
    2602:	8a 8f       	std	Y+26, r24	; 0x1a
    2604:	9b 85       	ldd	r25, Y+11	; 0x0b
    2606:	8b 89       	ldd	r24, Y+19	; 0x13
    2608:	98 0f       	add	r25, r24
    260a:	9b 8f       	std	Y+27, r25	; 0x1b
    260c:	91 e0       	ldi	r25, 0x01	; 1
    260e:	9b a7       	std	Y+43, r25	; 0x2b
    2610:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2612:	9b 85       	ldd	r25, Y+11	; 0x0b
    2614:	89 17       	cp	r24, r25
    2616:	08 f0       	brcs	.+2      	; 0x261a <LM35_getTemperature+0x1c0>
    2618:	1b a6       	std	Y+43, r1	; 0x2b
    261a:	88 a5       	ldd	r24, Y+40	; 0x28
    261c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    261e:	89 0f       	add	r24, r25
    2620:	8c a7       	std	Y+44, r24	; 0x2c
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	8d a7       	std	Y+45, r24	; 0x2d
    2626:	9c a5       	ldd	r25, Y+44	; 0x2c
    2628:	8b 8d       	ldd	r24, Y+27	; 0x1b
    262a:	98 17       	cp	r25, r24
    262c:	08 f0       	brcs	.+2      	; 0x2630 <LM35_getTemperature+0x1d6>
    262e:	1d a6       	std	Y+45, r1	; 0x2d
    2630:	9b a5       	ldd	r25, Y+43	; 0x2b
    2632:	8d a5       	ldd	r24, Y+45	; 0x2d
    2634:	98 2b       	or	r25, r24
    2636:	9b a7       	std	Y+43, r25	; 0x2b
    2638:	9c a5       	ldd	r25, Y+44	; 0x2c
    263a:	9b 8f       	std	Y+27, r25	; 0x1b
    263c:	8c 85       	ldd	r24, Y+12	; 0x0c
    263e:	9c 89       	ldd	r25, Y+20	; 0x14
    2640:	89 0f       	add	r24, r25
    2642:	8c 8f       	std	Y+28, r24	; 0x1c
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	8e a7       	std	Y+46, r24	; 0x2e
    2648:	9c 8d       	ldd	r25, Y+28	; 0x1c
    264a:	8c 85       	ldd	r24, Y+12	; 0x0c
    264c:	98 17       	cp	r25, r24
    264e:	08 f0       	brcs	.+2      	; 0x2652 <LM35_getTemperature+0x1f8>
    2650:	1e a6       	std	Y+46, r1	; 0x2e
    2652:	9b a5       	ldd	r25, Y+43	; 0x2b
    2654:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2656:	98 0f       	add	r25, r24
    2658:	9f a7       	std	Y+47, r25	; 0x2f
    265a:	91 e0       	ldi	r25, 0x01	; 1
    265c:	98 ab       	std	Y+48, r25	; 0x30
    265e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2660:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2662:	89 17       	cp	r24, r25
    2664:	08 f0       	brcs	.+2      	; 0x2668 <LM35_getTemperature+0x20e>
    2666:	18 aa       	std	Y+48, r1	; 0x30
    2668:	8e a5       	ldd	r24, Y+46	; 0x2e
    266a:	98 a9       	ldd	r25, Y+48	; 0x30
    266c:	89 2b       	or	r24, r25
    266e:	8e a7       	std	Y+46, r24	; 0x2e
    2670:	8f a5       	ldd	r24, Y+47	; 0x2f
    2672:	8c 8f       	std	Y+28, r24	; 0x1c
    2674:	9d 85       	ldd	r25, Y+13	; 0x0d
    2676:	8d 89       	ldd	r24, Y+21	; 0x15
    2678:	98 0f       	add	r25, r24
    267a:	9d 8f       	std	Y+29, r25	; 0x1d
    267c:	8e a5       	ldd	r24, Y+46	; 0x2e
    267e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2680:	89 0f       	add	r24, r25
    2682:	8d 8f       	std	Y+29, r24	; 0x1d
    2684:	8e 89       	ldd	r24, Y+22	; 0x16
    2686:	8e 83       	std	Y+6, r24	; 0x06
    2688:	9f 89       	ldd	r25, Y+23	; 0x17
    268a:	9f 83       	std	Y+7, r25	; 0x07
    268c:	88 8d       	ldd	r24, Y+24	; 0x18
    268e:	88 87       	std	Y+8, r24	; 0x08
    2690:	99 8d       	ldd	r25, Y+25	; 0x19
    2692:	99 87       	std	Y+9, r25	; 0x09
    2694:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2696:	8a 87       	std	Y+10, r24	; 0x0a
    2698:	9b 8d       	ldd	r25, Y+27	; 0x1b
    269a:	9b 87       	std	Y+11, r25	; 0x0b
    269c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    269e:	8c 87       	std	Y+12, r24	; 0x0c
    26a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26a2:	9d 87       	std	Y+13, r25	; 0x0d
    26a4:	2e 81       	ldd	r18, Y+6	; 0x06
    26a6:	3f 81       	ldd	r19, Y+7	; 0x07
    26a8:	48 85       	ldd	r20, Y+8	; 0x08
    26aa:	59 85       	ldd	r21, Y+9	; 0x09
    26ac:	6a 85       	ldd	r22, Y+10	; 0x0a
    26ae:	7b 85       	ldd	r23, Y+11	; 0x0b
    26b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    26b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    26b4:	04 e0       	ldi	r16, 0x04	; 4
    26b6:	0e 94 41 00 	call	0x82	; 0x82 <__ashldi3>
    26ba:	29 ab       	std	Y+49, r18	; 0x31
    26bc:	3a ab       	std	Y+50, r19	; 0x32
    26be:	4b ab       	std	Y+51, r20	; 0x33
    26c0:	5c ab       	std	Y+52, r21	; 0x34
    26c2:	6d ab       	std	Y+53, r22	; 0x35
    26c4:	7e ab       	std	Y+54, r23	; 0x36
    26c6:	8f ab       	std	Y+55, r24	; 0x37
    26c8:	98 af       	std	Y+56, r25	; 0x38
    26ca:	89 a9       	ldd	r24, Y+49	; 0x31
    26cc:	9e 81       	ldd	r25, Y+6	; 0x06
    26ce:	89 1b       	sub	r24, r25
    26d0:	89 af       	std	Y+57, r24	; 0x39
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	22 96       	adiw	r28, 0x02	; 2
    26d6:	8f af       	std	Y+63, r24	; 0x3f
    26d8:	22 97       	sbiw	r28, 0x02	; 2
    26da:	99 ad       	ldd	r25, Y+57	; 0x39
    26dc:	89 a9       	ldd	r24, Y+49	; 0x31
    26de:	89 17       	cp	r24, r25
    26e0:	18 f0       	brcs	.+6      	; 0x26e8 <LM35_getTemperature+0x28e>
    26e2:	22 96       	adiw	r28, 0x02	; 2
    26e4:	1f ae       	std	Y+63, r1	; 0x3f
    26e6:	22 97       	sbiw	r28, 0x02	; 2
    26e8:	9a a9       	ldd	r25, Y+50	; 0x32
    26ea:	8f 81       	ldd	r24, Y+7	; 0x07
    26ec:	98 1b       	sub	r25, r24
    26ee:	9a af       	std	Y+58, r25	; 0x3a
    26f0:	91 e0       	ldi	r25, 0x01	; 1
    26f2:	23 96       	adiw	r28, 0x03	; 3
    26f4:	9f af       	std	Y+63, r25	; 0x3f
    26f6:	23 97       	sbiw	r28, 0x03	; 3
    26f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    26fa:	9a a9       	ldd	r25, Y+50	; 0x32
    26fc:	98 17       	cp	r25, r24
    26fe:	18 f0       	brcs	.+6      	; 0x2706 <LM35_getTemperature+0x2ac>
    2700:	23 96       	adiw	r28, 0x03	; 3
    2702:	1f ae       	std	Y+63, r1	; 0x3f
    2704:	23 97       	sbiw	r28, 0x03	; 3
    2706:	8a ad       	ldd	r24, Y+58	; 0x3a
    2708:	22 96       	adiw	r28, 0x02	; 2
    270a:	9f ad       	ldd	r25, Y+63	; 0x3f
    270c:	22 97       	sbiw	r28, 0x02	; 2
    270e:	89 1b       	sub	r24, r25
    2710:	24 96       	adiw	r28, 0x04	; 4
    2712:	8f af       	std	Y+63, r24	; 0x3f
    2714:	24 97       	sbiw	r28, 0x04	; 4
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	25 96       	adiw	r28, 0x05	; 5
    271a:	8f af       	std	Y+63, r24	; 0x3f
    271c:	25 97       	sbiw	r28, 0x05	; 5
    271e:	24 96       	adiw	r28, 0x04	; 4
    2720:	9f ad       	ldd	r25, Y+63	; 0x3f
    2722:	24 97       	sbiw	r28, 0x04	; 4
    2724:	8a ad       	ldd	r24, Y+58	; 0x3a
    2726:	89 17       	cp	r24, r25
    2728:	18 f0       	brcs	.+6      	; 0x2730 <LM35_getTemperature+0x2d6>
    272a:	25 96       	adiw	r28, 0x05	; 5
    272c:	1f ae       	std	Y+63, r1	; 0x3f
    272e:	25 97       	sbiw	r28, 0x05	; 5
    2730:	23 96       	adiw	r28, 0x03	; 3
    2732:	9f ad       	ldd	r25, Y+63	; 0x3f
    2734:	23 97       	sbiw	r28, 0x03	; 3
    2736:	25 96       	adiw	r28, 0x05	; 5
    2738:	8f ad       	ldd	r24, Y+63	; 0x3f
    273a:	25 97       	sbiw	r28, 0x05	; 5
    273c:	98 2b       	or	r25, r24
    273e:	23 96       	adiw	r28, 0x03	; 3
    2740:	9f af       	std	Y+63, r25	; 0x3f
    2742:	23 97       	sbiw	r28, 0x03	; 3
    2744:	24 96       	adiw	r28, 0x04	; 4
    2746:	9f ad       	ldd	r25, Y+63	; 0x3f
    2748:	24 97       	sbiw	r28, 0x04	; 4
    274a:	9a af       	std	Y+58, r25	; 0x3a
    274c:	8b a9       	ldd	r24, Y+51	; 0x33
    274e:	98 85       	ldd	r25, Y+8	; 0x08
    2750:	89 1b       	sub	r24, r25
    2752:	8b af       	std	Y+59, r24	; 0x3b
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	26 96       	adiw	r28, 0x06	; 6
    2758:	8f af       	std	Y+63, r24	; 0x3f
    275a:	26 97       	sbiw	r28, 0x06	; 6
    275c:	9b ad       	ldd	r25, Y+59	; 0x3b
    275e:	8b a9       	ldd	r24, Y+51	; 0x33
    2760:	89 17       	cp	r24, r25
    2762:	18 f0       	brcs	.+6      	; 0x276a <LM35_getTemperature+0x310>
    2764:	26 96       	adiw	r28, 0x06	; 6
    2766:	1f ae       	std	Y+63, r1	; 0x3f
    2768:	26 97       	sbiw	r28, 0x06	; 6
    276a:	9b ad       	ldd	r25, Y+59	; 0x3b
    276c:	23 96       	adiw	r28, 0x03	; 3
    276e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2770:	23 97       	sbiw	r28, 0x03	; 3
    2772:	98 1b       	sub	r25, r24
    2774:	27 96       	adiw	r28, 0x07	; 7
    2776:	9f af       	std	Y+63, r25	; 0x3f
    2778:	27 97       	sbiw	r28, 0x07	; 7
    277a:	91 e0       	ldi	r25, 0x01	; 1
    277c:	28 96       	adiw	r28, 0x08	; 8
    277e:	9f af       	std	Y+63, r25	; 0x3f
    2780:	28 97       	sbiw	r28, 0x08	; 8
    2782:	27 96       	adiw	r28, 0x07	; 7
    2784:	8f ad       	ldd	r24, Y+63	; 0x3f
    2786:	27 97       	sbiw	r28, 0x07	; 7
    2788:	9b ad       	ldd	r25, Y+59	; 0x3b
    278a:	98 17       	cp	r25, r24
    278c:	18 f0       	brcs	.+6      	; 0x2794 <LM35_getTemperature+0x33a>
    278e:	28 96       	adiw	r28, 0x08	; 8
    2790:	1f ae       	std	Y+63, r1	; 0x3f
    2792:	28 97       	sbiw	r28, 0x08	; 8
    2794:	26 96       	adiw	r28, 0x06	; 6
    2796:	8f ad       	ldd	r24, Y+63	; 0x3f
    2798:	26 97       	sbiw	r28, 0x06	; 6
    279a:	28 96       	adiw	r28, 0x08	; 8
    279c:	9f ad       	ldd	r25, Y+63	; 0x3f
    279e:	28 97       	sbiw	r28, 0x08	; 8
    27a0:	89 2b       	or	r24, r25
    27a2:	26 96       	adiw	r28, 0x06	; 6
    27a4:	8f af       	std	Y+63, r24	; 0x3f
    27a6:	26 97       	sbiw	r28, 0x06	; 6
    27a8:	27 96       	adiw	r28, 0x07	; 7
    27aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    27ac:	27 97       	sbiw	r28, 0x07	; 7
    27ae:	8b af       	std	Y+59, r24	; 0x3b
    27b0:	9c a9       	ldd	r25, Y+52	; 0x34
    27b2:	89 85       	ldd	r24, Y+9	; 0x09
    27b4:	98 1b       	sub	r25, r24
    27b6:	9c af       	std	Y+60, r25	; 0x3c
    27b8:	91 e0       	ldi	r25, 0x01	; 1
    27ba:	29 96       	adiw	r28, 0x09	; 9
    27bc:	9f af       	std	Y+63, r25	; 0x3f
    27be:	29 97       	sbiw	r28, 0x09	; 9
    27c0:	8c ad       	ldd	r24, Y+60	; 0x3c
    27c2:	9c a9       	ldd	r25, Y+52	; 0x34
    27c4:	98 17       	cp	r25, r24
    27c6:	18 f0       	brcs	.+6      	; 0x27ce <LM35_getTemperature+0x374>
    27c8:	29 96       	adiw	r28, 0x09	; 9
    27ca:	1f ae       	std	Y+63, r1	; 0x3f
    27cc:	29 97       	sbiw	r28, 0x09	; 9
    27ce:	8c ad       	ldd	r24, Y+60	; 0x3c
    27d0:	26 96       	adiw	r28, 0x06	; 6
    27d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    27d4:	26 97       	sbiw	r28, 0x06	; 6
    27d6:	89 1b       	sub	r24, r25
    27d8:	2a 96       	adiw	r28, 0x0a	; 10
    27da:	8f af       	std	Y+63, r24	; 0x3f
    27dc:	2a 97       	sbiw	r28, 0x0a	; 10
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	2b 96       	adiw	r28, 0x0b	; 11
    27e2:	8f af       	std	Y+63, r24	; 0x3f
    27e4:	2b 97       	sbiw	r28, 0x0b	; 11
    27e6:	2a 96       	adiw	r28, 0x0a	; 10
    27e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    27ea:	2a 97       	sbiw	r28, 0x0a	; 10
    27ec:	8c ad       	ldd	r24, Y+60	; 0x3c
    27ee:	89 17       	cp	r24, r25
    27f0:	18 f0       	brcs	.+6      	; 0x27f8 <LM35_getTemperature+0x39e>
    27f2:	2b 96       	adiw	r28, 0x0b	; 11
    27f4:	1f ae       	std	Y+63, r1	; 0x3f
    27f6:	2b 97       	sbiw	r28, 0x0b	; 11
    27f8:	29 96       	adiw	r28, 0x09	; 9
    27fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    27fc:	29 97       	sbiw	r28, 0x09	; 9
    27fe:	2b 96       	adiw	r28, 0x0b	; 11
    2800:	8f ad       	ldd	r24, Y+63	; 0x3f
    2802:	2b 97       	sbiw	r28, 0x0b	; 11
    2804:	98 2b       	or	r25, r24
    2806:	29 96       	adiw	r28, 0x09	; 9
    2808:	9f af       	std	Y+63, r25	; 0x3f
    280a:	29 97       	sbiw	r28, 0x09	; 9
    280c:	2a 96       	adiw	r28, 0x0a	; 10
    280e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2810:	2a 97       	sbiw	r28, 0x0a	; 10
    2812:	9c af       	std	Y+60, r25	; 0x3c
    2814:	8d a9       	ldd	r24, Y+53	; 0x35
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	89 1b       	sub	r24, r25
    281a:	8d af       	std	Y+61, r24	; 0x3d
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	2c 96       	adiw	r28, 0x0c	; 12
    2820:	8f af       	std	Y+63, r24	; 0x3f
    2822:	2c 97       	sbiw	r28, 0x0c	; 12
    2824:	9d ad       	ldd	r25, Y+61	; 0x3d
    2826:	8d a9       	ldd	r24, Y+53	; 0x35
    2828:	89 17       	cp	r24, r25
    282a:	18 f0       	brcs	.+6      	; 0x2832 <LM35_getTemperature+0x3d8>
    282c:	2c 96       	adiw	r28, 0x0c	; 12
    282e:	1f ae       	std	Y+63, r1	; 0x3f
    2830:	2c 97       	sbiw	r28, 0x0c	; 12
    2832:	9d ad       	ldd	r25, Y+61	; 0x3d
    2834:	29 96       	adiw	r28, 0x09	; 9
    2836:	8f ad       	ldd	r24, Y+63	; 0x3f
    2838:	29 97       	sbiw	r28, 0x09	; 9
    283a:	98 1b       	sub	r25, r24
    283c:	2d 96       	adiw	r28, 0x0d	; 13
    283e:	9f af       	std	Y+63, r25	; 0x3f
    2840:	2d 97       	sbiw	r28, 0x0d	; 13
    2842:	91 e0       	ldi	r25, 0x01	; 1
    2844:	2e 96       	adiw	r28, 0x0e	; 14
    2846:	9f af       	std	Y+63, r25	; 0x3f
    2848:	2e 97       	sbiw	r28, 0x0e	; 14
    284a:	2d 96       	adiw	r28, 0x0d	; 13
    284c:	8f ad       	ldd	r24, Y+63	; 0x3f
    284e:	2d 97       	sbiw	r28, 0x0d	; 13
    2850:	9d ad       	ldd	r25, Y+61	; 0x3d
    2852:	98 17       	cp	r25, r24
    2854:	18 f0       	brcs	.+6      	; 0x285c <LM35_getTemperature+0x402>
    2856:	2e 96       	adiw	r28, 0x0e	; 14
    2858:	1f ae       	std	Y+63, r1	; 0x3f
    285a:	2e 97       	sbiw	r28, 0x0e	; 14
    285c:	2c 96       	adiw	r28, 0x0c	; 12
    285e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2860:	2c 97       	sbiw	r28, 0x0c	; 12
    2862:	2e 96       	adiw	r28, 0x0e	; 14
    2864:	9f ad       	ldd	r25, Y+63	; 0x3f
    2866:	2e 97       	sbiw	r28, 0x0e	; 14
    2868:	89 2b       	or	r24, r25
    286a:	2c 96       	adiw	r28, 0x0c	; 12
    286c:	8f af       	std	Y+63, r24	; 0x3f
    286e:	2c 97       	sbiw	r28, 0x0c	; 12
    2870:	2d 96       	adiw	r28, 0x0d	; 13
    2872:	8f ad       	ldd	r24, Y+63	; 0x3f
    2874:	2d 97       	sbiw	r28, 0x0d	; 13
    2876:	8d af       	std	Y+61, r24	; 0x3d
    2878:	9e a9       	ldd	r25, Y+54	; 0x36
    287a:	8b 85       	ldd	r24, Y+11	; 0x0b
    287c:	98 1b       	sub	r25, r24
    287e:	9e af       	std	Y+62, r25	; 0x3e
    2880:	91 e0       	ldi	r25, 0x01	; 1
    2882:	2f 96       	adiw	r28, 0x0f	; 15
    2884:	9f af       	std	Y+63, r25	; 0x3f
    2886:	2f 97       	sbiw	r28, 0x0f	; 15
    2888:	8e ad       	ldd	r24, Y+62	; 0x3e
    288a:	9e a9       	ldd	r25, Y+54	; 0x36
    288c:	98 17       	cp	r25, r24
    288e:	18 f0       	brcs	.+6      	; 0x2896 <LM35_getTemperature+0x43c>
    2890:	2f 96       	adiw	r28, 0x0f	; 15
    2892:	1f ae       	std	Y+63, r1	; 0x3f
    2894:	2f 97       	sbiw	r28, 0x0f	; 15
    2896:	8e ad       	ldd	r24, Y+62	; 0x3e
    2898:	2c 96       	adiw	r28, 0x0c	; 12
    289a:	9f ad       	ldd	r25, Y+63	; 0x3f
    289c:	2c 97       	sbiw	r28, 0x0c	; 12
    289e:	89 1b       	sub	r24, r25
    28a0:	60 96       	adiw	r28, 0x10	; 16
    28a2:	8f af       	std	Y+63, r24	; 0x3f
    28a4:	60 97       	sbiw	r28, 0x10	; 16
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	61 96       	adiw	r28, 0x11	; 17
    28aa:	8f af       	std	Y+63, r24	; 0x3f
    28ac:	61 97       	sbiw	r28, 0x11	; 17
    28ae:	60 96       	adiw	r28, 0x10	; 16
    28b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    28b2:	60 97       	sbiw	r28, 0x10	; 16
    28b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    28b6:	89 17       	cp	r24, r25
    28b8:	18 f0       	brcs	.+6      	; 0x28c0 <LM35_getTemperature+0x466>
    28ba:	61 96       	adiw	r28, 0x11	; 17
    28bc:	1f ae       	std	Y+63, r1	; 0x3f
    28be:	61 97       	sbiw	r28, 0x11	; 17
    28c0:	2f 96       	adiw	r28, 0x0f	; 15
    28c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    28c4:	2f 97       	sbiw	r28, 0x0f	; 15
    28c6:	61 96       	adiw	r28, 0x11	; 17
    28c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    28ca:	61 97       	sbiw	r28, 0x11	; 17
    28cc:	98 2b       	or	r25, r24
    28ce:	2f 96       	adiw	r28, 0x0f	; 15
    28d0:	9f af       	std	Y+63, r25	; 0x3f
    28d2:	2f 97       	sbiw	r28, 0x0f	; 15
    28d4:	60 96       	adiw	r28, 0x10	; 16
    28d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    28d8:	60 97       	sbiw	r28, 0x10	; 16
    28da:	9e af       	std	Y+62, r25	; 0x3e
    28dc:	8f a9       	ldd	r24, Y+55	; 0x37
    28de:	9c 85       	ldd	r25, Y+12	; 0x0c
    28e0:	89 1b       	sub	r24, r25
    28e2:	8f af       	std	Y+63, r24	; 0x3f
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	62 96       	adiw	r28, 0x12	; 18
    28e8:	8f af       	std	Y+63, r24	; 0x3f
    28ea:	62 97       	sbiw	r28, 0x12	; 18
    28ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    28ee:	8f a9       	ldd	r24, Y+55	; 0x37
    28f0:	89 17       	cp	r24, r25
    28f2:	18 f0       	brcs	.+6      	; 0x28fa <LM35_getTemperature+0x4a0>
    28f4:	62 96       	adiw	r28, 0x12	; 18
    28f6:	1f ae       	std	Y+63, r1	; 0x3f
    28f8:	62 97       	sbiw	r28, 0x12	; 18
    28fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    28fc:	2f 96       	adiw	r28, 0x0f	; 15
    28fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    2900:	2f 97       	sbiw	r28, 0x0f	; 15
    2902:	98 1b       	sub	r25, r24
    2904:	63 96       	adiw	r28, 0x13	; 19
    2906:	9f af       	std	Y+63, r25	; 0x3f
    2908:	63 97       	sbiw	r28, 0x13	; 19
    290a:	91 e0       	ldi	r25, 0x01	; 1
    290c:	64 96       	adiw	r28, 0x14	; 20
    290e:	9f af       	std	Y+63, r25	; 0x3f
    2910:	64 97       	sbiw	r28, 0x14	; 20
    2912:	63 96       	adiw	r28, 0x13	; 19
    2914:	8f ad       	ldd	r24, Y+63	; 0x3f
    2916:	63 97       	sbiw	r28, 0x13	; 19
    2918:	9f ad       	ldd	r25, Y+63	; 0x3f
    291a:	98 17       	cp	r25, r24
    291c:	18 f0       	brcs	.+6      	; 0x2924 <LM35_getTemperature+0x4ca>
    291e:	64 96       	adiw	r28, 0x14	; 20
    2920:	1f ae       	std	Y+63, r1	; 0x3f
    2922:	64 97       	sbiw	r28, 0x14	; 20
    2924:	62 96       	adiw	r28, 0x12	; 18
    2926:	8f ad       	ldd	r24, Y+63	; 0x3f
    2928:	62 97       	sbiw	r28, 0x12	; 18
    292a:	64 96       	adiw	r28, 0x14	; 20
    292c:	9f ad       	ldd	r25, Y+63	; 0x3f
    292e:	64 97       	sbiw	r28, 0x14	; 20
    2930:	89 2b       	or	r24, r25
    2932:	62 96       	adiw	r28, 0x12	; 18
    2934:	8f af       	std	Y+63, r24	; 0x3f
    2936:	62 97       	sbiw	r28, 0x12	; 18
    2938:	63 96       	adiw	r28, 0x13	; 19
    293a:	8f ad       	ldd	r24, Y+63	; 0x3f
    293c:	63 97       	sbiw	r28, 0x13	; 19
    293e:	8f af       	std	Y+63, r24	; 0x3f
    2940:	98 ad       	ldd	r25, Y+56	; 0x38
    2942:	8d 85       	ldd	r24, Y+13	; 0x0d
    2944:	98 1b       	sub	r25, r24
    2946:	21 96       	adiw	r28, 0x01	; 1
    2948:	9f af       	std	Y+63, r25	; 0x3f
    294a:	21 97       	sbiw	r28, 0x01	; 1
    294c:	21 96       	adiw	r28, 0x01	; 1
    294e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2950:	21 97       	sbiw	r28, 0x01	; 1
    2952:	62 96       	adiw	r28, 0x12	; 18
    2954:	9f ad       	ldd	r25, Y+63	; 0x3f
    2956:	62 97       	sbiw	r28, 0x12	; 18
    2958:	89 1b       	sub	r24, r25
    295a:	21 96       	adiw	r28, 0x01	; 1
    295c:	8f af       	std	Y+63, r24	; 0x3f
    295e:	21 97       	sbiw	r28, 0x01	; 1
    2960:	a9 ac       	ldd	r10, Y+57	; 0x39
    2962:	ba ac       	ldd	r11, Y+58	; 0x3a
    2964:	cb ac       	ldd	r12, Y+59	; 0x3b
    2966:	dc ac       	ldd	r13, Y+60	; 0x3c
    2968:	ed ac       	ldd	r14, Y+61	; 0x3d
    296a:	fe ac       	ldd	r15, Y+62	; 0x3e
    296c:	0f ad       	ldd	r16, Y+63	; 0x3f
    296e:	21 96       	adiw	r28, 0x01	; 1
    2970:	1f ad       	ldd	r17, Y+63	; 0x3f
    2972:	21 97       	sbiw	r28, 0x01	; 1
    2974:	2a 2d       	mov	r18, r10
    2976:	3b 2d       	mov	r19, r11
    2978:	4c 2d       	mov	r20, r12
    297a:	5d 2d       	mov	r21, r13
    297c:	6e 2d       	mov	r22, r14
    297e:	7f 2d       	mov	r23, r15
    2980:	80 2f       	mov	r24, r16
    2982:	91 2f       	mov	r25, r17
    2984:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <__floatundisf>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	bc 01       	movw	r22, r24
    298e:	cd 01       	movw	r24, r26
    2990:	2a e0       	ldi	r18, 0x0A	; 10
    2992:	37 ed       	ldi	r19, 0xD7	; 215
    2994:	43 e2       	ldi	r20, 0x23	; 35
    2996:	50 e4       	ldi	r21, 0x40	; 64
    2998:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 ed       	ldi	r19, 0xD0	; 208
    29a8:	4f eb       	ldi	r20, 0xBF	; 191
    29aa:	54 e4       	ldi	r21, 0x44	; 68
    29ac:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__divsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	bc 01       	movw	r22, r24
    29b6:	cd 01       	movw	r24, r26
    29b8:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    29c4:	cd 5a       	subi	r28, 0xAD	; 173
    29c6:	df 4f       	sbci	r29, 0xFF	; 255
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	1f 91       	pop	r17
    29d8:	0f 91       	pop	r16
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	df 90       	pop	r13
    29e0:	cf 90       	pop	r12
    29e2:	bf 90       	pop	r11
    29e4:	af 90       	pop	r10
    29e6:	08 95       	ret

000029e8 <main>:
#include "DC_motor.h"
#include "lm35_sensor.h"
#include "lcd.h"

void main(void)
{
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
    29f0:	29 97       	sbiw	r28, 0x09	; 9
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    29fc:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <LCD_init>
	DcMotor_Init();
    2a00:	0e 94 47 09 	call	0x128e	; 0x128e <DcMotor_Init>
	uint64 temp=0;
    2a04:	1a 82       	std	Y+2, r1	; 0x02
    2a06:	1b 82       	std	Y+3, r1	; 0x03
    2a08:	1c 82       	std	Y+4, r1	; 0x04
    2a0a:	1d 82       	std	Y+5, r1	; 0x05
    2a0c:	1e 82       	std	Y+6, r1	; 0x06
    2a0e:	1f 82       	std	Y+7, r1	; 0x07
    2a10:	18 86       	std	Y+8, r1	; 0x08
    2a12:	19 86       	std	Y+9, r1	; 0x09
	uint8 fan_state=0;
    2a14:	19 82       	std	Y+1, r1	; 0x01

	while(1){
		temp=LM35_getTemperature();
    2a16:	0e 94 2d 12 	call	0x245a	; 0x245a <LM35_getTemperature>
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	50 e0       	ldi	r21, 0x00	; 0
    2a22:	60 e0       	ldi	r22, 0x00	; 0
    2a24:	70 e0       	ldi	r23, 0x00	; 0
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	2a 83       	std	Y+2, r18	; 0x02
    2a2c:	3b 83       	std	Y+3, r19	; 0x03
    2a2e:	4c 83       	std	Y+4, r20	; 0x04
    2a30:	5d 83       	std	Y+5, r21	; 0x05
    2a32:	6e 83       	std	Y+6, r22	; 0x06
    2a34:	7f 83       	std	Y+7, r23	; 0x07
    2a36:	88 87       	std	Y+8, r24	; 0x08
    2a38:	99 87       	std	Y+9, r25	; 0x09

		if(temp < 30){
    2a3a:	89 85       	ldd	r24, Y+9	; 0x09
    2a3c:	88 23       	and	r24, r24
    2a3e:	79 f5       	brne	.+94     	; 0x2a9e <main+0xb6>
    2a40:	89 85       	ldd	r24, Y+9	; 0x09
    2a42:	88 23       	and	r24, r24
    2a44:	39 f5       	brne	.+78     	; 0x2a94 <main+0xac>
    2a46:	88 85       	ldd	r24, Y+8	; 0x08
    2a48:	88 23       	and	r24, r24
    2a4a:	49 f5       	brne	.+82     	; 0x2a9e <main+0xb6>
    2a4c:	88 85       	ldd	r24, Y+8	; 0x08
    2a4e:	88 23       	and	r24, r24
    2a50:	09 f5       	brne	.+66     	; 0x2a94 <main+0xac>
    2a52:	8f 81       	ldd	r24, Y+7	; 0x07
    2a54:	88 23       	and	r24, r24
    2a56:	19 f5       	brne	.+70     	; 0x2a9e <main+0xb6>
    2a58:	8f 81       	ldd	r24, Y+7	; 0x07
    2a5a:	88 23       	and	r24, r24
    2a5c:	d9 f4       	brne	.+54     	; 0x2a94 <main+0xac>
    2a5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a60:	88 23       	and	r24, r24
    2a62:	e9 f4       	brne	.+58     	; 0x2a9e <main+0xb6>
    2a64:	8e 81       	ldd	r24, Y+6	; 0x06
    2a66:	88 23       	and	r24, r24
    2a68:	a9 f4       	brne	.+42     	; 0x2a94 <main+0xac>
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	88 23       	and	r24, r24
    2a6e:	b9 f4       	brne	.+46     	; 0x2a9e <main+0xb6>
    2a70:	8d 81       	ldd	r24, Y+5	; 0x05
    2a72:	88 23       	and	r24, r24
    2a74:	79 f4       	brne	.+30     	; 0x2a94 <main+0xac>
    2a76:	8c 81       	ldd	r24, Y+4	; 0x04
    2a78:	88 23       	and	r24, r24
    2a7a:	89 f4       	brne	.+34     	; 0x2a9e <main+0xb6>
    2a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a7e:	88 23       	and	r24, r24
    2a80:	49 f4       	brne	.+18     	; 0x2a94 <main+0xac>
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	88 23       	and	r24, r24
    2a86:	59 f4       	brne	.+22     	; 0x2a9e <main+0xb6>
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	88 23       	and	r24, r24
    2a8c:	19 f4       	brne	.+6      	; 0x2a94 <main+0xac>
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	8e 31       	cpi	r24, 0x1E	; 30
    2a92:	28 f4       	brcc	.+10     	; 0x2a9e <main+0xb6>
			DcMotor_Rotate(STOP,0);
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	60 e0       	ldi	r22, 0x00	; 0
    2a98:	0e 94 66 09 	call	0x12cc	; 0x12cc <DcMotor_Rotate>
    2a9c:	3b c1       	rjmp	.+630    	; 0x2d14 <main+0x32c>
		}
		else if(temp>= 30 && temp < 60){
    2a9e:	89 85       	ldd	r24, Y+9	; 0x09
    2aa0:	88 23       	and	r24, r24
    2aa2:	81 f5       	brne	.+96     	; 0x2b04 <main+0x11c>
    2aa4:	89 85       	ldd	r24, Y+9	; 0x09
    2aa6:	88 23       	and	r24, r24
    2aa8:	09 f0       	breq	.+2      	; 0x2aac <main+0xc4>
    2aaa:	60 c0       	rjmp	.+192    	; 0x2b6c <main+0x184>
    2aac:	88 85       	ldd	r24, Y+8	; 0x08
    2aae:	88 23       	and	r24, r24
    2ab0:	49 f5       	brne	.+82     	; 0x2b04 <main+0x11c>
    2ab2:	88 85       	ldd	r24, Y+8	; 0x08
    2ab4:	88 23       	and	r24, r24
    2ab6:	09 f0       	breq	.+2      	; 0x2aba <main+0xd2>
    2ab8:	59 c0       	rjmp	.+178    	; 0x2b6c <main+0x184>
    2aba:	8f 81       	ldd	r24, Y+7	; 0x07
    2abc:	88 23       	and	r24, r24
    2abe:	11 f5       	brne	.+68     	; 0x2b04 <main+0x11c>
    2ac0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ac2:	88 23       	and	r24, r24
    2ac4:	09 f0       	breq	.+2      	; 0x2ac8 <main+0xe0>
    2ac6:	52 c0       	rjmp	.+164    	; 0x2b6c <main+0x184>
    2ac8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aca:	88 23       	and	r24, r24
    2acc:	d9 f4       	brne	.+54     	; 0x2b04 <main+0x11c>
    2ace:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad0:	88 23       	and	r24, r24
    2ad2:	09 f0       	breq	.+2      	; 0x2ad6 <main+0xee>
    2ad4:	4b c0       	rjmp	.+150    	; 0x2b6c <main+0x184>
    2ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad8:	88 23       	and	r24, r24
    2ada:	a1 f4       	brne	.+40     	; 0x2b04 <main+0x11c>
    2adc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ade:	88 23       	and	r24, r24
    2ae0:	09 f0       	breq	.+2      	; 0x2ae4 <main+0xfc>
    2ae2:	44 c0       	rjmp	.+136    	; 0x2b6c <main+0x184>
    2ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae6:	88 23       	and	r24, r24
    2ae8:	69 f4       	brne	.+26     	; 0x2b04 <main+0x11c>
    2aea:	8c 81       	ldd	r24, Y+4	; 0x04
    2aec:	88 23       	and	r24, r24
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <main+0x10a>
    2af0:	3d c0       	rjmp	.+122    	; 0x2b6c <main+0x184>
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	88 23       	and	r24, r24
    2af6:	31 f4       	brne	.+12     	; 0x2b04 <main+0x11c>
    2af8:	8b 81       	ldd	r24, Y+3	; 0x03
    2afa:	88 23       	and	r24, r24
    2afc:	b9 f5       	brne	.+110    	; 0x2b6c <main+0x184>
    2afe:	8a 81       	ldd	r24, Y+2	; 0x02
    2b00:	8e 31       	cpi	r24, 0x1E	; 30
    2b02:	a0 f1       	brcs	.+104    	; 0x2b6c <main+0x184>
    2b04:	89 85       	ldd	r24, Y+9	; 0x09
    2b06:	88 23       	and	r24, r24
    2b08:	89 f5       	brne	.+98     	; 0x2b6c <main+0x184>
    2b0a:	89 85       	ldd	r24, Y+9	; 0x09
    2b0c:	88 23       	and	r24, r24
    2b0e:	39 f5       	brne	.+78     	; 0x2b5e <main+0x176>
    2b10:	88 85       	ldd	r24, Y+8	; 0x08
    2b12:	88 23       	and	r24, r24
    2b14:	59 f5       	brne	.+86     	; 0x2b6c <main+0x184>
    2b16:	88 85       	ldd	r24, Y+8	; 0x08
    2b18:	88 23       	and	r24, r24
    2b1a:	09 f5       	brne	.+66     	; 0x2b5e <main+0x176>
    2b1c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b1e:	88 23       	and	r24, r24
    2b20:	29 f5       	brne	.+74     	; 0x2b6c <main+0x184>
    2b22:	8f 81       	ldd	r24, Y+7	; 0x07
    2b24:	88 23       	and	r24, r24
    2b26:	d9 f4       	brne	.+54     	; 0x2b5e <main+0x176>
    2b28:	8e 81       	ldd	r24, Y+6	; 0x06
    2b2a:	88 23       	and	r24, r24
    2b2c:	f9 f4       	brne	.+62     	; 0x2b6c <main+0x184>
    2b2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b30:	88 23       	and	r24, r24
    2b32:	a9 f4       	brne	.+42     	; 0x2b5e <main+0x176>
    2b34:	8d 81       	ldd	r24, Y+5	; 0x05
    2b36:	88 23       	and	r24, r24
    2b38:	c9 f4       	brne	.+50     	; 0x2b6c <main+0x184>
    2b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3c:	88 23       	and	r24, r24
    2b3e:	79 f4       	brne	.+30     	; 0x2b5e <main+0x176>
    2b40:	8c 81       	ldd	r24, Y+4	; 0x04
    2b42:	88 23       	and	r24, r24
    2b44:	99 f4       	brne	.+38     	; 0x2b6c <main+0x184>
    2b46:	8c 81       	ldd	r24, Y+4	; 0x04
    2b48:	88 23       	and	r24, r24
    2b4a:	49 f4       	brne	.+18     	; 0x2b5e <main+0x176>
    2b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4e:	88 23       	and	r24, r24
    2b50:	69 f4       	brne	.+26     	; 0x2b6c <main+0x184>
    2b52:	8b 81       	ldd	r24, Y+3	; 0x03
    2b54:	88 23       	and	r24, r24
    2b56:	19 f4       	brne	.+6      	; 0x2b5e <main+0x176>
    2b58:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5a:	8c 33       	cpi	r24, 0x3C	; 60
    2b5c:	38 f4       	brcc	.+14     	; 0x2b6c <main+0x184>
			DcMotor_Rotate(CW,64);
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	60 e4       	ldi	r22, 0x40	; 64
    2b62:	0e 94 66 09 	call	0x12cc	; 0x12cc <DcMotor_Rotate>
			fan_state=1;
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	89 83       	std	Y+1, r24	; 0x01
    2b6a:	d4 c0       	rjmp	.+424    	; 0x2d14 <main+0x32c>
		}
		else if(temp>= 60 && temp < 90){
    2b6c:	89 85       	ldd	r24, Y+9	; 0x09
    2b6e:	88 23       	and	r24, r24
    2b70:	81 f5       	brne	.+96     	; 0x2bd2 <main+0x1ea>
    2b72:	89 85       	ldd	r24, Y+9	; 0x09
    2b74:	88 23       	and	r24, r24
    2b76:	09 f0       	breq	.+2      	; 0x2b7a <main+0x192>
    2b78:	60 c0       	rjmp	.+192    	; 0x2c3a <main+0x252>
    2b7a:	88 85       	ldd	r24, Y+8	; 0x08
    2b7c:	88 23       	and	r24, r24
    2b7e:	49 f5       	brne	.+82     	; 0x2bd2 <main+0x1ea>
    2b80:	88 85       	ldd	r24, Y+8	; 0x08
    2b82:	88 23       	and	r24, r24
    2b84:	09 f0       	breq	.+2      	; 0x2b88 <main+0x1a0>
    2b86:	59 c0       	rjmp	.+178    	; 0x2c3a <main+0x252>
    2b88:	8f 81       	ldd	r24, Y+7	; 0x07
    2b8a:	88 23       	and	r24, r24
    2b8c:	11 f5       	brne	.+68     	; 0x2bd2 <main+0x1ea>
    2b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b90:	88 23       	and	r24, r24
    2b92:	09 f0       	breq	.+2      	; 0x2b96 <main+0x1ae>
    2b94:	52 c0       	rjmp	.+164    	; 0x2c3a <main+0x252>
    2b96:	8e 81       	ldd	r24, Y+6	; 0x06
    2b98:	88 23       	and	r24, r24
    2b9a:	d9 f4       	brne	.+54     	; 0x2bd2 <main+0x1ea>
    2b9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b9e:	88 23       	and	r24, r24
    2ba0:	09 f0       	breq	.+2      	; 0x2ba4 <main+0x1bc>
    2ba2:	4b c0       	rjmp	.+150    	; 0x2c3a <main+0x252>
    2ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba6:	88 23       	and	r24, r24
    2ba8:	a1 f4       	brne	.+40     	; 0x2bd2 <main+0x1ea>
    2baa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bac:	88 23       	and	r24, r24
    2bae:	09 f0       	breq	.+2      	; 0x2bb2 <main+0x1ca>
    2bb0:	44 c0       	rjmp	.+136    	; 0x2c3a <main+0x252>
    2bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb4:	88 23       	and	r24, r24
    2bb6:	69 f4       	brne	.+26     	; 0x2bd2 <main+0x1ea>
    2bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bba:	88 23       	and	r24, r24
    2bbc:	09 f0       	breq	.+2      	; 0x2bc0 <main+0x1d8>
    2bbe:	3d c0       	rjmp	.+122    	; 0x2c3a <main+0x252>
    2bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc2:	88 23       	and	r24, r24
    2bc4:	31 f4       	brne	.+12     	; 0x2bd2 <main+0x1ea>
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	88 23       	and	r24, r24
    2bca:	b9 f5       	brne	.+110    	; 0x2c3a <main+0x252>
    2bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bce:	8c 33       	cpi	r24, 0x3C	; 60
    2bd0:	a0 f1       	brcs	.+104    	; 0x2c3a <main+0x252>
    2bd2:	89 85       	ldd	r24, Y+9	; 0x09
    2bd4:	88 23       	and	r24, r24
    2bd6:	89 f5       	brne	.+98     	; 0x2c3a <main+0x252>
    2bd8:	89 85       	ldd	r24, Y+9	; 0x09
    2bda:	88 23       	and	r24, r24
    2bdc:	39 f5       	brne	.+78     	; 0x2c2c <main+0x244>
    2bde:	88 85       	ldd	r24, Y+8	; 0x08
    2be0:	88 23       	and	r24, r24
    2be2:	59 f5       	brne	.+86     	; 0x2c3a <main+0x252>
    2be4:	88 85       	ldd	r24, Y+8	; 0x08
    2be6:	88 23       	and	r24, r24
    2be8:	09 f5       	brne	.+66     	; 0x2c2c <main+0x244>
    2bea:	8f 81       	ldd	r24, Y+7	; 0x07
    2bec:	88 23       	and	r24, r24
    2bee:	29 f5       	brne	.+74     	; 0x2c3a <main+0x252>
    2bf0:	8f 81       	ldd	r24, Y+7	; 0x07
    2bf2:	88 23       	and	r24, r24
    2bf4:	d9 f4       	brne	.+54     	; 0x2c2c <main+0x244>
    2bf6:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf8:	88 23       	and	r24, r24
    2bfa:	f9 f4       	brne	.+62     	; 0x2c3a <main+0x252>
    2bfc:	8e 81       	ldd	r24, Y+6	; 0x06
    2bfe:	88 23       	and	r24, r24
    2c00:	a9 f4       	brne	.+42     	; 0x2c2c <main+0x244>
    2c02:	8d 81       	ldd	r24, Y+5	; 0x05
    2c04:	88 23       	and	r24, r24
    2c06:	c9 f4       	brne	.+50     	; 0x2c3a <main+0x252>
    2c08:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0a:	88 23       	and	r24, r24
    2c0c:	79 f4       	brne	.+30     	; 0x2c2c <main+0x244>
    2c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c10:	88 23       	and	r24, r24
    2c12:	99 f4       	brne	.+38     	; 0x2c3a <main+0x252>
    2c14:	8c 81       	ldd	r24, Y+4	; 0x04
    2c16:	88 23       	and	r24, r24
    2c18:	49 f4       	brne	.+18     	; 0x2c2c <main+0x244>
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	88 23       	and	r24, r24
    2c1e:	69 f4       	brne	.+26     	; 0x2c3a <main+0x252>
    2c20:	8b 81       	ldd	r24, Y+3	; 0x03
    2c22:	88 23       	and	r24, r24
    2c24:	19 f4       	brne	.+6      	; 0x2c2c <main+0x244>
    2c26:	8a 81       	ldd	r24, Y+2	; 0x02
    2c28:	8a 35       	cpi	r24, 0x5A	; 90
    2c2a:	38 f4       	brcc	.+14     	; 0x2c3a <main+0x252>
			DcMotor_Rotate(CW,128);
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	60 e8       	ldi	r22, 0x80	; 128
    2c30:	0e 94 66 09 	call	0x12cc	; 0x12cc <DcMotor_Rotate>
			fan_state=1;
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	89 83       	std	Y+1, r24	; 0x01
    2c38:	6d c0       	rjmp	.+218    	; 0x2d14 <main+0x32c>
		}
		else if(temp>= 960 && temp < 120){
    2c3a:	89 85       	ldd	r24, Y+9	; 0x09
    2c3c:	88 23       	and	r24, r24
    2c3e:	81 f5       	brne	.+96     	; 0x2ca0 <main+0x2b8>
    2c40:	89 85       	ldd	r24, Y+9	; 0x09
    2c42:	88 23       	and	r24, r24
    2c44:	09 f0       	breq	.+2      	; 0x2c48 <main+0x260>
    2c46:	60 c0       	rjmp	.+192    	; 0x2d08 <main+0x320>
    2c48:	88 85       	ldd	r24, Y+8	; 0x08
    2c4a:	88 23       	and	r24, r24
    2c4c:	49 f5       	brne	.+82     	; 0x2ca0 <main+0x2b8>
    2c4e:	88 85       	ldd	r24, Y+8	; 0x08
    2c50:	88 23       	and	r24, r24
    2c52:	09 f0       	breq	.+2      	; 0x2c56 <main+0x26e>
    2c54:	59 c0       	rjmp	.+178    	; 0x2d08 <main+0x320>
    2c56:	8f 81       	ldd	r24, Y+7	; 0x07
    2c58:	88 23       	and	r24, r24
    2c5a:	11 f5       	brne	.+68     	; 0x2ca0 <main+0x2b8>
    2c5c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c5e:	88 23       	and	r24, r24
    2c60:	09 f0       	breq	.+2      	; 0x2c64 <main+0x27c>
    2c62:	52 c0       	rjmp	.+164    	; 0x2d08 <main+0x320>
    2c64:	8e 81       	ldd	r24, Y+6	; 0x06
    2c66:	88 23       	and	r24, r24
    2c68:	d9 f4       	brne	.+54     	; 0x2ca0 <main+0x2b8>
    2c6a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c6c:	88 23       	and	r24, r24
    2c6e:	09 f0       	breq	.+2      	; 0x2c72 <main+0x28a>
    2c70:	4b c0       	rjmp	.+150    	; 0x2d08 <main+0x320>
    2c72:	8d 81       	ldd	r24, Y+5	; 0x05
    2c74:	88 23       	and	r24, r24
    2c76:	a1 f4       	brne	.+40     	; 0x2ca0 <main+0x2b8>
    2c78:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7a:	88 23       	and	r24, r24
    2c7c:	09 f0       	breq	.+2      	; 0x2c80 <main+0x298>
    2c7e:	44 c0       	rjmp	.+136    	; 0x2d08 <main+0x320>
    2c80:	8c 81       	ldd	r24, Y+4	; 0x04
    2c82:	88 23       	and	r24, r24
    2c84:	69 f4       	brne	.+26     	; 0x2ca0 <main+0x2b8>
    2c86:	8c 81       	ldd	r24, Y+4	; 0x04
    2c88:	88 23       	and	r24, r24
    2c8a:	09 f0       	breq	.+2      	; 0x2c8e <main+0x2a6>
    2c8c:	3d c0       	rjmp	.+122    	; 0x2d08 <main+0x320>
    2c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c90:	84 30       	cpi	r24, 0x04	; 4
    2c92:	30 f4       	brcc	.+12     	; 0x2ca0 <main+0x2b8>
    2c94:	8b 81       	ldd	r24, Y+3	; 0x03
    2c96:	83 30       	cpi	r24, 0x03	; 3
    2c98:	b9 f5       	brne	.+110    	; 0x2d08 <main+0x320>
    2c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9c:	80 3c       	cpi	r24, 0xC0	; 192
    2c9e:	a0 f1       	brcs	.+104    	; 0x2d08 <main+0x320>
    2ca0:	89 85       	ldd	r24, Y+9	; 0x09
    2ca2:	88 23       	and	r24, r24
    2ca4:	89 f5       	brne	.+98     	; 0x2d08 <main+0x320>
    2ca6:	89 85       	ldd	r24, Y+9	; 0x09
    2ca8:	88 23       	and	r24, r24
    2caa:	39 f5       	brne	.+78     	; 0x2cfa <main+0x312>
    2cac:	88 85       	ldd	r24, Y+8	; 0x08
    2cae:	88 23       	and	r24, r24
    2cb0:	59 f5       	brne	.+86     	; 0x2d08 <main+0x320>
    2cb2:	88 85       	ldd	r24, Y+8	; 0x08
    2cb4:	88 23       	and	r24, r24
    2cb6:	09 f5       	brne	.+66     	; 0x2cfa <main+0x312>
    2cb8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cba:	88 23       	and	r24, r24
    2cbc:	29 f5       	brne	.+74     	; 0x2d08 <main+0x320>
    2cbe:	8f 81       	ldd	r24, Y+7	; 0x07
    2cc0:	88 23       	and	r24, r24
    2cc2:	d9 f4       	brne	.+54     	; 0x2cfa <main+0x312>
    2cc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc6:	88 23       	and	r24, r24
    2cc8:	f9 f4       	brne	.+62     	; 0x2d08 <main+0x320>
    2cca:	8e 81       	ldd	r24, Y+6	; 0x06
    2ccc:	88 23       	and	r24, r24
    2cce:	a9 f4       	brne	.+42     	; 0x2cfa <main+0x312>
    2cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd2:	88 23       	and	r24, r24
    2cd4:	c9 f4       	brne	.+50     	; 0x2d08 <main+0x320>
    2cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd8:	88 23       	and	r24, r24
    2cda:	79 f4       	brne	.+30     	; 0x2cfa <main+0x312>
    2cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cde:	88 23       	and	r24, r24
    2ce0:	99 f4       	brne	.+38     	; 0x2d08 <main+0x320>
    2ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce4:	88 23       	and	r24, r24
    2ce6:	49 f4       	brne	.+18     	; 0x2cfa <main+0x312>
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	88 23       	and	r24, r24
    2cec:	69 f4       	brne	.+26     	; 0x2d08 <main+0x320>
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	88 23       	and	r24, r24
    2cf2:	19 f4       	brne	.+6      	; 0x2cfa <main+0x312>
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	88 37       	cpi	r24, 0x78	; 120
    2cf8:	38 f4       	brcc	.+14     	; 0x2d08 <main+0x320>
			DcMotor_Rotate(CW,192);
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	60 ec       	ldi	r22, 0xC0	; 192
    2cfe:	0e 94 66 09 	call	0x12cc	; 0x12cc <DcMotor_Rotate>
			fan_state=1;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	06 c0       	rjmp	.+12     	; 0x2d14 <main+0x32c>
		}
		else {
			DcMotor_Rotate(CW,255);
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	6f ef       	ldi	r22, 0xFF	; 255
    2d0c:	0e 94 66 09 	call	0x12cc	; 0x12cc <DcMotor_Rotate>
			fan_state=1;
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	89 83       	std	Y+1, r24	; 0x01
		}
		LCD_displayStringRowColumn(0,3,"FAN  is ");
    2d14:	20 e6       	ldi	r18, 0x60	; 96
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	63 e0       	ldi	r22, 0x03	; 3
    2d1c:	a9 01       	movw	r20, r18
    2d1e:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_displayStringRowColumn>
		if(fan_state==OFF){
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	88 23       	and	r24, r24
    2d26:	29 f4       	brne	.+10     	; 0x2d32 <main+0x34a>
			LCD_displayString("OFF");
    2d28:	89 e6       	ldi	r24, 0x69	; 105
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_displayString>
    2d30:	04 c0       	rjmp	.+8      	; 0x2d3a <main+0x352>
		}
		else {
			LCD_displayString("ON");
    2d32:	8d e6       	ldi	r24, 0x6D	; 109
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_displayString>

		}
		LCD_displayStringRowColumn(1,2,"Temp = ");
    2d3a:	20 e7       	ldi	r18, 0x70	; 112
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	62 e0       	ldi	r22, 0x02	; 2
    2d42:	a9 01       	movw	r20, r18
    2d44:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_displayStringRowColumn>
		LCD_intgerToString(temp);
    2d48:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4c:	0e 94 00 12 	call	0x2400	; 0x2400 <LCD_intgerToString>
		LCD_displayString("C");
    2d50:	88 e7       	ldi	r24, 0x78	; 120
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LCD_displayString>
    2d58:	5e ce       	rjmp	.-836    	; 0x2a16 <main+0x2e>

00002d5a <__prologue_saves__>:
    2d5a:	2f 92       	push	r2
    2d5c:	3f 92       	push	r3
    2d5e:	4f 92       	push	r4
    2d60:	5f 92       	push	r5
    2d62:	6f 92       	push	r6
    2d64:	7f 92       	push	r7
    2d66:	8f 92       	push	r8
    2d68:	9f 92       	push	r9
    2d6a:	af 92       	push	r10
    2d6c:	bf 92       	push	r11
    2d6e:	cf 92       	push	r12
    2d70:	df 92       	push	r13
    2d72:	ef 92       	push	r14
    2d74:	ff 92       	push	r15
    2d76:	0f 93       	push	r16
    2d78:	1f 93       	push	r17
    2d7a:	cf 93       	push	r28
    2d7c:	df 93       	push	r29
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
    2d82:	ca 1b       	sub	r28, r26
    2d84:	db 0b       	sbc	r29, r27
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	f8 94       	cli
    2d8a:	de bf       	out	0x3e, r29	; 62
    2d8c:	0f be       	out	0x3f, r0	; 63
    2d8e:	cd bf       	out	0x3d, r28	; 61
    2d90:	09 94       	ijmp

00002d92 <__epilogue_restores__>:
    2d92:	2a 88       	ldd	r2, Y+18	; 0x12
    2d94:	39 88       	ldd	r3, Y+17	; 0x11
    2d96:	48 88       	ldd	r4, Y+16	; 0x10
    2d98:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2da0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2da2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2da4:	b9 84       	ldd	r11, Y+9	; 0x09
    2da6:	c8 84       	ldd	r12, Y+8	; 0x08
    2da8:	df 80       	ldd	r13, Y+7	; 0x07
    2daa:	ee 80       	ldd	r14, Y+6	; 0x06
    2dac:	fd 80       	ldd	r15, Y+5	; 0x05
    2dae:	0c 81       	ldd	r16, Y+4	; 0x04
    2db0:	1b 81       	ldd	r17, Y+3	; 0x03
    2db2:	aa 81       	ldd	r26, Y+2	; 0x02
    2db4:	b9 81       	ldd	r27, Y+1	; 0x01
    2db6:	ce 0f       	add	r28, r30
    2db8:	d1 1d       	adc	r29, r1
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
    2dc4:	ed 01       	movw	r28, r26
    2dc6:	08 95       	ret

00002dc8 <itoa>:
    2dc8:	fb 01       	movw	r30, r22
    2dca:	9f 01       	movw	r18, r30
    2dcc:	e8 94       	clt
    2dce:	42 30       	cpi	r20, 0x02	; 2
    2dd0:	c4 f0       	brlt	.+48     	; 0x2e02 <itoa+0x3a>
    2dd2:	45 32       	cpi	r20, 0x25	; 37
    2dd4:	b4 f4       	brge	.+44     	; 0x2e02 <itoa+0x3a>
    2dd6:	4a 30       	cpi	r20, 0x0A	; 10
    2dd8:	29 f4       	brne	.+10     	; 0x2de4 <itoa+0x1c>
    2dda:	97 fb       	bst	r25, 7
    2ddc:	1e f4       	brtc	.+6      	; 0x2de4 <itoa+0x1c>
    2dde:	90 95       	com	r25
    2de0:	81 95       	neg	r24
    2de2:	9f 4f       	sbci	r25, 0xFF	; 255
    2de4:	64 2f       	mov	r22, r20
    2de6:	77 27       	eor	r23, r23
    2de8:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <__udivmodhi4>
    2dec:	80 5d       	subi	r24, 0xD0	; 208
    2dee:	8a 33       	cpi	r24, 0x3A	; 58
    2df0:	0c f0       	brlt	.+2      	; 0x2df4 <itoa+0x2c>
    2df2:	89 5d       	subi	r24, 0xD9	; 217
    2df4:	81 93       	st	Z+, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	00 97       	sbiw	r24, 0x00	; 0
    2dfa:	a1 f7       	brne	.-24     	; 0x2de4 <itoa+0x1c>
    2dfc:	16 f4       	brtc	.+4      	; 0x2e02 <itoa+0x3a>
    2dfe:	5d e2       	ldi	r21, 0x2D	; 45
    2e00:	51 93       	st	Z+, r21
    2e02:	10 82       	st	Z, r1
    2e04:	c9 01       	movw	r24, r18
    2e06:	0c 94 05 17 	jmp	0x2e0a	; 0x2e0a <strrev>

00002e0a <strrev>:
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	67 2f       	mov	r22, r23
    2e10:	71 91       	ld	r23, Z+
    2e12:	77 23       	and	r23, r23
    2e14:	e1 f7       	brne	.-8      	; 0x2e0e <strrev+0x4>
    2e16:	32 97       	sbiw	r30, 0x02	; 2
    2e18:	04 c0       	rjmp	.+8      	; 0x2e22 <strrev+0x18>
    2e1a:	7c 91       	ld	r23, X
    2e1c:	6d 93       	st	X+, r22
    2e1e:	70 83       	st	Z, r23
    2e20:	62 91       	ld	r22, -Z
    2e22:	ae 17       	cp	r26, r30
    2e24:	bf 07       	cpc	r27, r31
    2e26:	c8 f3       	brcs	.-14     	; 0x2e1a <strrev+0x10>
    2e28:	08 95       	ret

00002e2a <__udivmodhi4>:
    2e2a:	aa 1b       	sub	r26, r26
    2e2c:	bb 1b       	sub	r27, r27
    2e2e:	51 e1       	ldi	r21, 0x11	; 17
    2e30:	07 c0       	rjmp	.+14     	; 0x2e40 <__udivmodhi4_ep>

00002e32 <__udivmodhi4_loop>:
    2e32:	aa 1f       	adc	r26, r26
    2e34:	bb 1f       	adc	r27, r27
    2e36:	a6 17       	cp	r26, r22
    2e38:	b7 07       	cpc	r27, r23
    2e3a:	10 f0       	brcs	.+4      	; 0x2e40 <__udivmodhi4_ep>
    2e3c:	a6 1b       	sub	r26, r22
    2e3e:	b7 0b       	sbc	r27, r23

00002e40 <__udivmodhi4_ep>:
    2e40:	88 1f       	adc	r24, r24
    2e42:	99 1f       	adc	r25, r25
    2e44:	5a 95       	dec	r21
    2e46:	a9 f7       	brne	.-22     	; 0x2e32 <__udivmodhi4_loop>
    2e48:	80 95       	com	r24
    2e4a:	90 95       	com	r25
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	08 95       	ret

00002e52 <_exit>:
    2e52:	f8 94       	cli

00002e54 <__stop_program>:
    2e54:	ff cf       	rjmp	.-2      	; 0x2e54 <__stop_program>
